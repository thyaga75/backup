'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _teen_process = require('teen_process');

var _asyncbox = require('asyncbox');

var _appiumXcode = require('appium-xcode');

var _nodeSimctl = require('node-simctl');

var _appiumSupport = require('appium-support');

function killAllSimulators() {
  var appName, xcodeVersion, allSimsAreShutDown;
  return _regeneratorRuntime.async(function killAllSimulators$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        allSimsAreShutDown = function allSimsAreShutDown() {
          var devices;
          return _regeneratorRuntime.async(function allSimsAreShutDown$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap((0, _nodeSimctl.getDevices)());

              case 2:
                devices = context$2$0.sent;

                devices = _lodash2['default'].flatten(_lodash2['default'].values(devices));
                return context$2$0.abrupt('return', _lodash2['default'].every(devices, function (sim) {
                  return sim.state === 'Shutdown';
                }));

              case 5:
              case 'end':
                return context$2$0.stop();
            }
          }, null, this);
        };

        _logger2['default'].debug('Killing all iOS Simulators');

        appName = undefined;
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap((0, _appiumXcode.getVersion)(true));

      case 5:
        xcodeVersion = context$1$0.sent;

        if (xcodeVersion.major === 7) {
          appName = 'Simulator';
        } else {
          appName = 'iOS Simulator';
        }

        context$1$0.prev = 7;
        context$1$0.next = 10;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('osascript', ['-e', 'quit app "' + appName + '"']));

      case 10:
        context$1$0.next = 15;
        break;

      case 12:
        context$1$0.prev = 12;
        context$1$0.t0 = context$1$0['catch'](7);

        // on some systems we get an error that the application is not running
        if (JSON.stringify(context$1$0.t0).match(/Application isn.t running/)) {
          _logger2['default'].debug('Application is not running. Continuing');
        } else {
          _logger2['default'].errorAndThrow(context$1$0.t0);
        }

      case 15:
        context$1$0.next = 17;
        return _regeneratorRuntime.awrap((0, _asyncbox.waitForCondition)(allSimsAreShutDown, {
          waitMs: 60 * 1000,
          intervalMs: 200
        }));

      case 17:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[7, 12]]);
}

function endAllSimulatorDaemons() {
  var _arr, _i, servicePattern, launchCtlCommand, stopCmd, removeCmd;

  return _regeneratorRuntime.async(function endAllSimulatorDaemons$(context$1$0) {
    var _this = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Ending all simulator daemons');
        _arr = ['com.apple.iphonesimulator', 'com.apple.CoreSimulator'];
        _i = 0;

      case 3:
        if (!(_i < _arr.length)) {
          context$1$0.next = 28;
          break;
        }

        servicePattern = _arr[_i];

        _logger2['default'].debug('Killing any other ' + servicePattern + ' daemons');
        launchCtlCommand = 'launchctl list | grep ' + servicePattern + ' | cut -f 3 | xargs -n 1 launchctl';
        context$1$0.prev = 7;
        stopCmd = launchCtlCommand + ' stop';
        context$1$0.next = 11;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('bash', ['-c', stopCmd]));

      case 11:
        context$1$0.next = 16;
        break;

      case 13:
        context$1$0.prev = 13;
        context$1$0.t0 = context$1$0['catch'](7);

        _logger2['default'].warn('Could not stop ' + servicePattern + ' daemons, carrying on anyway!');

      case 16:
        context$1$0.prev = 16;
        removeCmd = launchCtlCommand + ' remove';
        context$1$0.next = 20;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('bash', ['-c', removeCmd]));

      case 20:
        context$1$0.next = 25;
        break;

      case 22:
        context$1$0.prev = 22;
        context$1$0.t1 = context$1$0['catch'](16);

        _logger2['default'].warn('Could not remove ' + servicePattern + ' daemons, carrying on anyway!');

      case 25:
        _i++;
        context$1$0.next = 3;
        break;

      case 28:
        context$1$0.prev = 28;
        context$1$0.next = 31;
        return _regeneratorRuntime.awrap((0, _asyncbox.waitForCondition)(function callee$1$0() {
          var _ref, stdout;

          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap((0, _teen_process.exec)('bash', ['-c', 'ps -e  | grep launchd_sim | grep -v bash | grep -v grep | awk {\'print$1\'}']));

              case 2:
                _ref = context$2$0.sent;
                stdout = _ref.stdout;
                return context$2$0.abrupt('return', stdout.trim().length === 0);

              case 5:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this);
        }, { waitMs: 5000, intervalMs: 500 }));

      case 31:
        context$1$0.next = 36;
        break;

      case 33:
        context$1$0.prev = 33;
        context$1$0.t2 = context$1$0['catch'](28);

        _logger2['default'].warn('Could not end all simulator daemons, carrying on!');

      case 36:
        _logger2['default'].debug('Finishing ending all simulator daemons');

      case 37:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[7, 13], [16, 22], [28, 33]]);
}

function simExists(udid) {
  var devices;
  return _regeneratorRuntime.async(function simExists$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap((0, _nodeSimctl.getDevices)());

      case 2:
        devices = context$1$0.sent;

        devices = _lodash2['default'].toPairs(devices).map(function (pair) {
          return pair[1];
        }).reduce(function (a, b) {
          return a.concat(b);
        }, []);
        return context$1$0.abrupt('return', !!_lodash2['default'].find(devices, function (sim) {
          return sim.udid === udid;
        }));

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function safeRimRaf(delPath) {
  var tryNum = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];
  return _regeneratorRuntime.async(function safeRimRaf$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.prev = 0;
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.rimraf(delPath));

      case 3:
        context$1$0.next = 16;
        break;

      case 5:
        context$1$0.prev = 5;
        context$1$0.t0 = context$1$0['catch'](0);

        if (!(tryNum < 20)) {
          context$1$0.next = 16;
          break;
        }

        if (!(context$1$0.t0.message.indexOf('ENOTEMPTY') !== -1)) {
          context$1$0.next = 13;
          break;
        }

        _logger2['default'].debug('Path \'' + delPath + '\' was not empty during delete; retrying');
        return context$1$0.abrupt('return', safeRimRaf(delPath, tryNum + 1));

      case 13:
        if (!(context$1$0.t0.message.indexOf('ENOENT') !== -1)) {
          context$1$0.next = 16;
          break;
        }

        _logger2['default'].debug('Path \'' + delPath + '\'\' did not exist when we tried to delete, ignoring');
        return context$1$0.abrupt('return', safeRimRaf(delPath, tryNum + 1));

      case 16:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[0, 5]]);
}

exports.killAllSimulators = killAllSimulators;
exports.endAllSimulatorDaemons = endAllSimulatorDaemons;
exports.safeRimRaf = safeRimRaf;
exports.simExists = simExists;

// waiting until the simulator service has died.

// see the README for github.com/appium/node-simctl for example output of getDevices()
//# sourceMappingURL=data:application/json;base64,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QVUsR0FBVixVQUFVO1FBQUUsU0FBUyxHQUFULFNBQVMiLCJmaWxlIjoibGliL3V0aWxzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGxvZyBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgZXhlYyB9IGZyb20gJ3RlZW5fcHJvY2Vzcyc7XG5pbXBvcnQgeyB3YWl0Rm9yQ29uZGl0aW9uIH0gZnJvbSAnYXN5bmNib3gnO1xuaW1wb3J0IHsgZ2V0VmVyc2lvbiB9IGZyb20gJ2FwcGl1bS14Y29kZSc7XG5pbXBvcnQgeyBnZXREZXZpY2VzIH0gZnJvbSAnbm9kZS1zaW1jdGwnO1xuaW1wb3J0IHsgZnMgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5cblxuYXN5bmMgZnVuY3Rpb24ga2lsbEFsbFNpbXVsYXRvcnMgKCkge1xuICBsb2cuZGVidWcoJ0tpbGxpbmcgYWxsIGlPUyBTaW11bGF0b3JzJyk7XG5cbiAgbGV0IGFwcE5hbWU7XG4gIGxldCB4Y29kZVZlcnNpb24gPSBhd2FpdCBnZXRWZXJzaW9uKHRydWUpO1xuICBpZiAoeGNvZGVWZXJzaW9uLm1ham9yID09PSA3KSB7XG4gICAgYXBwTmFtZSA9ICdTaW11bGF0b3InO1xuICB9IGVsc2Uge1xuICAgIGFwcE5hbWUgPSAnaU9TIFNpbXVsYXRvcic7XG4gIH1cblxuICB0cnkge1xuICAgIGF3YWl0IGV4ZWMoJ29zYXNjcmlwdCcsIFsnLWUnLCBgcXVpdCBhcHAgXCIke2FwcE5hbWV9XCJgXSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBvbiBzb21lIHN5c3RlbXMgd2UgZ2V0IGFuIGVycm9yIHRoYXQgdGhlIGFwcGxpY2F0aW9uIGlzIG5vdCBydW5uaW5nXG4gICAgaWYgKEpTT04uc3RyaW5naWZ5KGUpLm1hdGNoKC9BcHBsaWNhdGlvbiBpc24udCBydW5uaW5nLykpIHtcbiAgICAgIGxvZy5kZWJ1ZygnQXBwbGljYXRpb24gaXMgbm90IHJ1bm5pbmcuIENvbnRpbnVpbmcnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9nLmVycm9yQW5kVGhyb3coZSk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZnVuY3Rpb24gYWxsU2ltc0FyZVNodXREb3duICgpIHtcbiAgICBsZXQgZGV2aWNlcyA9IGF3YWl0IGdldERldmljZXMoKTtcbiAgICBkZXZpY2VzID0gXy5mbGF0dGVuKF8udmFsdWVzKGRldmljZXMpKTtcbiAgICByZXR1cm4gXy5ldmVyeShkZXZpY2VzLCAoc2ltKSA9PiB7XG4gICAgICByZXR1cm4gc2ltLnN0YXRlID09PSAnU2h1dGRvd24nO1xuICAgIH0pO1xuICB9XG5cbiAgYXdhaXQgd2FpdEZvckNvbmRpdGlvbihhbGxTaW1zQXJlU2h1dERvd24sIHtcbiAgICB3YWl0TXM6IDYwICogMTAwMCxcbiAgICBpbnRlcnZhbE1zOiAyMDBcbiAgfSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGVuZEFsbFNpbXVsYXRvckRhZW1vbnMgKCkge1xuICBsb2cuZGVidWcoJ0VuZGluZyBhbGwgc2ltdWxhdG9yIGRhZW1vbnMnKTtcbiAgZm9yIChsZXQgc2VydmljZVBhdHRlcm4gb2YgWydjb20uYXBwbGUuaXBob25lc2ltdWxhdG9yJywgJ2NvbS5hcHBsZS5Db3JlU2ltdWxhdG9yJ10pIHtcbiAgICBsb2cuZGVidWcoYEtpbGxpbmcgYW55IG90aGVyICR7c2VydmljZVBhdHRlcm59IGRhZW1vbnNgKTtcbiAgICBsZXQgbGF1bmNoQ3RsQ29tbWFuZCA9IGBsYXVuY2hjdGwgbGlzdCB8IGdyZXAgJHtzZXJ2aWNlUGF0dGVybn0gfCBjdXQgLWYgMyB8IHhhcmdzIC1uIDEgbGF1bmNoY3RsYDtcbiAgICB0cnkge1xuICAgICAgbGV0IHN0b3BDbWQgPSBgJHtsYXVuY2hDdGxDb21tYW5kfSBzdG9wYDtcbiAgICAgIGF3YWl0IGV4ZWMoJ2Jhc2gnLCBbJy1jJywgc3RvcENtZF0pO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgbG9nLndhcm4oYENvdWxkIG5vdCBzdG9wICR7c2VydmljZVBhdHRlcm59IGRhZW1vbnMsIGNhcnJ5aW5nIG9uIGFueXdheSFgKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGxldCByZW1vdmVDbWQgPSBgJHtsYXVuY2hDdGxDb21tYW5kfSByZW1vdmVgO1xuICAgICAgYXdhaXQgZXhlYygnYmFzaCcsIFsnLWMnLCByZW1vdmVDbWRdKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGxvZy53YXJuKGBDb3VsZCBub3QgcmVtb3ZlICR7c2VydmljZVBhdHRlcm59IGRhZW1vbnMsIGNhcnJ5aW5nIG9uIGFueXdheSFgKTtcbiAgICB9XG4gIH1cbiAgLy8gd2FpdGluZyB1bnRpbCB0aGUgc2ltdWxhdG9yIHNlcnZpY2UgaGFzIGRpZWQuXG4gIHRyeSB7XG4gICAgYXdhaXQgd2FpdEZvckNvbmRpdGlvbihhc3luYyAoKSA9PiB7XG4gICAgICBsZXQge3N0ZG91dH0gPSBhd2FpdCBleGVjKCdiYXNoJywgWyctYycsXG4gICAgICAgIGBwcyAtZSAgfCBncmVwIGxhdW5jaGRfc2ltIHwgZ3JlcCAtdiBiYXNoIHwgZ3JlcCAtdiBncmVwIHwgYXdrIHsncHJpbnQkMSd9YF0pO1xuICAgICAgcmV0dXJuIHN0ZG91dC50cmltKCkubGVuZ3RoID09PSAwO1xuICAgIH0sIHt3YWl0TXM6IDUwMDAsIGludGVydmFsTXM6IDUwMH0pO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBsb2cud2FybihgQ291bGQgbm90IGVuZCBhbGwgc2ltdWxhdG9yIGRhZW1vbnMsIGNhcnJ5aW5nIG9uIWApO1xuICB9XG4gIGxvZy5kZWJ1ZygnRmluaXNoaW5nIGVuZGluZyBhbGwgc2ltdWxhdG9yIGRhZW1vbnMnKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gc2ltRXhpc3RzICh1ZGlkKSB7XG4gIC8vIHNlZSB0aGUgUkVBRE1FIGZvciBnaXRodWIuY29tL2FwcGl1bS9ub2RlLXNpbWN0bCBmb3IgZXhhbXBsZSBvdXRwdXQgb2YgZ2V0RGV2aWNlcygpXG4gIGxldCBkZXZpY2VzID0gYXdhaXQgZ2V0RGV2aWNlcygpO1xuXG4gIGRldmljZXMgPSBfLnRvUGFpcnMoZGV2aWNlcykubWFwKChwYWlyKSA9PiB7XG4gICAgcmV0dXJuIHBhaXJbMV07XG4gIH0pLnJlZHVjZSgoYSwgYikgPT4ge1xuICAgIHJldHVybiBhLmNvbmNhdChiKTtcbiAgfSwgW10pO1xuICByZXR1cm4gISFfLmZpbmQoZGV2aWNlcywgKHNpbSkgPT4ge1xuICAgIHJldHVybiBzaW0udWRpZCA9PT0gdWRpZDtcbiAgfSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHNhZmVSaW1SYWYgKGRlbFBhdGgsIHRyeU51bSA9IDApIHtcbiAgdHJ5IHtcbiAgICBhd2FpdCBmcy5yaW1yYWYoZGVsUGF0aCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGlmICh0cnlOdW0gPCAyMCkge1xuICAgICAgaWYgKGVyci5tZXNzYWdlLmluZGV4T2YoJ0VOT1RFTVBUWScpICE9PSAtMSkge1xuICAgICAgICBsb2cuZGVidWcoYFBhdGggJyR7ZGVsUGF0aH0nIHdhcyBub3QgZW1wdHkgZHVyaW5nIGRlbGV0ZTsgcmV0cnlpbmdgKTtcbiAgICAgICAgcmV0dXJuIHNhZmVSaW1SYWYoZGVsUGF0aCwgdHJ5TnVtICsgMSk7XG4gICAgICB9IGVsc2UgaWYgKGVyci5tZXNzYWdlLmluZGV4T2YoJ0VOT0VOVCcpICE9PSAtMSkge1xuICAgICAgICBsb2cuZGVidWcoYFBhdGggJyR7ZGVsUGF0aH0nJyBkaWQgbm90IGV4aXN0IHdoZW4gd2UgdHJpZWQgdG8gZGVsZXRlLCBpZ25vcmluZ2ApO1xuICAgICAgICByZXR1cm4gc2FmZVJpbVJhZihkZWxQYXRoLCB0cnlOdW0gKyAxKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IHsga2lsbEFsbFNpbXVsYXRvcnMsIGVuZEFsbFNpbXVsYXRvckRhZW1vbnMsIHNhZmVSaW1SYWYsIHNpbUV4aXN0cyB9O1xuIl19