require('source-map-support').install();

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Promise = require('babel-runtime/core-js/promise')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this2 = this;

var _ = require('..');

var _teen_process = require('teen_process');

var tp = _interopRequireWildcard(_teen_process);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _appiumXcode = require('appium-xcode');

var _appiumXcode2 = _interopRequireDefault(_appiumXcode);

var _appiumTestSupport = require('appium-test-support');

var _appiumSupport = require('appium-support');

_chai2['default'].should();

var XCODE_VERSION = {
  versionString: '7.1.1',
  versionFloat: 7.1,
  major: 7,
  minor: 1,
  patch: 1
};

describe('instruments', function () {
  describe('quickInstrument', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      var _this = this;

      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          it('should create instruments', function callee$2$0() {
            var opts, instruments;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  opts = {
                    app: '/a/b/c/my.app'
                  };
                  context$3$0.next = 3;
                  return _regeneratorRuntime.awrap(_.Instruments.quickInstruments(opts));

                case 3:
                  instruments = context$3$0.sent;

                  instruments.app.should.equal(opts.app);

                case 5:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this);
          });

        case 1:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this2);
  });
  describe('constructor', function () {
    it('should create instruments', function () {
      var opts = {
        app: '/a/b/c/my.app'
      };
      var instruments = new _.Instruments(opts);
      instruments.app.should.equal(opts.app);
    });
  });
  describe('configure', (0, _appiumTestSupport.withMocks)({ xcode: _appiumXcode2['default'], utils: _.utils }, function (mocks) {
    it('should work', function callee$2$0() {
      var instruments;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            instruments = new _.Instruments({});

            mocks.xcode.expects('getVersion').once().returns(_Promise.resolve(XCODE_VERSION));
            mocks.xcode.expects('getAutomationTraceTemplatePath').once().returns(_Promise.resolve('/a/b/c/d/tracetemplate'));
            mocks.utils.expects('getInstrumentsPath').once().returns(_Promise.resolve('/a/b/c/instrumentspath'));
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(instruments.configure());

          case 6:
            instruments.xcodeVersion.versionString.should.equal(XCODE_VERSION.versionString);
            instruments.template.should.equal('/a/b/c/d/tracetemplate');
            instruments.instrumentsPath.should.equal('/a/b/c/instrumentspath');
            (0, _appiumTestSupport.verify)(mocks);

          case 10:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this2);
    });
  }));
  describe('spawnInstruments', (0, _appiumTestSupport.withMocks)({ fs: _appiumSupport.fs, tp: tp, utils: _.utils }, function (mocks) {
    it('should work', function callee$2$0() {
      var instruments;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            instruments = new _.Instruments({});

            instruments.xcodeVersion = XCODE_VERSION;
            instruments.template = '/a/b/c/d/tracetemplate';
            instruments.instrumentsPath = '/a/b/c/instrumentspath';
            mocks.fs.expects('exists').once().returns(_Promise.resolve(false));
            mocks.tp.expects('spawn').once().returns({});
            mocks.utils.expects('getIwdPath').once().returns(_Promise.resolve('/a/b/c/iwd'));
            context$3$0.next = 9;
            return _regeneratorRuntime.awrap(instruments.spawnInstruments());

          case 9:
            (0, _appiumTestSupport.verify)(mocks);

          case 10:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this2);
    });
  }));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvaW5zdHJ1bWVudHMtc3BlY3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Z0JBRTRCLElBQUk7OzRCQUVaLGNBQWM7O0lBQXRCLEVBQUU7O29CQUNHLE1BQU07Ozs7MkJBQ0wsY0FBYzs7OztpQ0FDRSxxQkFBcUI7OzZCQUNwQyxnQkFBZ0I7O0FBR25DLGtCQUFLLE1BQU0sRUFBRSxDQUFDOztBQUVkLElBQU0sYUFBYSxHQUFHO0FBQ3BCLGVBQWEsRUFBRSxPQUFPO0FBQ3RCLGNBQVksRUFBRSxHQUFHO0FBQ2pCLE9BQUssRUFBRSxDQUFDO0FBQ1IsT0FBSyxFQUFFLENBQUM7QUFDUixPQUFLLEVBQUUsQ0FBQztDQUNULENBQUM7O0FBRUYsUUFBUSxDQUFDLGFBQWEsRUFBRSxZQUFNO0FBQzVCLFVBQVEsQ0FBQyxpQkFBaUIsRUFBRTs7Ozs7O0FBQzFCLFlBQUUsQ0FBQywyQkFBMkIsRUFBRTtnQkFDMUIsSUFBSSxFQUdKLFdBQVc7Ozs7QUFIWCxzQkFBSSxHQUFHO0FBQ1QsdUJBQUcsRUFBRSxlQUFlO21CQUNyQjs7bURBQ3VCLGNBQVksZ0JBQWdCLENBQUMsSUFBSSxDQUFDOzs7QUFBdEQsNkJBQVc7O0FBQ2YsNkJBQVcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7Ozs7Ozs7V0FDeEMsQ0FBQyxDQUFDOzs7Ozs7O0dBQ0osQ0FBQyxDQUFDO0FBQ0gsVUFBUSxDQUFDLGFBQWEsRUFBRSxZQUFNO0FBQzVCLE1BQUUsQ0FBQywyQkFBMkIsRUFBRSxZQUFNO0FBQ3BDLFVBQUksSUFBSSxHQUFHO0FBQ1QsV0FBRyxFQUFFLGVBQWU7T0FDckIsQ0FBQztBQUNGLFVBQUksV0FBVyxHQUFHLGtCQUFnQixJQUFJLENBQUMsQ0FBQztBQUN4QyxpQkFBVyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUN4QyxDQUFDLENBQUM7R0FDSixDQUFDLENBQUM7QUFDSCxVQUFRLENBQUMsV0FBVyxFQUFFLGtDQUFVLEVBQUMsS0FBSywwQkFBQSxFQUFFLEtBQUssU0FBQSxFQUFDLEVBQUUsVUFBQyxLQUFLLEVBQUs7QUFDekQsTUFBRSxDQUFDLGFBQWEsRUFBRTtVQUNaLFdBQVc7Ozs7QUFBWCx1QkFBVyxHQUFHLGtCQUFnQixFQUFFLENBQUM7O0FBQ3JDLGlCQUFLLENBQUMsS0FBSyxDQUNSLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FDckIsSUFBSSxFQUFFLENBQ04sT0FBTyxDQUFDLFNBQVEsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7QUFDM0MsaUJBQUssQ0FBQyxLQUFLLENBQ1IsT0FBTyxDQUFDLGdDQUFnQyxDQUFDLENBQ3pDLElBQUksRUFBRSxDQUNOLE9BQU8sQ0FBQyxTQUFRLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDLENBQUM7QUFDdEQsaUJBQUssQ0FBQyxLQUFLLENBQ1IsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQzdCLElBQUksRUFBRSxDQUNOLE9BQU8sQ0FBQyxTQUFRLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDLENBQUM7OzZDQUNoRCxXQUFXLENBQUMsU0FBUyxFQUFFOzs7QUFDN0IsdUJBQVcsQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBQ2pGLHVCQUFXLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsd0JBQXdCLENBQUMsQ0FBQztBQUM1RCx1QkFBVyxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLHdCQUF3QixDQUFDLENBQUM7QUFDbkUsMkNBQU8sS0FBSyxDQUFDLENBQUM7Ozs7Ozs7S0FDZixDQUFDLENBQUM7R0FDSixDQUFDLENBQUMsQ0FBQztBQUNKLFVBQVEsQ0FBQyxrQkFBa0IsRUFBRSxrQ0FBVSxFQUFDLEVBQUUsbUJBQUEsRUFBRSxFQUFFLEVBQUYsRUFBRSxFQUFFLEtBQUssU0FBQSxFQUFDLEVBQUUsVUFBQyxLQUFLLEVBQUs7QUFDakUsTUFBRSxDQUFDLGFBQWEsRUFBRTtVQUNaLFdBQVc7Ozs7QUFBWCx1QkFBVyxHQUFHLGtCQUFnQixFQUFFLENBQUM7O0FBQ3JDLHVCQUFXLENBQUMsWUFBWSxHQUFHLGFBQWEsQ0FBQztBQUN6Qyx1QkFBVyxDQUFDLFFBQVEsR0FBRyx3QkFBd0IsQ0FBQztBQUNoRCx1QkFBVyxDQUFDLGVBQWUsR0FBRyx3QkFBd0IsQ0FBQztBQUN2RCxpQkFBSyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsT0FBTyxDQUFDLFNBQVEsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDbEUsaUJBQUssQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUM3QyxpQkFBSyxDQUFDLEtBQUssQ0FDUixPQUFPLENBQUMsWUFBWSxDQUFDLENBQ3JCLElBQUksRUFBRSxDQUNOLE9BQU8sQ0FBQyxTQUFRLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDOzs2Q0FDcEMsV0FBVyxDQUFDLGdCQUFnQixFQUFFOzs7QUFDcEMsMkNBQU8sS0FBSyxDQUFDLENBQUM7Ozs7Ozs7S0FDZixDQUFDLENBQUM7R0FDSixDQUFDLENBQUMsQ0FBQztDQUNMLENBQUMsQ0FBQyIsImZpbGUiOiJ0ZXN0L2luc3RydW1lbnRzLXNwZWNzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdHJhbnNwaWxlOm1vY2hhXG5cbmltcG9ydCB7IEluc3RydW1lbnRzIH0gZnJvbSAnLi4nO1xuaW1wb3J0IHsgdXRpbHMgfSBmcm9tICcuLic7XG5pbXBvcnQgKiBhcyB0cCBmcm9tICd0ZWVuX3Byb2Nlc3MnO1xuaW1wb3J0IGNoYWkgZnJvbSAnY2hhaSc7XG5pbXBvcnQgeGNvZGUgZnJvbSAnYXBwaXVtLXhjb2RlJztcbmltcG9ydCB7IHdpdGhNb2NrcywgdmVyaWZ5IH0gZnJvbSAnYXBwaXVtLXRlc3Qtc3VwcG9ydCc7XG5pbXBvcnQgeyBmcyB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcblxuXG5jaGFpLnNob3VsZCgpO1xuXG5jb25zdCBYQ09ERV9WRVJTSU9OID0ge1xuICB2ZXJzaW9uU3RyaW5nOiAnNy4xLjEnLFxuICB2ZXJzaW9uRmxvYXQ6IDcuMSxcbiAgbWFqb3I6IDcsXG4gIG1pbm9yOiAxLFxuICBwYXRjaDogMVxufTtcblxuZGVzY3JpYmUoJ2luc3RydW1lbnRzJywgKCkgPT4ge1xuICBkZXNjcmliZSgncXVpY2tJbnN0cnVtZW50JywgYXN5bmMgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgY3JlYXRlIGluc3RydW1lbnRzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbGV0IG9wdHMgPSB7XG4gICAgICAgIGFwcDogJy9hL2IvYy9teS5hcHAnLFxuICAgICAgfTtcbiAgICAgIGxldCBpbnN0cnVtZW50cyA9IGF3YWl0IEluc3RydW1lbnRzLnF1aWNrSW5zdHJ1bWVudHMob3B0cyk7XG4gICAgICBpbnN0cnVtZW50cy5hcHAuc2hvdWxkLmVxdWFsKG9wdHMuYXBwKTtcbiAgICB9KTtcbiAgfSk7XG4gIGRlc2NyaWJlKCdjb25zdHJ1Y3RvcicsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGNyZWF0ZSBpbnN0cnVtZW50cycsICgpID0+IHtcbiAgICAgIGxldCBvcHRzID0ge1xuICAgICAgICBhcHA6ICcvYS9iL2MvbXkuYXBwJyxcbiAgICAgIH07XG4gICAgICBsZXQgaW5zdHJ1bWVudHMgPSBuZXcgSW5zdHJ1bWVudHMob3B0cyk7XG4gICAgICBpbnN0cnVtZW50cy5hcHAuc2hvdWxkLmVxdWFsKG9wdHMuYXBwKTtcbiAgICB9KTtcbiAgfSk7XG4gIGRlc2NyaWJlKCdjb25maWd1cmUnLCB3aXRoTW9ja3Moe3hjb2RlLCB1dGlsc30sIChtb2NrcykgPT4ge1xuICAgIGl0KCdzaG91bGQgd29yaycsIGFzeW5jICgpID0+IHtcbiAgICAgIGxldCBpbnN0cnVtZW50cyA9IG5ldyBJbnN0cnVtZW50cyh7fSk7XG4gICAgICBtb2Nrcy54Y29kZVxuICAgICAgICAuZXhwZWN0cygnZ2V0VmVyc2lvbicpXG4gICAgICAgIC5vbmNlKClcbiAgICAgICAgLnJldHVybnMoUHJvbWlzZS5yZXNvbHZlKFhDT0RFX1ZFUlNJT04pKTtcbiAgICAgIG1vY2tzLnhjb2RlXG4gICAgICAgIC5leHBlY3RzKCdnZXRBdXRvbWF0aW9uVHJhY2VUZW1wbGF0ZVBhdGgnKVxuICAgICAgICAub25jZSgpXG4gICAgICAgIC5yZXR1cm5zKFByb21pc2UucmVzb2x2ZSgnL2EvYi9jL2QvdHJhY2V0ZW1wbGF0ZScpKTtcbiAgICAgIG1vY2tzLnV0aWxzXG4gICAgICAgIC5leHBlY3RzKCdnZXRJbnN0cnVtZW50c1BhdGgnKVxuICAgICAgICAub25jZSgpXG4gICAgICAgIC5yZXR1cm5zKFByb21pc2UucmVzb2x2ZSgnL2EvYi9jL2luc3RydW1lbnRzcGF0aCcpKTtcbiAgICAgIGF3YWl0IGluc3RydW1lbnRzLmNvbmZpZ3VyZSgpO1xuICAgICAgaW5zdHJ1bWVudHMueGNvZGVWZXJzaW9uLnZlcnNpb25TdHJpbmcuc2hvdWxkLmVxdWFsKFhDT0RFX1ZFUlNJT04udmVyc2lvblN0cmluZyk7XG4gICAgICBpbnN0cnVtZW50cy50ZW1wbGF0ZS5zaG91bGQuZXF1YWwoJy9hL2IvYy9kL3RyYWNldGVtcGxhdGUnKTtcbiAgICAgIGluc3RydW1lbnRzLmluc3RydW1lbnRzUGF0aC5zaG91bGQuZXF1YWwoJy9hL2IvYy9pbnN0cnVtZW50c3BhdGgnKTtcbiAgICAgIHZlcmlmeShtb2Nrcyk7XG4gICAgfSk7XG4gIH0pKTtcbiAgZGVzY3JpYmUoJ3NwYXduSW5zdHJ1bWVudHMnLCB3aXRoTW9ja3Moe2ZzLCB0cCwgdXRpbHN9LCAobW9ja3MpID0+IHtcbiAgICBpdCgnc2hvdWxkIHdvcmsnLCBhc3luYyAoKSA9PiB7XG4gICAgICBsZXQgaW5zdHJ1bWVudHMgPSBuZXcgSW5zdHJ1bWVudHMoe30pO1xuICAgICAgaW5zdHJ1bWVudHMueGNvZGVWZXJzaW9uID0gWENPREVfVkVSU0lPTjtcbiAgICAgIGluc3RydW1lbnRzLnRlbXBsYXRlID0gJy9hL2IvYy9kL3RyYWNldGVtcGxhdGUnO1xuICAgICAgaW5zdHJ1bWVudHMuaW5zdHJ1bWVudHNQYXRoID0gJy9hL2IvYy9pbnN0cnVtZW50c3BhdGgnO1xuICAgICAgbW9ja3MuZnMuZXhwZWN0cygnZXhpc3RzJykub25jZSgpLnJldHVybnMoUHJvbWlzZS5yZXNvbHZlKGZhbHNlKSk7XG4gICAgICBtb2Nrcy50cC5leHBlY3RzKCdzcGF3bicpLm9uY2UoKS5yZXR1cm5zKHt9KTtcbiAgICAgIG1vY2tzLnV0aWxzXG4gICAgICAgIC5leHBlY3RzKCdnZXRJd2RQYXRoJylcbiAgICAgICAgLm9uY2UoKVxuICAgICAgICAucmV0dXJucyhQcm9taXNlLnJlc29sdmUoJy9hL2IvYy9pd2QnKSk7XG4gICAgICBhd2FpdCBpbnN0cnVtZW50cy5zcGF3bkluc3RydW1lbnRzKCk7XG4gICAgICB2ZXJpZnkobW9ja3MpO1xuICAgIH0pO1xuICB9KSk7XG59KTtcbiJdfQ==