'use strict';

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _wd = require('wd');

var _wd2 = _interopRequireDefault(_wd);

require('request-promise');

// not used by this lib but a devDep of basedriver

var _appiumBaseDriverBuildTest = require('appium-base-driver/build/test');

var _ = require('../..');

var _helpers = require('./helpers');

var _contextTests = require('./context-tests');

var _contextTests2 = _interopRequireDefault(_contextTests);

var _findElementTests = require('./find-element-tests');

var _findElementTests2 = _interopRequireDefault(_findElementTests);

var _elementInteractionTests = require('./element-interaction-tests');

var _elementInteractionTests2 = _interopRequireDefault(_elementInteractionTests);

var _alertTests = require('./alert-tests');

var _alertTests2 = _interopRequireDefault(_alertTests);

var _generalTests = require('./general-tests');

var _generalTests2 = _interopRequireDefault(_generalTests);

require('source-map-support').install();

_chai2['default'].use(_chaiAsPromised2['default']);

var should = _chai2['default'].should();
var shouldStartServer = process.env.USE_RUNNING_SERVER !== "0";

// test the same things as for base driver
(0, _appiumBaseDriverBuildTest.baseDriverUnitTests)(_.FakeDriver, _helpers.DEFAULT_CAPS);
(0, _appiumBaseDriverBuildTest.baseDriverE2ETests)(_.FakeDriver, _helpers.DEFAULT_CAPS);

describe('FakeDriver - via HTTP', function () {
  var server = null;
  before(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          if (!shouldStartServer) {
            context$2$0.next = 4;
            break;
          }

          context$2$0.next = 3;
          return _regeneratorRuntime.awrap((0, _.startServer)(_helpers.TEST_PORT, _helpers.TEST_HOST));

        case 3:
          server = context$2$0.sent;

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  after(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          if (!server) {
            context$2$0.next = 3;
            break;
          }

          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(_bluebird2['default'].promisify(server.close.bind(server))());

        case 3:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  describe('session handling', function () {
    it('should start and stop a session', function callee$2$0() {
      var driver, _ref, _ref2, sessionId;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver = _wd2['default'].promiseChainRemote(_helpers.TEST_HOST, _helpers.TEST_PORT);
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.init(_helpers.DEFAULT_CAPS));

          case 3:
            _ref = context$3$0.sent;
            _ref2 = _slicedToArray(_ref, 1);
            sessionId = _ref2[0];

            should.exist(sessionId);
            sessionId.should.be.a('string');
            context$3$0.next = 10;
            return _regeneratorRuntime.awrap(driver.quit());

          case 10:
            context$3$0.next = 12;
            return _regeneratorRuntime.awrap(driver.title().should.eventually.be.rejectedWith(/terminated/));

          case 12:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  });

  describe('session-based tests', function () {
    (0, _contextTests2['default'])();
    (0, _findElementTests2['default'])();
    (0, _elementInteractionTests2['default'])();
    (0, _alertTests2['default'])();
    (0, _generalTests2['default'])();
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZHJpdmVyLWUyZS1zcGVjcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O3dCQUVjLFVBQVU7Ozs7b0JBQ1AsTUFBTTs7Ozs4QkFDSSxrQkFBa0I7Ozs7a0JBQzlCLElBQUk7Ozs7UUFDWixpQkFBaUI7Ozs7eUNBQ2dDLCtCQUErQjs7Z0JBQy9DLE9BQU87O3VCQUNJLFdBQVc7OzRCQUlyQyxpQkFBaUI7Ozs7Z0NBQ2Isc0JBQXNCOzs7O3VDQUNmLDZCQUE2Qjs7OzswQkFDMUMsZUFBZTs7Ozs0QkFDYixpQkFBaUI7Ozs7QUFqQjFDLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDOztBQVd4QyxrQkFBSyxHQUFHLDZCQUFnQixDQUFDOztBQVF6QixJQUFNLE1BQU0sR0FBRyxrQkFBSyxNQUFNLEVBQUUsQ0FBQztBQUM3QixJQUFNLGlCQUFpQixHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEtBQUssR0FBRyxDQUFDOzs7QUFHakUsd0ZBQTZDLENBQUM7QUFDOUMsdUZBQTRDLENBQUM7O0FBRTdDLFFBQVEsQ0FBQyx1QkFBdUIsRUFBRSxZQUFNO0FBQ3RDLE1BQUksTUFBTSxHQUFHLElBQUksQ0FBQztBQUNsQixRQUFNLENBQUM7Ozs7ZUFDRCxpQkFBaUI7Ozs7OzsyQ0FDSiwwREFBaUM7OztBQUFoRCxnQkFBTTs7Ozs7OztHQUVULENBQUMsQ0FBQztBQUNILE9BQUssQ0FBQzs7OztlQUNBLE1BQU07Ozs7OzsyQ0FDRixzQkFBRSxTQUFTLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRTs7Ozs7OztHQUVqRCxDQUFDLENBQUM7O0FBRUgsVUFBUSxDQUFDLGtCQUFrQixFQUFFLFlBQU07QUFDakMsTUFBRSxDQUFDLGlDQUFpQyxFQUFFO1VBQ2hDLE1BQU0sZUFDTCxTQUFTOzs7OztBQURWLGtCQUFNLEdBQUcsZ0JBQUcsa0JBQWtCLHdDQUFzQjs7NkNBQ2hDLE1BQU0sQ0FBQyxJQUFJLHVCQUFjOzs7OztBQUE1QyxxQkFBUzs7QUFDZCxrQkFBTSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUN4QixxQkFBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDOzs2Q0FDMUIsTUFBTSxDQUFDLElBQUksRUFBRTs7Ozs2Q0FDYixNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQzs7Ozs7OztLQUNyRSxDQUFDLENBQUM7R0FFSixDQUFDLENBQUM7O0FBRUgsVUFBUSxDQUFDLHFCQUFxQixFQUFFLFlBQU07QUFDcEMsb0NBQWMsQ0FBQztBQUNmLHdDQUFrQixDQUFDO0FBQ25CLCtDQUF5QixDQUFDO0FBQzFCLGtDQUFZLENBQUM7QUFDYixvQ0FBYyxDQUFDO0dBQ2hCLENBQUMsQ0FBQztDQUVKLENBQUMsQ0FBQyIsImZpbGUiOiJ0ZXN0L2RyaXZlci1lMmUtc3BlY3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlKCdzb3VyY2UtbWFwLXN1cHBvcnQnKS5pbnN0YWxsKCk7XG5cbmltcG9ydCBCIGZyb20gJ2JsdWViaXJkJztcbmltcG9ydCBjaGFpIGZyb20gJ2NoYWknO1xuaW1wb3J0IGNoYWlBc1Byb21pc2VkIGZyb20gJ2NoYWktYXMtcHJvbWlzZWQnO1xuaW1wb3J0IHdkIGZyb20gJ3dkJztcbmltcG9ydCAncmVxdWVzdC1wcm9taXNlJzsgLy8gbm90IHVzZWQgYnkgdGhpcyBsaWIgYnV0IGEgZGV2RGVwIG9mIGJhc2Vkcml2ZXJcbmltcG9ydCB7IGJhc2VEcml2ZXJFMkVUZXN0cywgYmFzZURyaXZlclVuaXRUZXN0cyB9IGZyb20gJ2FwcGl1bS1iYXNlLWRyaXZlci9idWlsZC90ZXN0JztcbmltcG9ydCB7IEZha2VEcml2ZXIsIHN0YXJ0U2VydmVyIH0gZnJvbSAnLi4vLi4nO1xuaW1wb3J0IHsgREVGQVVMVF9DQVBTLCBURVNUX0hPU1QsIFRFU1RfUE9SVCB9IGZyb20gJy4vaGVscGVycyc7XG5cbmNoYWkudXNlKGNoYWlBc1Byb21pc2VkKTtcblxuaW1wb3J0IGNvbnRleHRUZXN0cyBmcm9tICcuL2NvbnRleHQtdGVzdHMnO1xuaW1wb3J0IGZpbmRFbGVtZW50VGVzdHMgZnJvbSAnLi9maW5kLWVsZW1lbnQtdGVzdHMnO1xuaW1wb3J0IGVsZW1lbnRJbnRlcmFjdGlvblRlc3RzIGZyb20gJy4vZWxlbWVudC1pbnRlcmFjdGlvbi10ZXN0cyc7XG5pbXBvcnQgYWxlcnRUZXN0cyBmcm9tICcuL2FsZXJ0LXRlc3RzJztcbmltcG9ydCBnZW5lcmFsVGVzdHMgZnJvbSAnLi9nZW5lcmFsLXRlc3RzJztcblxuY29uc3Qgc2hvdWxkID0gY2hhaS5zaG91bGQoKTtcbmNvbnN0IHNob3VsZFN0YXJ0U2VydmVyID0gcHJvY2Vzcy5lbnYuVVNFX1JVTk5JTkdfU0VSVkVSICE9PSBcIjBcIjtcblxuLy8gdGVzdCB0aGUgc2FtZSB0aGluZ3MgYXMgZm9yIGJhc2UgZHJpdmVyXG5iYXNlRHJpdmVyVW5pdFRlc3RzKEZha2VEcml2ZXIsIERFRkFVTFRfQ0FQUyk7XG5iYXNlRHJpdmVyRTJFVGVzdHMoRmFrZURyaXZlciwgREVGQVVMVF9DQVBTKTtcblxuZGVzY3JpYmUoJ0Zha2VEcml2ZXIgLSB2aWEgSFRUUCcsICgpID0+IHtcbiAgbGV0IHNlcnZlciA9IG51bGw7XG4gIGJlZm9yZShhc3luYyAoKSA9PiB7XG4gICAgaWYgKHNob3VsZFN0YXJ0U2VydmVyKSB7XG4gICAgICBzZXJ2ZXIgPSBhd2FpdCBzdGFydFNlcnZlcihURVNUX1BPUlQsIFRFU1RfSE9TVCk7XG4gICAgfVxuICB9KTtcbiAgYWZ0ZXIoYXN5bmMgKCkgPT4ge1xuICAgIGlmIChzZXJ2ZXIpIHtcbiAgICAgIGF3YWl0IEIucHJvbWlzaWZ5KHNlcnZlci5jbG9zZS5iaW5kKHNlcnZlcikpKCk7XG4gICAgfVxuICB9KTtcblxuICBkZXNjcmliZSgnc2Vzc2lvbiBoYW5kbGluZycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHN0YXJ0IGFuZCBzdG9wIGEgc2Vzc2lvbicsIGFzeW5jICgpID0+IHtcbiAgICAgIGxldCBkcml2ZXIgPSB3ZC5wcm9taXNlQ2hhaW5SZW1vdGUoVEVTVF9IT1NULCBURVNUX1BPUlQpO1xuICAgICAgbGV0IFtzZXNzaW9uSWRdID0gYXdhaXQgZHJpdmVyLmluaXQoREVGQVVMVF9DQVBTKTtcbiAgICAgIHNob3VsZC5leGlzdChzZXNzaW9uSWQpO1xuICAgICAgc2Vzc2lvbklkLnNob3VsZC5iZS5hKCdzdHJpbmcnKTtcbiAgICAgIGF3YWl0IGRyaXZlci5xdWl0KCk7XG4gICAgICBhd2FpdCBkcml2ZXIudGl0bGUoKS5zaG91bGQuZXZlbnR1YWxseS5iZS5yZWplY3RlZFdpdGgoL3Rlcm1pbmF0ZWQvKTtcbiAgICB9KTtcblxuICB9KTtcblxuICBkZXNjcmliZSgnc2Vzc2lvbi1iYXNlZCB0ZXN0cycsICgpID0+IHtcbiAgICBjb250ZXh0VGVzdHMoKTtcbiAgICBmaW5kRWxlbWVudFRlc3RzKCk7XG4gICAgZWxlbWVudEludGVyYWN0aW9uVGVzdHMoKTtcbiAgICBhbGVydFRlc3RzKCk7XG4gICAgZ2VuZXJhbFRlc3RzKCk7XG4gIH0pO1xuXG59KTtcbiJdfQ==