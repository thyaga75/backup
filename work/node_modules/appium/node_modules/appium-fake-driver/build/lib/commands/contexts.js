'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _mobileJsonWireProtocol = require('mobile-json-wire-protocol');

var commands = {},
    helpers = {},
    extensions = {};

helpers.getRawContexts = function () {
  var contexts = { 'NATIVE_APP': null };
  var wvs = this.appModel.getWebviews();
  for (var i = 1; i < wvs.length + 1; i++) {
    contexts['WEBVIEW_' + i] = wvs[i - 1];
  }
  return contexts;
};

helpers.assertWebviewContext = function () {
  if (this.curContext === 'NATIVE_APP') {
    throw new _mobileJsonWireProtocol.errors.InvalidContextError();
  }
};

commands.getCurrentContext = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        return context$1$0.abrupt('return', this.curContext);

      case 1:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.getContexts = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        return context$1$0.abrupt('return', _lodash2['default'].keys(this.getRawContexts()));

      case 1:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.setContext = function callee$0$0(context) {
  var contexts;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        contexts = this.getRawContexts();

        if (!_lodash2['default'].contains(_lodash2['default'].keys(contexts), context)) {
          context$1$0.next = 6;
          break;
        }

        this.curContext = context;
        if (context === 'NATIVE_APP') {
          this.appModel.deactivateWebview();
        } else {
          this.appModel.activateWebview(contexts[context]);
        }
        context$1$0.next = 7;
        break;

      case 6:
        throw new _mobileJsonWireProtocol.errors.NoSuchContextError();

      case 7:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.setFrame = function callee$0$0(frameId) {
  var nodes;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        this.assertWebviewContext();

        if (!(frameId === null)) {
          context$1$0.next = 5;
          break;
        }

        this.appModel.deactivateFrame();
        context$1$0.next = 9;
        break;

      case 5:
        nodes = this.appModel.xpathQuery('//iframe[@id="' + frameId + '"]');

        if (nodes.length) {
          context$1$0.next = 8;
          break;
        }

        throw new _mobileJsonWireProtocol.errors.NoSuchFrameError();

      case 8:
        this.appModel.activateFrame(nodes[0]);

      case 9:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

_Object$assign(extensions, commands, helpers);
exports.commands = commands;
exports.helpers = helpers;
exports['default'] = extensions;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9jb250ZXh0cy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7c0JBQWMsUUFBUTs7OztzQ0FDQywyQkFBMkI7O0FBRWxELElBQUksUUFBUSxHQUFHLEVBQUU7SUFBRSxPQUFPLEdBQUcsRUFBRTtJQUFFLFVBQVUsR0FBRyxFQUFFLENBQUM7O0FBRWpELE9BQU8sQ0FBQyxjQUFjLEdBQUcsWUFBWTtBQUNuQyxNQUFJLFFBQVEsR0FBRyxFQUFDLFlBQVksRUFBRSxJQUFJLEVBQUMsQ0FBQztBQUNwQyxNQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ3RDLE9BQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUN2QyxZQUFRLGNBQVksQ0FBQyxDQUFHLEdBQUcsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztHQUN2QztBQUNELFNBQU8sUUFBUSxDQUFDO0NBQ2pCLENBQUM7O0FBRUYsT0FBTyxDQUFDLG9CQUFvQixHQUFHLFlBQVk7QUFDekMsTUFBSSxJQUFJLENBQUMsVUFBVSxLQUFLLFlBQVksRUFBRTtBQUNwQyxVQUFNLElBQUksK0JBQU8sbUJBQW1CLEVBQUUsQ0FBQztHQUN4QztDQUNGLENBQUM7O0FBRUYsUUFBUSxDQUFDLGlCQUFpQixHQUFHOzs7OzRDQUNwQixJQUFJLENBQUMsVUFBVTs7Ozs7OztDQUN2QixDQUFDOztBQUVGLFFBQVEsQ0FBQyxXQUFXLEdBQUc7Ozs7NENBQ2Qsb0JBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQzs7Ozs7OztDQUNyQyxDQUFDOztBQUVGLFFBQVEsQ0FBQyxVQUFVLEdBQUcsb0JBQWdCLE9BQU87TUFDdkMsUUFBUTs7OztBQUFSLGdCQUFRLEdBQUcsSUFBSSxDQUFDLGNBQWMsRUFBRTs7YUFDaEMsb0JBQUUsUUFBUSxDQUFDLG9CQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxPQUFPLENBQUM7Ozs7O0FBQ3ZDLFlBQUksQ0FBQyxVQUFVLEdBQUcsT0FBTyxDQUFDO0FBQzFCLFlBQUksT0FBTyxLQUFLLFlBQVksRUFBRTtBQUM1QixjQUFJLENBQUMsUUFBUSxDQUFDLGlCQUFpQixFQUFFLENBQUM7U0FDbkMsTUFBTTtBQUNMLGNBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1NBQ2xEOzs7OztjQUVLLElBQUksK0JBQU8sa0JBQWtCLEVBQUU7Ozs7Ozs7Q0FFeEMsQ0FBQzs7QUFFRixRQUFRLENBQUMsUUFBUSxHQUFHLG9CQUFnQixPQUFPO01BS25DLEtBQUs7Ozs7QUFKWCxZQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQzs7Y0FDeEIsT0FBTyxLQUFLLElBQUksQ0FBQTs7Ozs7QUFDbEIsWUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLEVBQUUsQ0FBQzs7Ozs7QUFFNUIsYUFBSyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxvQkFBa0IsT0FBTyxRQUFLOztZQUM3RCxLQUFLLENBQUMsTUFBTTs7Ozs7Y0FDVCxJQUFJLCtCQUFPLGdCQUFnQixFQUFFOzs7QUFFckMsWUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Ozs7Ozs7Q0FFekMsQ0FBQzs7QUFFRixlQUFjLFVBQVUsRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDcEMsUUFBUSxHQUFSLFFBQVE7UUFBRSxPQUFPLEdBQVAsT0FBTztxQkFDWCxVQUFVIiwiZmlsZSI6ImxpYi9jb21tYW5kcy9jb250ZXh0cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBlcnJvcnMgfSBmcm9tICdtb2JpbGUtanNvbi13aXJlLXByb3RvY29sJztcblxubGV0IGNvbW1hbmRzID0ge30sIGhlbHBlcnMgPSB7fSwgZXh0ZW5zaW9ucyA9IHt9O1xuXG5oZWxwZXJzLmdldFJhd0NvbnRleHRzID0gZnVuY3Rpb24gKCkge1xuICBsZXQgY29udGV4dHMgPSB7J05BVElWRV9BUFAnOiBudWxsfTtcbiAgbGV0IHd2cyA9IHRoaXMuYXBwTW9kZWwuZ2V0V2Vidmlld3MoKTtcbiAgZm9yIChsZXQgaSA9IDE7IGkgPCB3dnMubGVuZ3RoICsgMTsgaSsrKSB7XG4gICAgY29udGV4dHNbYFdFQlZJRVdfJHtpfWBdID0gd3ZzW2kgLSAxXTtcbiAgfVxuICByZXR1cm4gY29udGV4dHM7XG59O1xuXG5oZWxwZXJzLmFzc2VydFdlYnZpZXdDb250ZXh0ID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5jdXJDb250ZXh0ID09PSAnTkFUSVZFX0FQUCcpIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRDb250ZXh0RXJyb3IoKTtcbiAgfVxufTtcblxuY29tbWFuZHMuZ2V0Q3VycmVudENvbnRleHQgPSBhc3luYyBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLmN1ckNvbnRleHQ7XG59O1xuXG5jb21tYW5kcy5nZXRDb250ZXh0cyA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIF8ua2V5cyh0aGlzLmdldFJhd0NvbnRleHRzKCkpO1xufTtcblxuY29tbWFuZHMuc2V0Q29udGV4dCA9IGFzeW5jIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gIGxldCBjb250ZXh0cyA9IHRoaXMuZ2V0UmF3Q29udGV4dHMoKTtcbiAgaWYgKF8uY29udGFpbnMoXy5rZXlzKGNvbnRleHRzKSwgY29udGV4dCkpIHtcbiAgICB0aGlzLmN1ckNvbnRleHQgPSBjb250ZXh0O1xuICAgIGlmIChjb250ZXh0ID09PSAnTkFUSVZFX0FQUCcpIHtcbiAgICAgIHRoaXMuYXBwTW9kZWwuZGVhY3RpdmF0ZVdlYnZpZXcoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hcHBNb2RlbC5hY3RpdmF0ZVdlYnZpZXcoY29udGV4dHNbY29udGV4dF0pO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLk5vU3VjaENvbnRleHRFcnJvcigpO1xuICB9XG59O1xuXG5jb21tYW5kcy5zZXRGcmFtZSA9IGFzeW5jIGZ1bmN0aW9uIChmcmFtZUlkKSB7XG4gIHRoaXMuYXNzZXJ0V2Vidmlld0NvbnRleHQoKTtcbiAgaWYgKGZyYW1lSWQgPT09IG51bGwpIHtcbiAgICB0aGlzLmFwcE1vZGVsLmRlYWN0aXZhdGVGcmFtZSgpO1xuICB9IGVsc2Uge1xuICAgIGxldCBub2RlcyA9IHRoaXMuYXBwTW9kZWwueHBhdGhRdWVyeShgLy9pZnJhbWVbQGlkPVwiJHtmcmFtZUlkfVwiXWApO1xuICAgIGlmICghbm9kZXMubGVuZ3RoKSB7XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLk5vU3VjaEZyYW1lRXJyb3IoKTtcbiAgICB9XG4gICAgdGhpcy5hcHBNb2RlbC5hY3RpdmF0ZUZyYW1lKG5vZGVzWzBdKTtcbiAgfVxufTtcblxuT2JqZWN0LmFzc2lnbihleHRlbnNpb25zLCBjb21tYW5kcywgaGVscGVycyk7XG5leHBvcnQgeyBjb21tYW5kcywgaGVscGVycyB9O1xuZXhwb3J0IGRlZmF1bHQgZXh0ZW5zaW9ucztcbiJdfQ==