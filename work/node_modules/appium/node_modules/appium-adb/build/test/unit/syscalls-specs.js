'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

var _this = this;

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _ = require('../..');

var _2 = _interopRequireDefault(_);

var _teen_process = require('teen_process');

var teen_process = _interopRequireWildcard(_teen_process);

var _appiumTestSupport = require('appium-test-support');

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

_chai2['default'].use(_chaiAsPromised2['default']);
var adb = new _2['default']();
adb.executable.path = 'adb_path';

describe('System calls', (0, _appiumTestSupport.withMocks)({ teen_process: teen_process }, function (mocks) {
  it('getConnectedDevices should get all connected devices', function callee$1$0() {
    var devices;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          mocks.teen_process.expects("exec").once().withExactArgs(adb.executable.path, ['devices']).returns({ stdout: "List of devices attached \n emulator-5554	device" });
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(adb.getConnectedDevices());

        case 3:
          devices = context$2$0.sent;

          devices.should.have.length.above(0);
          mocks.teen_process.verify();

        case 6:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('getConnectedDevices should fail when adb devices returns unexpected output', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          mocks.teen_process.expects("exec").once().withExactArgs(adb.executable.path, ['devices']).returns({ stdout: "foobar" });
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(adb.getConnectedDevices().should.eventually.be.rejectedWith("Unexpected output while trying to get devices"));

        case 3:
          mocks.teen_process.verify();

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('getDevicesWithRetry should fail when there are no connected devices', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          mocks.teen_process.expects("exec").atLeast(2).withExactArgs(adb.executable.path, ['devices']).returns({ stdout: "List of devices attached" });
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(adb.getDevicesWithRetry(1000).should.eventually.be.rejectedWith("Could not find a connected Android device."));

        case 3:
          mocks.teen_process.verify();

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('getDevicesWithRetry should fail when adb devices returns unexpected output', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          mocks.teen_process.expects("exec").atLeast(2).withExactArgs(adb.executable.path, ['devices']).returns({ stdout: "foobar" });
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(adb.getDevicesWithRetry(1000).should.eventually.be.rejectedWith("Could not find a connected Android device."));

        case 3:
          mocks.teen_process.verify();

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('getDevicesWithRetry should get all connected devices', function callee$1$0() {
    var devices;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          mocks.teen_process.expects("exec").once().withExactArgs(adb.executable.path, ['devices']).returns({ stdout: "List of devices attached \n emulator-5554	device" });
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(adb.getDevicesWithRetry(1000));

        case 3:
          devices = context$2$0.sent;

          devices.should.have.length.above(0);
          mocks.teen_process.verify();

        case 6:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('getDevicesWithRetry should get all connected devices second time', function callee$1$0() {
    var devices;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          mocks.teen_process.expects("exec").onCall(0).returns({ stdout: "Foobar" });
          mocks.teen_process.expects("exec").withExactArgs(adb.executable.path, ['devices']).returns({ stdout: "List of devices attached \n emulator-5554	device" });
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(adb.getDevicesWithRetry(2000));

        case 4:
          devices = context$2$0.sent;

          devices.should.have.length.above(0);
          mocks.teen_process.verify();

        case 7:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('getDevicesWithRetry should fail when exec throws an error', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          mocks.teen_process.expects("exec").atLeast(2).throws("Error foobar");
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(adb.getDevicesWithRetry(1000).should.eventually.be.rejectedWith("Could not find a connected Android device."));

        case 3:
          mocks.teen_process.verify();

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('setDeviceId should set the device id', function () {
    adb.setDeviceId('foobar');
    adb.curDeviceId.should.equal('foobar');
    adb.executable.defaultArgs.should.include('foobar');
  });
  it('setDevice should set the device id and emu port from obj', function () {
    adb.setDevice({ udid: 'emulator-1234' });
    adb.curDeviceId.should.equal('emulator-1234');
    adb.executable.defaultArgs.should.include('emulator-1234');
    adb.emulatorPort.should.equal(1234);
  });
  it('setEmulatorPort should change emulator port', function () {
    adb.setEmulatorPort(5554);
    adb.emulatorPort.should.equal(5554);
  });
  describe('createSubProcess', function () {
    it('should return an instance of SubProcess', function () {
      adb.createSubProcess([]).should.be.an['instanceof'](teen_process.SubProcess);
    });
  });
}));

describe('System calls', (0, _appiumTestSupport.withMocks)({ adb: adb, B: _bluebird2['default'] }, function (mocks) {
  it('fileExists should return true for if ls returns', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          mocks.adb.expects("ls").once().withExactArgs('foo').returns(['bar']);
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(adb.fileExists("foo").should.eventually.equal(true));

        case 3:
          mocks.adb.verify();

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('ls should return list', function callee$1$0() {
    var list;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          mocks.adb.expects("shell").once().withExactArgs(['ls', 'foo']).returns('bar');
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(adb.ls("foo"));

        case 3:
          list = context$2$0.sent;

          list.should.deep.equal(['bar']);
          mocks.adb.verify();

        case 6:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('reboot should call stop and start using shell', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          mocks.adb.expects("shell").once().withExactArgs(['stop']);
          mocks.adb.expects("setDeviceProperty").once().withExactArgs('sys.boot_completed', 0);
          mocks.adb.expects("shell").once().withExactArgs(['start']);
          mocks.adb.expects("getDeviceProperty").once().withExactArgs('sys.boot_completed').returns('1');
          mocks.B.expects("delay").once().withExactArgs(2000);
          context$2$0.next = 7;
          return _regeneratorRuntime.awrap(adb.reboot().should.eventually.not.be.rejected);

        case 7:
          mocks.adb.verify();
          mocks.B.verify();

        case 9:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
}));
//# sourceMappingURL=data:application/json;base64,