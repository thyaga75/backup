// transpile :mocha

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _2 = require('../..');

var _appiumAdb = require('appium-adb');

var _appiumAdb2 = _interopRequireDefault(_appiumAdb);

var _appiumTestSupport = require('appium-test-support');

var _events = require('events');

var _events2 = _interopRequireDefault(_events);

var _appiumUiautomator = require('appium-uiautomator');

var _appiumUiautomator2 = _interopRequireDefault(_appiumUiautomator);

var _net = require('net');

var _net2 = _interopRequireDefault(_net);

var _mobileJsonWireProtocol = require('mobile-json-wire-protocol');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('AndroidBootstrap', function callee$0$0() {
  var systemPort, adb, androidBootstrap, uiAutomator;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        systemPort = 4724;
        adb = new _appiumAdb2['default']();
        androidBootstrap = new _2.AndroidBootstrap(adb, systemPort);
        uiAutomator = new _appiumUiautomator2['default'](adb);

        describe("start", (0, _appiumTestSupport.withSandbox)({ mocks: { adb: adb, uiAutomator: uiAutomator, net: _net2['default'], androidBootstrap: androidBootstrap } }, function (S) {
          it("should return a subProcess", function callee$2$0() {
            var conn, appPackage, disableAndroidWatchers;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  conn = new _events2['default'].EventEmitter();
                  appPackage = 'com.example.android.apis', disableAndroidWatchers = false;

                  androidBootstrap.uiAutomator = uiAutomator;
                  S.mocks.androidBootstrap.expects('init').once().returns('');
                  S.mocks.adb.expects('forwardPort').once().withExactArgs(systemPort, systemPort).returns('');
                  S.mocks.uiAutomator.expects("start").once().returns(conn);
                  S.mocks.net.expects('connect').once().returns(conn);
                  setTimeout(function () {
                    conn.emit("connect");
                  }, 1);
                  context$3$0.next = 10;
                  return _regeneratorRuntime.awrap(androidBootstrap.start(appPackage, disableAndroidWatchers));

                case 10:
                  S.verify();

                case 11:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, this);
          });
        }));
        describe("sendCommand", function () {
          it("should successfully return after receiving data from bootstrap in parts", function callee$2$0() {
            var conn;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  conn = new _events2['default'].EventEmitter();

                  conn.write = _lodash2['default'].noop;
                  conn.setEncoding = _lodash2['default'].noop;
                  androidBootstrap.socketClient = conn;
                  setTimeout(function () {
                    conn.emit("data", '{"status":0, ');
                    conn.emit("data", '"value": "hello"}');
                  }, 1);
                  context$3$0.next = 7;
                  return _regeneratorRuntime.awrap(androidBootstrap.sendCommand(_2.COMMAND_TYPES.ACTION, { action: 'getDataDir' }, 1000));

                case 7:
                  context$3$0.sent.should.equal("hello");

                case 8:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, this);
          });
          it("should successfully return after receiving data from bootstrap", function callee$2$0() {
            var conn;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  conn = new _events2['default'].EventEmitter();

                  conn.write = _lodash2['default'].noop;
                  conn.setEncoding = _lodash2['default'].noop;
                  androidBootstrap.socketClient = conn;
                  setTimeout(function () {
                    conn.emit("data", '{"status":0, "value": "hello"}');
                  }, 0);
                  context$3$0.next = 7;
                  return _regeneratorRuntime.awrap(androidBootstrap.sendCommand(_2.COMMAND_TYPES.ACTION, { action: 'getDataDir' }, 1000));

                case 7:
                  context$3$0.sent.should.equal("hello");

                case 8:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, this);
          });
          it("should throw correct error if status is not zero", function callee$2$0() {
            var conn;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  conn = new _events2['default'].EventEmitter();

                  conn.write = _lodash2['default'].noop;
                  conn.setEncoding = _lodash2['default'].noop;
                  androidBootstrap.socketClient = conn;
                  setTimeout(function () {
                    conn.emit("data", '{"status":7, "value": "not found"}');
                  }, 0);
                  context$3$0.next = 7;
                  return _regeneratorRuntime.awrap(androidBootstrap.sendCommand(_2.COMMAND_TYPES.ACTION, { action: 'getDataDir' }, 1000).should.eventually.be.rejectedWith(_mobileJsonWireProtocol.errors.NoSuchElementError));

                case 7:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, this);
          });
        });
        describe("sendAction", (0, _appiumTestSupport.withSandbox)({ mocks: { androidBootstrap: androidBootstrap } }, function (S) {
          it("should call sendCommand", function callee$2$0() {
            var extra;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  extra = { action: 'wake', params: {} };

                  S.mocks.androidBootstrap.expects('sendCommand').once().withExactArgs('action', extra).returns('');
                  context$3$0.next = 4;
                  return _regeneratorRuntime.awrap(androidBootstrap.sendAction('wake'));

                case 4:
                  S.verify();

                case 5:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, this);
          });
        }));
        describe("shutdown", (0, _appiumTestSupport.withSandbox)({ mocks: { androidBootstrap: androidBootstrap, uiAutomator: uiAutomator } }, function (S) {
          it("should call sendCommand", function callee$2$0() {
            var conn;
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  conn = new _events2['default'].EventEmitter();

                  androidBootstrap.socketClient = conn;
                  S.mocks.androidBootstrap.expects('sendCommand').once().withExactArgs('shutdown').returns('');
                  S.mocks.uiAutomator.expects("shutdown").once().returns("");
                  context$3$0.next = 6;
                  return _regeneratorRuntime.awrap(androidBootstrap.shutdown());

                case 6:
                  S.verify();

                case 7:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, this);
          });
        }));

      case 8:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
});
//# sourceMappingURL=data:application/json;base64,