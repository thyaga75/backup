/* global it:true, describe:true*/
require('source-map-support').install();

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _libSimctlJs = require('../lib/simctl.js');

var should = _chai2['default'].should();

describe('simctl', function () {
  var randName = undefined;
  var randDeviceUdid = null;
  var validSdks = [];

  before(function callee$1$0() {
    var devices, i, randNum, nameFound, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, list;

    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _libSimctlJs.getDevices)());

        case 2:
          devices = context$2$0.sent;

          validSdks = _lodash2['default'].keys(devices);

          if (validSdks.length) {
            context$2$0.next = 6;
            break;
          }

          throw new Error('No valid SDKs');

        case 6:
          i = 0;

        case 7:
          if (!(i < 5)) {
            context$2$0.next = 43;
            break;
          }

          randNum = parseInt(Math.random() * 100, 10);

          randName = 'device' + randNum;

          nameFound = false;
          _iteratorNormalCompletion = true;
          _didIteratorError = false;
          _iteratorError = undefined;
          context$2$0.prev = 14;
          _iterator = _getIterator(_lodash2['default'].values(devices));

        case 16:
          if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
            context$2$0.next = 24;
            break;
          }

          list = _step.value;

          if (!_lodash2['default'].includes(_lodash2['default'].map(list, 'name'), randName)) {
            context$2$0.next = 21;
            break;
          }

          // need to find another random name
          nameFound = true;
          return context$2$0.abrupt('break', 24);

        case 21:
          _iteratorNormalCompletion = true;
          context$2$0.next = 16;
          break;

        case 24:
          context$2$0.next = 30;
          break;

        case 26:
          context$2$0.prev = 26;
          context$2$0.t0 = context$2$0['catch'](14);
          _didIteratorError = true;
          _iteratorError = context$2$0.t0;

        case 30:
          context$2$0.prev = 30;
          context$2$0.prev = 31;

          if (!_iteratorNormalCompletion && _iterator['return']) {
            _iterator['return']();
          }

        case 33:
          context$2$0.prev = 33;

          if (!_didIteratorError) {
            context$2$0.next = 36;
            break;
          }

          throw _iteratorError;

        case 36:
          return context$2$0.finish(33);

        case 37:
          return context$2$0.finish(30);

        case 38:
          if (nameFound) {
            context$2$0.next = 40;
            break;
          }

          return context$2$0.abrupt('break', 43);

        case 40:
          i++;
          context$2$0.next = 7;
          break;

        case 43:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this, [[14, 26, 30, 38], [31,, 33, 37]]);
  });

  it('should create a device', function callee$1$0() {
    var udid;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _libSimctlJs.createDevice)(randName, 'iPhone 5s', _lodash2['default'].last(validSdks)));

        case 2:
          udid = context$2$0.sent;

          (typeof udid).should.equal('string');
          udid.length.should.equal(36);

        case 5:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should get devices', function callee$1$0() {
    var sdkDevices;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _libSimctlJs.getDevices)(_lodash2['default'].last(validSdks)));

        case 2:
          sdkDevices = context$2$0.sent;

          _lodash2['default'].map(sdkDevices, 'name').should.include(randName);
          randDeviceUdid = sdkDevices.filter(function (d) {
            return d.name === randName;
          })[0].udid;

        case 5:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should erase devices', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _libSimctlJs.eraseDevice)(randDeviceUdid));

        case 2:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should delete devices', function callee$1$0() {
    var sdkDevices;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _libSimctlJs.deleteDevice)(randDeviceUdid));

        case 2:
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap((0, _libSimctlJs.getDevices)(_lodash2['default'].last(validSdks)));

        case 4:
          sdkDevices = context$2$0.sent;

          _lodash2['default'].map(sdkDevices, 'name').should.not.include(randName);

        case 6:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should return a nice error for invalid usage', function callee$1$0() {
    var err;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          err = null;
          context$2$0.prev = 1;
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap((0, _libSimctlJs.createDevice)('foo', 'bar', 'baz'));

        case 4:
          context$2$0.next = 9;
          break;

        case 6:
          context$2$0.prev = 6;
          context$2$0.t0 = context$2$0['catch'](1);

          err = context$2$0.t0;

        case 9:
          should.exist(err);
          err.message.should.include('Invalid device type: bar');

        case 11:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this, [[1, 6]]);
  });

  it('should create a device and be able to see it in devices list right away', function callee$1$0() {
    var sdk, numSimsBefore, udid, numSimsAfter;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          sdk = _lodash2['default'].last(validSdks);
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap((0, _libSimctlJs.getDevices)());

        case 3:
          context$2$0.t0 = sdk;
          numSimsBefore = context$2$0.sent[context$2$0.t0].length;
          context$2$0.next = 7;
          return _regeneratorRuntime.awrap((0, _libSimctlJs.createDevice)('node-simctl test', 'iPhone 5s', sdk));

        case 7:
          udid = context$2$0.sent;
          context$2$0.next = 10;
          return _regeneratorRuntime.awrap((0, _libSimctlJs.getDevices)());

        case 10:
          context$2$0.t1 = sdk;
          numSimsAfter = context$2$0.sent[context$2$0.t1].length;

          numSimsAfter.should.equal(numSimsBefore + 1);
          (0, _libSimctlJs.deleteDevice)(udid);

        case 14:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
});

// need to find a random name that does not already exist
// give it 5 tries
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3Qvc2ltY3RsLXNwZWNzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7b0JBR2lCLE1BQU07Ozs7c0JBQ1QsUUFBUTs7OzsyQkFDOEMsa0JBQWtCOztBQUd0RixJQUFNLE1BQU0sR0FBRyxrQkFBSyxNQUFNLEVBQUUsQ0FBQzs7QUFFN0IsUUFBUSxDQUFDLFFBQVEsRUFBRSxZQUFNO0FBQ3ZCLE1BQUksUUFBUSxZQUFBLENBQUM7QUFDYixNQUFJLGNBQWMsR0FBRyxJQUFJLENBQUM7QUFDMUIsTUFBSSxTQUFTLEdBQUcsRUFBRSxDQUFDOztBQUVuQixRQUFNLENBQUM7UUFDRCxPQUFPLEVBUUYsQ0FBQyxFQUNKLE9BQU8sRUFHUCxTQUFTLGtGQUNKLElBQUk7Ozs7OzsyQ0FiSyw4QkFBWTs7O0FBQTVCLGlCQUFPOztBQUNYLG1CQUFTLEdBQUcsb0JBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDOztjQUN2QixTQUFTLENBQUMsTUFBTTs7Ozs7Z0JBQ2IsSUFBSSxLQUFLLENBQUMsZUFBZSxDQUFDOzs7QUFLekIsV0FBQyxHQUFHLENBQUM7OztnQkFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFBOzs7OztBQUNmLGlCQUFPLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxHQUFHLEVBQUUsRUFBRSxDQUFDOztBQUMvQyxrQkFBUSxjQUFZLE9BQU8sQUFBRSxDQUFDOztBQUUxQixtQkFBUyxHQUFHLEtBQUs7Ozs7O21DQUNKLG9CQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUM7Ozs7Ozs7O0FBQXpCLGNBQUk7O2VBQ1Asb0JBQUUsUUFBUSxDQUFDLG9CQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLEVBQUUsUUFBUSxDQUFDOzs7Ozs7QUFFM0MsbUJBQVMsR0FBRyxJQUFJLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Y0FJaEIsU0FBUzs7Ozs7Ozs7QUFaTyxXQUFDLEVBQUU7Ozs7Ozs7OztHQWMzQixDQUFDLENBQUM7O0FBRUgsSUFBRSxDQUFDLHdCQUF3QixFQUFFO1FBQ3ZCLElBQUk7Ozs7OzJDQUFTLCtCQUFhLFFBQVEsRUFBRSxXQUFXLEVBQUUsb0JBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDOzs7QUFBbkUsY0FBSTs7QUFDUixXQUFDLE9BQU8sSUFBSSxDQUFBLENBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUNyQyxjQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7Ozs7Ozs7R0FDOUIsQ0FBQyxDQUFDOztBQUVILElBQUUsQ0FBQyxvQkFBb0IsRUFBRTtRQUNuQixVQUFVOzs7OzsyQ0FBUyw2QkFBVyxvQkFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7OztBQUFoRCxvQkFBVTs7QUFDZCw4QkFBRSxHQUFHLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDbkQsd0JBQWMsR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLFVBQUMsQ0FBQzttQkFBSyxDQUFDLENBQUMsSUFBSSxLQUFLLFFBQVE7V0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDOzs7Ozs7O0dBQ3hFLENBQUMsQ0FBQzs7QUFFSCxJQUFFLENBQUMsc0JBQXNCLEVBQUU7Ozs7OzJDQUNuQiw4QkFBWSxjQUFjLENBQUM7Ozs7Ozs7R0FDbEMsQ0FBQyxDQUFDOztBQUVILElBQUUsQ0FBQyx1QkFBdUIsRUFBRTtRQUV0QixVQUFVOzs7OzsyQ0FEUiwrQkFBYSxjQUFjLENBQUM7Ozs7MkNBQ1gsNkJBQVcsb0JBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDOzs7QUFBaEQsb0JBQVU7O0FBQ2QsOEJBQUUsR0FBRyxDQUFDLFVBQVUsRUFBRSxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQzs7Ozs7OztHQUN4RCxDQUFDLENBQUM7O0FBRUgsSUFBRSxDQUFDLDhDQUE4QyxFQUFFO1FBQzdDLEdBQUc7Ozs7QUFBSCxhQUFHLEdBQUcsSUFBSTs7OzJDQUVOLCtCQUFhLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDOzs7Ozs7Ozs7O0FBRXZDLGFBQUcsaUJBQUksQ0FBQzs7O0FBRVYsZ0JBQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDbEIsYUFBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLDBCQUEwQixDQUFDLENBQUM7Ozs7Ozs7R0FDeEQsQ0FBQyxDQUFDOztBQUVILElBQUUsQ0FBQyx5RUFBeUUsRUFBRTtRQUN4RSxHQUFHLEVBQ0gsYUFBYSxFQUNiLElBQUksRUFDSixZQUFZOzs7O0FBSFosYUFBRyxHQUFHLG9CQUFFLElBQUksQ0FBQyxTQUFTLENBQUM7OzJDQUNBLDhCQUFZOzs7MkJBQUUsR0FBRztBQUF4Qyx1QkFBYSxvQ0FBNkIsTUFBTTs7MkNBQ25DLCtCQUFhLGtCQUFrQixFQUFFLFdBQVcsRUFBRSxHQUFHLENBQUM7OztBQUEvRCxjQUFJOzsyQ0FDa0IsOEJBQVk7OzsyQkFBRSxHQUFHO0FBQXZDLHNCQUFZLG9DQUE2QixNQUFNOztBQUNuRCxzQkFBWSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsYUFBYSxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQzdDLHlDQUFhLElBQUksQ0FBQyxDQUFDOzs7Ozs7O0dBQ3BCLENBQUMsQ0FBQztDQUVKLENBQUMsQ0FBQyIsImZpbGUiOiJ0ZXN0L3NpbWN0bC1zcGVjcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGdsb2JhbCBpdDp0cnVlLCBkZXNjcmliZTp0cnVlKi9cbi8vIHRyYW5zcGlsZTptb2NoYVxuXG5pbXBvcnQgY2hhaSBmcm9tICdjaGFpJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBjcmVhdGVEZXZpY2UsIGRlbGV0ZURldmljZSwgZXJhc2VEZXZpY2UsIGdldERldmljZXMgfSBmcm9tICcuLi9saWIvc2ltY3RsLmpzJztcblxuXG5jb25zdCBzaG91bGQgPSBjaGFpLnNob3VsZCgpO1xuXG5kZXNjcmliZSgnc2ltY3RsJywgKCkgPT4ge1xuICBsZXQgcmFuZE5hbWU7XG4gIGxldCByYW5kRGV2aWNlVWRpZCA9IG51bGw7XG4gIGxldCB2YWxpZFNka3MgPSBbXTtcblxuICBiZWZvcmUoYXN5bmMgKCkgPT4ge1xuICAgIGxldCBkZXZpY2VzID0gYXdhaXQgZ2V0RGV2aWNlcygpO1xuICAgIHZhbGlkU2RrcyA9IF8ua2V5cyhkZXZpY2VzKTtcbiAgICBpZiAoIXZhbGlkU2Rrcy5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm8gdmFsaWQgU0RLcycpO1xuICAgIH1cblxuICAgIC8vIG5lZWQgdG8gZmluZCBhIHJhbmRvbSBuYW1lIHRoYXQgZG9lcyBub3QgYWxyZWFkeSBleGlzdFxuICAgIC8vIGdpdmUgaXQgNSB0cmllc1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNTsgaSsrKSB7XG4gICAgICBsZXQgcmFuZE51bSA9IHBhcnNlSW50KE1hdGgucmFuZG9tKCkgKiAxMDAsIDEwKTtcbiAgICAgIHJhbmROYW1lID0gYGRldmljZSR7cmFuZE51bX1gO1xuXG4gICAgICBsZXQgbmFtZUZvdW5kID0gZmFsc2U7XG4gICAgICBmb3IgKGxldCBsaXN0IG9mIF8udmFsdWVzKGRldmljZXMpKSB7XG4gICAgICAgIGlmIChfLmluY2x1ZGVzKF8ubWFwKGxpc3QsICduYW1lJyksIHJhbmROYW1lKSkge1xuICAgICAgICAgIC8vIG5lZWQgdG8gZmluZCBhbm90aGVyIHJhbmRvbSBuYW1lXG4gICAgICAgICAgbmFtZUZvdW5kID0gdHJ1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFuYW1lRm91bmQpIGJyZWFrO1xuICAgIH1cbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBjcmVhdGUgYSBkZXZpY2UnLCBhc3luYyAoKSA9PiB7XG4gICAgbGV0IHVkaWQgPSBhd2FpdCBjcmVhdGVEZXZpY2UocmFuZE5hbWUsICdpUGhvbmUgNXMnLCBfLmxhc3QodmFsaWRTZGtzKSk7XG4gICAgKHR5cGVvZiB1ZGlkKS5zaG91bGQuZXF1YWwoJ3N0cmluZycpO1xuICAgIHVkaWQubGVuZ3RoLnNob3VsZC5lcXVhbCgzNik7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgZ2V0IGRldmljZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgbGV0IHNka0RldmljZXMgPSBhd2FpdCBnZXREZXZpY2VzKF8ubGFzdCh2YWxpZFNka3MpKTtcbiAgICBfLm1hcChzZGtEZXZpY2VzLCAnbmFtZScpLnNob3VsZC5pbmNsdWRlKHJhbmROYW1lKTtcbiAgICByYW5kRGV2aWNlVWRpZCA9IHNka0RldmljZXMuZmlsdGVyKChkKSA9PiBkLm5hbWUgPT09IHJhbmROYW1lKVswXS51ZGlkO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGVyYXNlIGRldmljZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgZXJhc2VEZXZpY2UocmFuZERldmljZVVkaWQpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGRlbGV0ZSBkZXZpY2VzJywgYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IGRlbGV0ZURldmljZShyYW5kRGV2aWNlVWRpZCk7XG4gICAgbGV0IHNka0RldmljZXMgPSBhd2FpdCBnZXREZXZpY2VzKF8ubGFzdCh2YWxpZFNka3MpKTtcbiAgICBfLm1hcChzZGtEZXZpY2VzLCAnbmFtZScpLnNob3VsZC5ub3QuaW5jbHVkZShyYW5kTmFtZSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcmV0dXJuIGEgbmljZSBlcnJvciBmb3IgaW52YWxpZCB1c2FnZScsIGFzeW5jICgpID0+IHtcbiAgICBsZXQgZXJyID0gbnVsbDtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgY3JlYXRlRGV2aWNlKCdmb28nLCAnYmFyJywgJ2JheicpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGVyciA9IGU7XG4gICAgfVxuICAgIHNob3VsZC5leGlzdChlcnIpO1xuICAgIGVyci5tZXNzYWdlLnNob3VsZC5pbmNsdWRlKCdJbnZhbGlkIGRldmljZSB0eXBlOiBiYXInKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBjcmVhdGUgYSBkZXZpY2UgYW5kIGJlIGFibGUgdG8gc2VlIGl0IGluIGRldmljZXMgbGlzdCByaWdodCBhd2F5JywgYXN5bmMgKCkgPT4ge1xuICAgIGxldCBzZGsgPSBfLmxhc3QodmFsaWRTZGtzKTtcbiAgICBsZXQgbnVtU2ltc0JlZm9yZSA9IChhd2FpdCBnZXREZXZpY2VzKCkpW3Nka10ubGVuZ3RoO1xuICAgIGxldCB1ZGlkID0gYXdhaXQgY3JlYXRlRGV2aWNlKCdub2RlLXNpbWN0bCB0ZXN0JywgJ2lQaG9uZSA1cycsIHNkayk7XG4gICAgbGV0IG51bVNpbXNBZnRlciA9IChhd2FpdCBnZXREZXZpY2VzKCkpW3Nka10ubGVuZ3RoO1xuICAgIG51bVNpbXNBZnRlci5zaG91bGQuZXF1YWwobnVtU2ltc0JlZm9yZSArIDEpO1xuICAgIGRlbGV0ZURldmljZSh1ZGlkKTtcbiAgfSk7XG5cbn0pO1xuIl19