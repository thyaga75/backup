{
  "_args": [
    [
      "appium-uiauto@https://registry.npmjs.org/appium-uiauto/-/appium-uiauto-2.3.1.tgz",
      "/Users/thyag/work/node_modules/appium"
    ]
  ],
  "_from": "appium-uiauto@>=2.3.1 <3.0.0",
  "_id": "appium-uiauto@2.3.1",
  "_inCache": true,
  "_location": "/appium/appium-uiauto",
  "_phantomChildren": {},
  "_requested": {
    "name": "appium-uiauto",
    "raw": "appium-uiauto@https://registry.npmjs.org/appium-uiauto/-/appium-uiauto-2.3.1.tgz",
    "rawSpec": "https://registry.npmjs.org/appium-uiauto/-/appium-uiauto-2.3.1.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/appium-uiauto/-/appium-uiauto-2.3.1.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/appium/appium-ios-driver"
  ],
  "_resolved": "https://registry.npmjs.org/appium-uiauto/-/appium-uiauto-2.3.1.tgz",
  "_shasum": "bde424b32db3f6a7dd4715d1e917353ae54856be",
  "_shrinkwrap": null,
  "_spec": "appium-uiauto@https://registry.npmjs.org/appium-uiauto/-/appium-uiauto-2.3.1.tgz",
  "_where": "/Users/thyag/work/node_modules/appium",
  "author": {
    "name": "appium"
  },
  "bin": {},
  "bugs": {
    "url": "https://github.com/appium/appium-uiauto/issues"
  },
  "dependencies": {
    "appium-instruments": "^3.6.0",
    "appium-logger": "^2.1.0",
    "appium-support": "^2.0.9",
    "babel-runtime": "=5.8.24",
    "bluebird": "^2.9.32",
    "lodash": "^4.3.0",
    "mobile-json-wire-protocol": "^1.2.0",
    "source-map-support": "^0.3.1",
    "teen_process": "^1.3.1",
    "through": "^2.3.8"
  },
  "description": "Appium iOS UI Automation driver",
  "devDependencies": {
    "appium-gulp-plugins": "^1.3.12",
    "appium-xcode": "^3.0.1",
    "chai": "^3.3.0",
    "chai-as-promised": "^5.1.0",
    "gulp": "^3.9.0",
    "npmlog": "^1.2.1",
    "sinon": "^1.17.1",
    "sinon-chai": "^2.8.0"
  },
  "directories": {
    "lib": "lib"
  },
  "engines": [
    "node"
  ],
  "homepage": "https://github.com/appium/appium-uiauto#readme",
  "keywords": [
    "appium",
    "ios"
  ],
  "license": "Apache-2.0",
  "main": "./build/index.js",
  "name": "appium-uiauto",
  "optionalDependencies": {},
  "readme": "## Appium-UIAuto\n\n[![NPM version](http://img.shields.io/npm/v/appium-uiauto.svg)](https://npmjs.org/package/appium-uiauto)\n[![Downloads](http://img.shields.io/npm/dm/appium-uiauto.svg)](https://npmjs.org/package/appium-uiauto)\n[![Dependency Status](https://david-dm.org/appium/appium-uiauto/2.0.svg)](https://david-dm.org/appium/appium-uiauto/2.0)\n[![devDependency Status](https://david-dm.org/appium/appium-uiauto/2.0/dev-status.svg)](https://david-dm.org/appium/appium-uiauto/2.0#info=devDependencies)\n\n[![Build Status](https://api.travis-ci.org/appium/appium-uiauto.png?branch=2.0)](https://travis-ci.org/appium/appium-uiauto)\n[![Coverage Status](https://coveralls.io/repos/appium/appium-uiauto/badge.svg?branch=2.0)](https://coveralls.io/r/appium/appium-uiauto?branch=2.0)\n\n\nAppium interface for the iOS [UI Automation](https://developer.apple.com/library/watchos/documentation/DeveloperTools/Conceptual/InstrumentsUserGuide/UIAutomation.html) framework. Provides access to the JavaScript [API](https://developer.apple.com/library/ios/documentation/DeveloperTools/Reference/UIAutomationRef/).\n\nConsists of a client, `UIAutoClient`, through which you interact with the iOS UI Automation framework, and a server which is embedded on the device, running the commands in the context of the running application.\n\nIn addition, there is a tool, `prepareBootstrap`, which builds a script which will be inserted onto the device. Any code that is necessary for running the commands can be added through that tool.\n\n\n### Usage\n\n#### `UIAutoClient`\n\nThe client is used to send JavaScript commands to the device. It needs to be instantiated with a socket location (which defaults to `/tmp/instruments_sock`), and started, after which commands can be sent using the `sendCommand` method:\n\n```js\nimport UIAutoClient from 'appium-uiauto';\n\n\nlet client = new UIAutoClient();\nclient.start();\n\n// send a command to get the source code for the view\nlet source = await this.uiAutoClient.sendCommand('au.mainApp().getTreeForXML()');\n```\n\nIn practice the instantiation of the `UIAutoClient` is usually coupled with launching instruments for automating the device. This is handled by awaiting the promises from both that start of `UIAutoClient` and the launch of [`Instruments`](https://github.com/appium/appium-instruments):\n\n```js\nimport UIAutoClient from 'appium-uiauto';\nimport { Instruments, utils } from 'appium-instruments';\n\nlet uiAutoClient = new UIAutoClient();\nlet instruments = await utils.quickInstruments();\n\nawait B.all([\n  uiAutoClient.start().then(() => { instruments.registerLaunch(); }),\n  instruments.launch()\n]);\n\nlet source = await this.uiAutoClient.sendCommand('au.mainApp().getTreeForXML()');\n```\n\n#### `prepareBootstrap`\n\nThe second important function is `prepareBootstrap`, which is used to create the script which will be injected into the device. This includes custom Appium UI Automation code to fix certain functionality, as well as any other code that necessary.\n\nBasic usage of `prepareBootstrap` creates a file with all of the Appium UI Automation code collated into one long script, which can then be put onto the device when launching Instruments:\n\n```js\nimport { prepareBootstrap } from 'appium-uiauto';\n\nlet bootstrapPath = await prepareBootstrap();\n```\n\nFurther, `prepareBootstrap` can take a hash with any of the following values:\n\n- `sock` - the location of the instruments socket (defaults to `/tmp/instruments_sock`)\n- `interKeyDelay` - the time, in `ms`, to pause between keystrokes when typing\n- `justLoopInfinitely` - tells the server not to stop looking for new commands\n- `autoAcceptAlerts` - automatically accept alerts as they arise\n- `autoDismissAlerts` - automatically accept alerts as they arise\n- `sendKeyStrategy` - the \"strategy\" for typing. This can be\n      - `oneByOne` - type as normal, one key at a time\n      - `grouped` - group together keys to be sent all at once\n      - `setValue` - bypass the keyboard and directly set the value on the element rather than actually typing\n\nThe last option that can be sent in is `imports.pre`, through which is sent an array of paths to any JavaScript files to be added to the generated script. This is the means by which custom libraries can be added to the environment:\n\n```js\nimport { prepareBootstrap } from 'appium-uiauto';\n\nlet bootstrapPath = await prepareBootstrap({\n  sock: '/path/to/my/instruments_socket',\n  interKeyDelay: 500,\n  justLoopInfinitely: false,\n  autoAcceptAlerts: true,\n  autoDismissAlerts: true,\n  sendKeyStrategy: 'oneByOne',\n  imports: {\n    pre: [\n      '/path/to/my/first/import',\n      '/path/to/my/second/import'\n    ]\n  }\n});\n```\n#### `utils`\n\nThe `utils` object has a single helper function, `rotateImage`, which takes the path to an image, and the degrees to rotate, and executes a custom AppleScript function to rotate the image appropriately. Used to handle screenshots in Appium.\n\n```js\nimport { utils } from 'appium-uiauto';\nimport { fs } from 'appium-support';\n\n// set up client as appropriate\n// ...\n\nlet shotFile = '/path/to/file/for/screenshot';\nawait uiAutoClient.sendCommand(`au.capture('${shotFile}')`);\n\n// rotate the image\nawait utils.rotateImage(shotPath, -90);\n\nlet screenshot = await fs.readFile(shotPath);\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/appium/appium-uiauto.git"
  },
  "scripts": {
    "prepublish": "gulp prepublish",
    "test": "gulp once",
    "watch": "gulp"
  },
  "version": "2.3.1"
}
