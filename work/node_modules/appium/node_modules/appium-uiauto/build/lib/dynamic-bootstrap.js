// Generate a bootstrap for the UIAuto Instruments script containing
// the environment variables we need.

'use strict';

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _crypto = require('crypto');

var _crypto2 = _interopRequireDefault(_crypto);

var _appiumSupport = require('appium-support');

var _buildScript = require('./build-script');

var _buildScript2 = _interopRequireDefault(_buildScript);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _uiautoClient = require('./uiauto-client');

var BOOTSTRAP_JS_PATH = _path2['default'].resolve(__dirname, '..', '..', 'uiauto', 'bootstrap.js');
var COMMAND_PROXY_CLIENT_PATH = _path2['default'].resolve(__dirname, '..', 'lib', 'bin', 'command-proxy-client.js');
if (!__dirname.match(/build\/lib$/)) {
  BOOTSTRAP_JS_PATH = _path2['default'].resolve(__dirname, '..', 'uiauto', 'bootstrap.js');
  COMMAND_PROXY_CLIENT_PATH = _path2['default'].resolve(__dirname, 'bin', 'command-proxy-client.js');
}

function getEnv() {
  var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  // build an object with the required properties for bootstrap
  return {
    nodePath: process.execPath,
    commandProxyClientPath: COMMAND_PROXY_CLIENT_PATH,
    instrumentsSock: opts.sock || _uiautoClient.DEFAULT_INSTRUMENTS_SOCKET,
    interKeyDelay: opts.interKeyDelay || null,
    justLoopInfinitely: opts.justLoopInfinitely,
    autoAcceptAlerts: opts.autoAcceptAlerts,
    autoDismissAlerts: opts.autoDismissAlerts,
    sendKeyStrategy: opts.sendKeyStrategy
  };
}

function buildCode(opts) {
  var env, bootstrapJs, imports, bootstrapCode, lines, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _step$value, key, value, quote;

  return _regeneratorRuntime.async(function buildCode$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!opts.code) {
          context$1$0.next = 2;
          break;
        }

        return context$1$0.abrupt('return', opts.code);

      case 2:
        env = getEnv(opts);

        _logger2['default'].debug('Dynamic env: ' + JSON.stringify(env));

        bootstrapJs = BOOTSTRAP_JS_PATH;
        imports = opts.imports && opts.imports.pre ? opts.imports.pre : [];
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap((0, _buildScript2['default'])(bootstrapJs, imports));

      case 8:
        bootstrapCode = context$1$0.sent;
        lines = [];

        lines.push('// This file is automatically generated. Do not manually modify!');
        lines.push('');
        lines.push(bootstrapCode);
        lines.push('');
        lines.push('bootstrap({');
        // add each defined variable to the environment
        _iteratorNormalCompletion = true;
        _didIteratorError = false;
        _iteratorError = undefined;
        context$1$0.prev = 18;
        for (_iterator = _getIterator(_lodash2['default'].toPairs(env)); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          _step$value = _slicedToArray(_step.value, 2);
          key = _step$value[0];
          value = _step$value[1];

          if (!_lodash2['default'].isUndefined(value)) {
            quote = _lodash2['default'].isString(value) ? '\"' : '';

            lines.push('  "' + key + '": ' + quote + value + quote + ',');
          }
        }
        // get rid of the last comma that was added
        context$1$0.next = 26;
        break;

      case 22:
        context$1$0.prev = 22;
        context$1$0.t0 = context$1$0['catch'](18);
        _didIteratorError = true;
        _iteratorError = context$1$0.t0;

      case 26:
        context$1$0.prev = 26;
        context$1$0.prev = 27;

        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }

      case 29:
        context$1$0.prev = 29;

        if (!_didIteratorError) {
          context$1$0.next = 32;
          break;
        }

        throw _iteratorError;

      case 32:
        return context$1$0.finish(29);

      case 33:
        return context$1$0.finish(26);

      case 34:
        lines[lines.length - 1] = lines[lines.length - 1].replace(/,$/, '');
        lines.push('});');
        return context$1$0.abrupt('return', lines.join('\r\n'));

      case 37:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[18, 22, 26, 34], [27,, 29, 33]]);
}

function computeHash(code) {
  return _crypto2['default'].createHash('md5').update(code).digest('hex').substring(0, 16);
}

function getDynamicBootstrapDir() {
  var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

  // figuring out where to store dynamic bootstrap
  var dynamicBootstrapDir = undefined;
  if (process.env.APPIUM_BOOTSTRAP_DIR) {
    // mainly for test
    dynamicBootstrapDir = process.env.APPIUM_BOOTSTRAP_DIR;
  } else if (process.env.HOME) {
    dynamicBootstrapDir = _path2['default'].resolve(process.env.HOME, 'Library/Application Support/appium/bootstrap');
  } else {
    // no user dir, using tmp
    dynamicBootstrapDir = _path2['default'].resolve(opts.tmpDir || '/tmp', 'appium/bootstrap');
  }
  return dynamicBootstrapDir;
}

function writeDynamicBootstrapIfNecessary(dynamicBootstrapDir, dynamicBootstrapPath, code, hash) {
  var codeIsGood, existingCode;
  return _regeneratorRuntime.async(function writeDynamicBootstrapIfNecessary$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap((0, _appiumSupport.mkdirp)(dynamicBootstrapDir));

      case 2:
        codeIsGood = true;
        context$1$0.prev = 3;
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(dynamicBootstrapPath));

      case 6:
        existingCode = context$1$0.sent;

        codeIsGood = computeHash(existingCode) === hash;
        context$1$0.next = 13;
        break;

      case 10:
        context$1$0.prev = 10;
        context$1$0.t0 = context$1$0['catch'](3);

        codeIsGood = false;

      case 13:
        if (!codeIsGood) {
          context$1$0.next = 17;
          break;
        }

        _logger2['default'].debug('Reusing dynamic bootstrap: ' + dynamicBootstrapPath);
        context$1$0.next = 20;
        break;

      case 17:
        _logger2['default'].debug('Creating or overwriting dynamic bootstrap: ' + dynamicBootstrapPath);
        context$1$0.next = 20;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.writeFile(dynamicBootstrapPath, code, { flag: 'w+' }));

      case 20:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[3, 10]]);
}

function prepareBootstrap() {
  var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
  var dynamicBootstrapDir, code, hash, dynamicBootstrapPath;
  return _regeneratorRuntime.async(function prepareBootstrap$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Preparing bootstrap code');

        dynamicBootstrapDir = getDynamicBootstrapDir(opts);

        _logger2['default'].debug('Dynamic bootstrap dir: ' + dynamicBootstrapDir);

        // building code and hash
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(buildCode(opts));

      case 5:
        code = context$1$0.sent;
        hash = computeHash(code);
        dynamicBootstrapPath = _path2['default'].resolve(dynamicBootstrapDir, 'bootstrap-' + hash + '.js');

        _logger2['default'].debug('Dynamic bootstrap code: ' + code.split('\n')[0] + '...');
        _logger2['default'].debug('Dynamic bootstrap path: ' + dynamicBootstrapPath);
        context$1$0.next = 12;
        return _regeneratorRuntime.awrap(writeDynamicBootstrapIfNecessary(dynamicBootstrapDir, dynamicBootstrapPath, code, hash));

      case 12:
        return context$1$0.abrupt('return', dynamicBootstrapPath);

      case 13:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

exports.prepareBootstrap = prepareBootstrap;
exports.getEnv = getEnv;

// only build the code if it hasn't been done before

// if special imports were sent in, make use of them

// generate the dynamic part of the bootstrap code
// with the environment set up properly

// check if there is existing code and it has the same hash

// write file if the old code is not the same
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9keW5hbWljLWJvb3RzdHJhcC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztvQkFHaUIsTUFBTTs7OztzQkFDVCxRQUFROzs7O3NCQUNILFFBQVE7Ozs7NkJBQ0EsZ0JBQWdCOzsyQkFDbkIsZ0JBQWdCOzs7O3NCQUN4QixVQUFVOzs7OzRCQUNpQixpQkFBaUI7O0FBRzVELElBQUksaUJBQWlCLEdBQUcsa0JBQUssT0FBTyxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxjQUFjLENBQUMsQ0FBQztBQUN0RixJQUFJLHlCQUF5QixHQUFHLGtCQUFLLE9BQU8sQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUseUJBQXlCLENBQUMsQ0FBQztBQUN2RyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsRUFBRTtBQUNuQyxtQkFBaUIsR0FBRyxrQkFBSyxPQUFPLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsY0FBYyxDQUFDLENBQUM7QUFDNUUsMkJBQXlCLEdBQUcsa0JBQUssT0FBTyxDQUFDLFNBQVMsRUFBRSxLQUFLLEVBQUUseUJBQXlCLENBQUMsQ0FBQztDQUN2Rjs7QUFFRCxTQUFTLE1BQU0sR0FBYTtNQUFYLElBQUkseURBQUcsRUFBRTs7O0FBRXhCLFNBQU87QUFDTCxZQUFRLEVBQUUsT0FBTyxDQUFDLFFBQVE7QUFDMUIsMEJBQXNCLEVBQUUseUJBQXlCO0FBQ2pELG1CQUFlLEVBQUUsSUFBSSxDQUFDLElBQUksNENBQThCO0FBQ3hELGlCQUFhLEVBQUUsSUFBSSxDQUFDLGFBQWEsSUFBSSxJQUFJO0FBQ3pDLHNCQUFrQixFQUFFLElBQUksQ0FBQyxrQkFBa0I7QUFDM0Msb0JBQWdCLEVBQUUsSUFBSSxDQUFDLGdCQUFnQjtBQUN2QyxxQkFBaUIsRUFBRSxJQUFJLENBQUMsaUJBQWlCO0FBQ3pDLG1CQUFl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L0QsNEJBQUksS0FBSyw4QkFBNEIsb0JBQW9CLENBQUcsQ0FBQzs7eUNBQ3ZELGdDQUFnQyxDQUFDLG1CQUFtQixFQUN4RCxvQkFBb0IsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDOzs7NENBRTVCLG9CQUFvQjs7Ozs7OztDQUM1Qjs7UUFFUSxnQkFBZ0IsR0FBaEIsZ0JBQWdCO1FBQUUsTUFBTSxHQUFOLE1BQU0iLCJmaWxlIjoibGliL2R5bmFtaWMtYm9vdHN0cmFwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gR2VuZXJhdGUgYSBib290c3RyYXAgZm9yIHRoZSBVSUF1dG8gSW5zdHJ1bWVudHMgc2NyaXB0IGNvbnRhaW5pbmdcbi8vIHRoZSBlbnZpcm9ubWVudCB2YXJpYWJsZXMgd2UgbmVlZC5cblxuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IGNyeXB0byBmcm9tICdjcnlwdG8nO1xuaW1wb3J0IHsgZnMsIG1rZGlycCB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcbmltcG9ydCBidWlsZFNjcmlwdCBmcm9tICcuL2J1aWxkLXNjcmlwdCc7XG5pbXBvcnQgbG9nIGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCB7IERFRkFVTFRfSU5TVFJVTUVOVFNfU09DS0VUIH0gZnJvbSAnLi91aWF1dG8tY2xpZW50JztcblxuXG5sZXQgQk9PVFNUUkFQX0pTX1BBVEggPSBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLi4nLCAnLi4nLCAndWlhdXRvJywgJ2Jvb3RzdHJhcC5qcycpO1xubGV0IENPTU1BTkRfUFJPWFlfQ0xJRU5UX1BBVEggPSBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLi4nLCAnbGliJywgJ2JpbicsICdjb21tYW5kLXByb3h5LWNsaWVudC5qcycpO1xuaWYgKCFfX2Rpcm5hbWUubWF0Y2goL2J1aWxkXFwvbGliJC8pKSB7XG4gIEJPT1RTVFJBUF9KU19QQVRIID0gcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4uJywgJ3VpYXV0bycsICdib290c3RyYXAuanMnKTtcbiAgQ09NTUFORF9QUk9YWV9DTElFTlRfUEFUSCA9IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICdiaW4nLCAnY29tbWFuZC1wcm94eS1jbGllbnQuanMnKTtcbn1cblxuZnVuY3Rpb24gZ2V0RW52IChvcHRzID0ge30pIHtcbiAgLy8gYnVpbGQgYW4gb2JqZWN0IHdpdGggdGhlIHJlcXVpcmVkIHByb3BlcnRpZXMgZm9yIGJvb3RzdHJhcFxuICByZXR1cm4ge1xuICAgIG5vZGVQYXRoOiBwcm9jZXNzLmV4ZWNQYXRoLFxuICAgIGNvbW1hbmRQcm94eUNsaWVudFBhdGg6IENPTU1BTkRfUFJPWFlfQ0xJRU5UX1BBVEgsXG4gICAgaW5zdHJ1bWVudHNTb2NrOiBvcHRzLnNvY2sgfHwgREVGQVVMVF9JTlNUUlVNRU5UU19TT0NLRVQsXG4gICAgaW50ZXJLZXlEZWxheTogb3B0cy5pbnRlcktleURlbGF5IHx8IG51bGwsXG4gICAganVzdExvb3BJbmZpbml0ZWx5OiBvcHRzLmp1c3RMb29wSW5maW5pdGVseSxcbiAgICBhdXRvQWNjZXB0QWxlcnRzOiBvcHRzLmF1dG9BY2NlcHRBbGVydHMsXG4gICAgYXV0b0Rpc21pc3NBbGVydHM6IG9wdHMuYXV0b0Rpc21pc3NBbGVydHMsXG4gICAgc2VuZEtleVN0cmF0ZWd5OiBvcHRzLnNlbmRLZXlTdHJhdGVneSxcbiAgfTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gYnVpbGRDb2RlIChvcHRzKSB7XG4gIC8vIG9ubHkgYnVpbGQgdGhlIGNvZGUgaWYgaXQgaGFzbid0IGJlZW4gZG9uZSBiZWZvcmVcbiAgaWYgKG9wdHMuY29kZSkgcmV0dXJuIG9wdHMuY29kZTtcblxuICBsZXQgZW52ID0gZ2V0RW52KG9wdHMpO1xuICBsb2cuZGVidWcoYER5bmFtaWMgZW52OiAke0pTT04uc3RyaW5naWZ5KGVudil9YCk7XG5cbiAgbGV0IGJvb3RzdHJhcEpzID0gQk9PVFNUUkFQX0pTX1BBVEg7XG4gIC8vIGlmIHNwZWNpYWwgaW1wb3J0cyB3ZXJlIHNlbnQgaW4sIG1ha2UgdXNlIG9mIHRoZW1cbiAgbGV0IGltcG9ydHMgPSAob3B0cy5pbXBvcnRzICYmIG9wdHMuaW1wb3J0cy5wcmUpID8gb3B0cy5pbXBvcnRzLnByZSA6IFtdO1xuICBsZXQgYm9vdHN0cmFwQ29kZSA9IGF3YWl0IGJ1aWxkU2NyaXB0KGJvb3RzdHJhcEpzLCBpbXBvcnRzKTtcblxuICAvLyBnZW5lcmF0ZSB0aGUgZHluYW1pYyBwYXJ0IG9mIHRoZSBib290c3RyYXAgY29kZVxuICAvLyB3aXRoIHRoZSBlbnZpcm9ubWVudCBzZXQgdXAgcHJvcGVybHlcbiAgbGV0IGxpbmVzID0gW107XG4gIGxpbmVzLnB1c2goJy8vIFRoaXMgZmlsZSBpcyBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZC4gRG8gbm90IG1hbnVhbGx5IG1vZGlmeSEnKTtcbiAgbGluZXMucHVzaCgnJyk7XG4gIGxpbmVzLnB1c2goYm9vdHN0cmFwQ29kZSk7XG4gIGxpbmVzLnB1c2goJycpO1xuICBsaW5lcy5wdXNoKCdib290c3RyYXAoeycpO1xuICAvLyBhZGQgZWFjaCBkZWZpbmVkIHZhcmlhYmxlIHRvIHRoZSBlbnZpcm9ubWVudFxuICBmb3IgKGxldCBba2V5LCB2YWx1ZV0gb2YgXy50b1BhaXJzKGVudikpIHtcbiAgICBpZiAoIV8uaXNVbmRlZmluZWQodmFsdWUpKSB7XG4gICAgICBsZXQgcXVvdGUgPSBfLmlzU3RyaW5nKHZhbHVlKSA/ICdcXFwiJyA6ICcnO1xuICAgICAgbGluZXMucHVzaChgICBcIiR7a2V5fVwiOiAke3F1b3RlfSR7dmFsdWV9JHtxdW90ZX0sYCk7XG4gICAgfVxuICB9XG4gIC8vIGdldCByaWQgb2YgdGhlIGxhc3QgY29tbWEgdGhhdCB3YXMgYWRkZWRcbiAgbGluZXNbbGluZXMubGVuZ3RoIC0gMV0gPSBsaW5lc1tsaW5lcy5sZW5ndGggLSAxXS5yZXBsYWNlKC8sJC8sICcnKTtcbiAgbGluZXMucHVzaCgnfSk7Jyk7XG4gIHJldHVybiBsaW5lcy5qb2luKCdcXHJcXG4nKTtcbn1cblxuZnVuY3Rpb24gY29tcHV0ZUhhc2ggKGNvZGUpIHtcbiAgcmV0dXJuIGNyeXB0b1xuICAgIC5jcmVhdGVIYXNoKCdtZDUnKVxuICAgIC51cGRhdGUoY29kZSlcbiAgICAuZGlnZXN0KCdoZXgnKVxuICAgIC5zdWJzdHJpbmcoMCwgMTYpO1xufVxuXG5mdW5jdGlvbiBnZXREeW5hbWljQm9vdHN0cmFwRGlyIChvcHRzID0ge30pIHtcbiAgLy8gZmlndXJpbmcgb3V0IHdoZXJlIHRvIHN0b3JlIGR5bmFtaWMgYm9vdHN0cmFwXG4gIGxldCBkeW5hbWljQm9vdHN0cmFwRGlyO1xuICBpZiAocHJvY2Vzcy5lbnYuQVBQSVVNX0JPT1RTVFJBUF9ESVIpIHtcbiAgICAvLyBtYWlubHkgZm9yIHRlc3RcbiAgICBkeW5hbWljQm9vdHN0cmFwRGlyID0gcHJvY2Vzcy5lbnYuQVBQSVVNX0JPT1RTVFJBUF9ESVI7XG4gIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuSE9NRSkge1xuICAgIGR5bmFtaWNCb290c3RyYXBEaXIgPSBwYXRoLnJlc29sdmUocHJvY2Vzcy5lbnYuSE9NRSxcbiAgICAgICdMaWJyYXJ5L0FwcGxpY2F0aW9uIFN1cHBvcnQvYXBwaXVtL2Jvb3RzdHJhcCcpO1xuICB9IGVsc2Uge1xuICAgIC8vIG5vIHVzZXIgZGlyLCB1c2luZyB0bXBcbiAgICBkeW5hbWljQm9vdHN0cmFwRGlyID0gcGF0aC5yZXNvbHZlKG9wdHMudG1wRGlyIHx8ICcvdG1wJywgJ2FwcGl1bS9ib290c3RyYXAnKTtcbiAgfVxuICByZXR1cm4gZHluYW1pY0Jvb3RzdHJhcERpcjtcbn1cblxuYXN5bmMgZnVuY3Rpb24gd3JpdGVEeW5hbWljQm9vdHN0cmFwSWZOZWNlc3NhcnkgKGR5bmFtaWNCb290c3RyYXBEaXIsIGR5bmFtaWNCb290c3RyYXBQYXRoLCBjb2RlLCBoYXNoKSB7XG4gIGF3YWl0IG1rZGlycChkeW5hbWljQm9vdHN0cmFwRGlyKTtcblxuICAvLyBjaGVjayBpZiB0aGVyZSBpcyBleGlzdGluZyBjb2RlIGFuZCBpdCBoYXMgdGhlIHNhbWUgaGFzaFxuICBsZXQgY29kZUlzR29vZCA9IHRydWU7XG4gIHRyeSB7XG4gICAgbGV0IGV4aXN0aW5nQ29kZSA9IGF3YWl0IGZzLnJlYWRGaWxlKGR5bmFtaWNCb290c3RyYXBQYXRoKTtcbiAgICBjb2RlSXNHb29kID0gY29tcHV0ZUhhc2goZXhpc3RpbmdDb2RlKSA9PT0gaGFzaDtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgY29kZUlzR29vZCA9IGZhbHNlO1xuICB9XG5cbiAgLy8gd3JpdGUgZmlsZSBpZiB0aGUgb2xkIGNvZGUgaXMgbm90IHRoZSBzYW1lXG4gIGlmIChjb2RlSXNHb29kKSB7XG4gICAgbG9nLmRlYnVnKGBSZXVzaW5nIGR5bmFtaWMgYm9vdHN0cmFwOiAke2R5bmFtaWNCb290c3RyYXBQYXRofWApO1xuICB9IGVsc2Uge1xuICAgIGxvZy5kZWJ1ZyhgQ3JlYXRpbmcgb3Igb3ZlcndyaXRpbmcgZHluYW1pYyBib290c3RyYXA6ICR7ZHluYW1pY0Jvb3RzdHJhcFBhdGh9YCk7XG4gICAgYXdhaXQgZnMud3JpdGVGaWxlKGR5bmFtaWNCb290c3RyYXBQYXRoLCBjb2RlLCB7ZmxhZzogJ3crJ30pO1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHByZXBhcmVCb290c3RyYXAgKG9wdHMgPSB7fSkge1xuICBsb2cuZGVidWcoJ1ByZXBhcmluZyBib290c3RyYXAgY29kZScpO1xuXG4gIGxldCBkeW5hbWljQm9vdHN0cmFwRGlyID0gZ2V0RHluYW1pY0Jvb3RzdHJhcERpcihvcHRzKTtcbiAgbG9nLmRlYnVnKGBEeW5hbWljIGJvb3RzdHJhcCBkaXI6ICR7ZHluYW1pY0Jvb3RzdHJhcERpcn1gKTtcblxuICAvLyBidWlsZGluZyBjb2RlIGFuZCBoYXNoXG4gIGxldCBjb2RlID0gYXdhaXQgYnVpbGRDb2RlKG9wdHMpO1xuICBsZXQgaGFzaCA9IGNvbXB1dGVIYXNoKGNvZGUpO1xuICBsZXQgZHluYW1pY0Jvb3RzdHJhcFBhdGggPSBwYXRoLnJlc29sdmUoZHluYW1pY0Jvb3RzdHJhcERpciwgYGJvb3RzdHJhcC0ke2hhc2h9LmpzYCk7XG4gIGxvZy5kZWJ1ZyhgRHluYW1pYyBib290c3RyYXAgY29kZTogJHtjb2RlLnNwbGl0KCdcXG4nKVswXX0uLi5gKTtcbiAgbG9nLmRlYnVnKGBEeW5hbWljIGJvb3RzdHJhcCBwYXRoOiAke2R5bmFtaWNCb290c3RyYXBQYXRofWApO1xuICBhd2FpdCB3cml0ZUR5bmFtaWNCb290c3RyYXBJZk5lY2Vzc2FyeShkeW5hbWljQm9vdHN0cmFwRGlyLFxuICAgIGR5bmFtaWNCb290c3RyYXBQYXRoLCBjb2RlLCBoYXNoKTtcblxuICByZXR1cm4gZHluYW1pY0Jvb3RzdHJhcFBhdGg7XG59XG5cbmV4cG9ydCB7IHByZXBhcmVCb290c3RyYXAsIGdldEVudiB9O1xuIl19