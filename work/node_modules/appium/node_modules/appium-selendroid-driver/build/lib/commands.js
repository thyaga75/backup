'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _utf7 = require('utf7');

var _utf72 = _interopRequireDefault(_utf7);

var _appiumAndroidDriver = require('appium-android-driver');

var imap = _utf72['default'].imap;

var extensions = {},
    commands = {},
    helpers = {};

commands.performMultiAction = function callee$0$0(elId, actions) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!elId) {
          context$1$0.next = 2;
          break;
        }

        throw new Error("Selendroid actions do not support element id");

      case 2:
        return context$1$0.abrupt('return', this.selendroid.jwproxy.command('/action', 'POST', { payload: actions }));

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

function encodeString(value, unicode) {
  for (var i = 0; i < value.length; i++) {
    var c = value.charCodeAt(i);
    // if we're using the unicode keyboard, and this is unicode, maybe encode
    if (unicode && (c > 127 || c === 38)) {
      // this is not simple ascii, or it is an ampersand (`&`)
      if (c >= parseInt("E000", 16) && c <= parseInt("E040", 16)) {
        // Selenium uses a Unicode PUA to cover certain special characters
        // see https://code.google.com/p/selenium/source/browse/java/client/src/org/openqa/selenium/Keys.java
      } else {
          // encode the text
          value = imap.encode(value);
          break;
        }
    }
  }
  return value;
}

// Need to override this for correct unicode support
commands.setValue = function callee$0$0(value, elementId) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (value instanceof Array) {
          value = value.join("");
        }
        _logger2['default'].debug('Setting text on element \'' + elementId + '\': \'' + value + '\'');
        value = encodeString(value, this.opts.unicodeKeyboard);
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.selendroid.jwproxy.command('/element/' + elementId + '/value', 'POST', { value: [value] }));

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

// Need to override this for correct unicode support
commands.keys = function callee$0$0(value) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (value instanceof Array) {
          value = value.join("");
        }
        _logger2['default'].debug('Setting text: \'' + value + '\'');
        value = encodeString(value, this.opts.unicodeKeyboard);
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.selendroid.jwproxy.command('/keys', 'POST', { value: [value] }));

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

// Selendroid doesn't support metastate for keyevents
commands.keyevent = function callee$0$0(keycode, metastate) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Ignoring metastate ' + metastate);
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.adb.keyevent(keycode));

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

// Use ADB since we don't have UiAutomator
commands.back = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.adb.keyevent(4));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.getContexts = function callee$0$0() {
  var chromiumViews, webviews, selendroidViews;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        chromiumViews = [];
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(_appiumAndroidDriver.webviewHelpers.getWebviews(this.adb, this.opts.androidDeviceSocket));

      case 3:
        webviews = context$1$0.sent;

        if (_lodash2['default'].contains(webviews, _appiumAndroidDriver.CHROMIUM_WIN)) {
          chromiumViews = [_appiumAndroidDriver.CHROMIUM_WIN];
        } else {
          chromiumViews = [];
        }

        _logger2['default'].info('Getting window handles from Selendroid');
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(this.selendroid.jwproxy.command('/window_handles', 'GET', {}));

      case 8:
        selendroidViews = context$1$0.sent;

        this.contexts = _lodash2['default'].union(selendroidViews, chromiumViews);
        _logger2['default'].info('Available contexts: ' + JSON.stringify(this.contexts));
        return context$1$0.abrupt('return', this.contexts);

      case 12:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.switchContext = function callee$0$0(name) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.selendroid.jwproxy.command('/window', 'POST', { name: name }));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.isChromedriverContext = function (windowName) {
  return windowName === _appiumAndroidDriver.CHROMIUM_WIN;
};

_Object$assign(extensions, commands, helpers);

exports['default'] = extensions;
module.exports = exports['default'];

// called when setting context
//# sourceMappingURL=data:application/json;base64,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QUFVLEVBQUU7QUFDcEQsU0FBTyxVQUFVLHNDQUFpQixDQUFDO0NBQ3BDLENBQUM7O0FBRUYsZUFBYyxVQUFVLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDOztxQkFFOUIsVUFBVSIsImZpbGUiOiJsaWIvY29tbWFuZHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IGxvZyBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQgdXRmNyBmcm9tICd1dGY3JztcbmltcG9ydCB7IHdlYnZpZXdIZWxwZXJzLCBDSFJPTUlVTV9XSU4gfSBmcm9tICdhcHBpdW0tYW5kcm9pZC1kcml2ZXInO1xuXG5jb25zdCB7aW1hcH0gPSB1dGY3O1xuXG5sZXQgZXh0ZW5zaW9ucyA9IHt9LFxuICAgIGNvbW1hbmRzID0ge30sXG4gICAgaGVscGVycyA9IHt9O1xuXG5jb21tYW5kcy5wZXJmb3JtTXVsdGlBY3Rpb24gPSBhc3luYyBmdW5jdGlvbiAoZWxJZCwgYWN0aW9ucykge1xuICBpZiAoZWxJZCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlNlbGVuZHJvaWQgYWN0aW9ucyBkbyBub3Qgc3VwcG9ydCBlbGVtZW50IGlkXCIpO1xuICB9XG4gIHJldHVybiB0aGlzLnNlbGVuZHJvaWQuandwcm94eS5jb21tYW5kKCcvYWN0aW9uJywgJ1BPU1QnLCB7cGF5bG9hZDogYWN0aW9uc30pO1xufTtcblxuZnVuY3Rpb24gZW5jb2RlU3RyaW5nICh2YWx1ZSwgdW5pY29kZSkge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IGMgPSB2YWx1ZS5jaGFyQ29kZUF0KGkpO1xuICAgIC8vIGlmIHdlJ3JlIHVzaW5nIHRoZSB1bmljb2RlIGtleWJvYXJkLCBhbmQgdGhpcyBpcyB1bmljb2RlLCBtYXliZSBlbmNvZGVcbiAgICBpZiAodW5pY29kZSAmJiAoYyA+IDEyNyB8fCBjID09PSAzOCkpIHtcbiAgICAgIC8vIHRoaXMgaXMgbm90IHNpbXBsZSBhc2NpaSwgb3IgaXQgaXMgYW4gYW1wZXJzYW5kIChgJmApXG4gICAgICBpZiAoYyA+PSBwYXJzZUludChcIkUwMDBcIiwgMTYpICYmIGMgPD0gcGFyc2VJbnQoXCJFMDQwXCIsIDE2KSkge1xuICAgICAgICAvLyBTZWxlbml1bSB1c2VzIGEgVW5pY29kZSBQVUEgdG8gY292ZXIgY2VydGFpbiBzcGVjaWFsIGNoYXJhY3RlcnNcbiAgICAgICAgLy8gc2VlIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3Avc2VsZW5pdW0vc291cmNlL2Jyb3dzZS9qYXZhL2NsaWVudC9zcmMvb3JnL29wZW5xYS9zZWxlbml1bS9LZXlzLmphdmFcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGVuY29kZSB0aGUgdGV4dFxuICAgICAgICB2YWx1ZSA9IGltYXAuZW5jb2RlKHZhbHVlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cblxuLy8gTmVlZCB0byBvdmVycmlkZSB0aGlzIGZvciBjb3JyZWN0IHVuaWNvZGUgc3VwcG9ydFxuY29tbWFuZHMuc2V0VmFsdWUgPSBhc3luYyBmdW5jdGlvbiAodmFsdWUsIGVsZW1lbnRJZCkge1xuICBpZiAodmFsdWUgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgIHZhbHVlID0gdmFsdWUuam9pbihcIlwiKTtcbiAgfVxuICBsb2cuZGVidWcoYFNldHRpbmcgdGV4dCBvbiBlbGVtZW50ICcke2VsZW1lbnRJZH0nOiAnJHt2YWx1ZX0nYCk7XG4gIHZhbHVlID0gZW5jb2RlU3RyaW5nKHZhbHVlLCB0aGlzLm9wdHMudW5pY29kZUtleWJvYXJkKTtcbiAgYXdhaXQgdGhpcy5zZWxlbmRyb2lkLmp3cHJveHkuY29tbWFuZChgL2VsZW1lbnQvJHtlbGVtZW50SWR9L3ZhbHVlYCwgJ1BPU1QnLCB7dmFsdWU6IFt2YWx1ZV19KTtcbn07XG5cbi8vIE5lZWQgdG8gb3ZlcnJpZGUgdGhpcyBmb3IgY29ycmVjdCB1bmljb2RlIHN1cHBvcnRcbmNvbW1hbmRzLmtleXMgPSBhc3luYyBmdW5jdGlvbiAodmFsdWUpIHtcbiAgaWYgKHZhbHVlIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICB2YWx1ZSA9IHZhbHVlLmpvaW4oXCJcIik7XG4gIH1cbiAgbG9nLmRlYnVnKGBTZXR0aW5nIHRleHQ6ICcke3ZhbHVlfSdgKTtcbiAgdmFsdWUgPSBlbmNvZGVTdHJpbmcodmFsdWUsIHRoaXMub3B0cy51bmljb2RlS2V5Ym9hcmQpO1xuICBhd2FpdCB0aGlzLnNlbGVuZHJvaWQuandwcm94eS5jb21tYW5kKCcva2V5cycsICdQT1NUJywge3ZhbHVlOiBbdmFsdWVdfSk7XG59O1xuXG4vLyBTZWxlbmRyb2lkIGRvZXNuJ3Qgc3VwcG9ydCBtZXRhc3RhdGUgZm9yIGtleWV2ZW50c1xuY29tbWFuZHMua2V5ZXZlbnQgPSBhc3luYyBmdW5jdGlvbiAoa2V5Y29kZSwgbWV0YXN0YXRlKSB7XG4gIGxvZy5kZWJ1ZyhgSWdub3JpbmcgbWV0YXN0YXRlICR7bWV0YXN0YXRlfWApO1xuICBhd2FpdCB0aGlzLmFkYi5rZXlldmVudChrZXljb2RlKTtcbn07XG5cbi8vIFVzZSBBREIgc2luY2Ugd2UgZG9uJ3QgaGF2ZSBVaUF1dG9tYXRvclxuY29tbWFuZHMuYmFjayA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgYXdhaXQgdGhpcy5hZGIua2V5ZXZlbnQoNCk7XG59O1xuXG5jb21tYW5kcy5nZXRDb250ZXh0cyA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgbGV0IGNocm9taXVtVmlld3MgPSBbXTtcbiAgbGV0IHdlYnZpZXdzID0gYXdhaXQgd2Vidmlld0hlbHBlcnMuZ2V0V2Vidmlld3ModGhpcy5hZGIsXG4gICAgICB0aGlzLm9wdHMuYW5kcm9pZERldmljZVNvY2tldCk7XG4gIGlmIChfLmNvbnRhaW5zKHdlYnZpZXdzLCBDSFJPTUlVTV9XSU4pKSB7XG4gICAgY2hyb21pdW1WaWV3cyA9IFtDSFJPTUlVTV9XSU5dO1xuICB9IGVsc2Uge1xuICAgIGNocm9taXVtVmlld3MgPSBbXTtcbiAgfVxuXG4gIGxvZy5pbmZvKCdHZXR0aW5nIHdpbmRvdyBoYW5kbGVzIGZyb20gU2VsZW5kcm9pZCcpO1xuICBsZXQgc2VsZW5kcm9pZFZpZXdzID0gYXdhaXQgdGhpcy5zZWxlbmRyb2lkLmp3cHJveHkuY29tbWFuZCgnL3dpbmRvd19oYW5kbGVzJywgJ0dFVCcsIHt9KTtcbiAgdGhpcy5jb250ZXh0cyA9IF8udW5pb24oc2VsZW5kcm9pZFZpZXdzLCBjaHJvbWl1bVZpZXdzKTtcbiAgbG9nLmluZm8oYEF2YWlsYWJsZSBjb250ZXh0czogJHtKU09OLnN0cmluZ2lmeSh0aGlzLmNvbnRleHRzKX1gKTtcbiAgcmV0dXJuIHRoaXMuY29udGV4dHM7XG59O1xuXG5oZWxwZXJzLnN3aXRjaENvbnRleHQgPSBhc3luYyBmdW5jdGlvbiAobmFtZSkge1xuICAvLyBjYWxsZWQgd2hlbiBzZXR0aW5nIGNvbnRleHRcbiAgYXdhaXQgdGhpcy5zZWxlbmRyb2lkLmp3cHJveHkuY29tbWFuZCgnL3dpbmRvdycsICdQT1NUJywge25hbWV9KTtcbn07XG5cbmhlbHBlcnMuaXNDaHJvbWVkcml2ZXJDb250ZXh0ID0gZnVuY3Rpb24gKHdpbmRvd05hbWUpIHtcbiAgcmV0dXJuIHdpbmRvd05hbWUgPT09IENIUk9NSVVNX1dJTjtcbn07XG5cbk9iamVjdC5hc3NpZ24oZXh0ZW5zaW9ucywgY29tbWFuZHMsIGhlbHBlcnMpO1xuXG5leHBvcnQgZGVmYXVsdCBleHRlbnNpb25zO1xuIl19