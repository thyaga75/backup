'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _appiumJsonwpProxy = require('appium-jsonwp-proxy');

var _appiumJsonwpProxy2 = _interopRequireDefault(_appiumJsonwpProxy);

var _asyncbox = require('asyncbox');

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _appiumSupport = require('appium-support');

var _appiumSelendroidInstaller = require('appium-selendroid-installer');

var REQD_PARAMS = ['adb', 'appPackage', 'appActivity', 'tmpDir', 'apk', 'host', 'systemPort', 'devicePort'];

var SelendroidServer = (function () {
  function SelendroidServer() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, SelendroidServer);

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = _getIterator(REQD_PARAMS), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var req = _step.value;

        if (!opts || !opts[req]) {
          throw new Error('Option \'' + req + '\' is required!');
        }
        this[req] = opts[req];
      }

      // new package name for repackaged selendroid server
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    this.modServerPkg = 'selendroid.' + this.appPackage;
    // path to the repackaged selendroid server specific to this app
    this.modServerPath = _path2['default'].resolve(this.tmpDir, this.modServerPkg + '.apk');
    this.jwproxy = new _appiumJsonwpProxy2['default']({ host: this.host, port: this.systemPort });
    this.proxyReqRes = this.jwproxy.proxyReqRes.bind(this.jwproxy);
  }

  _createClass(SelendroidServer, [{
    key: 'prepareModifiedServer',
    value: function prepareModifiedServer() {
      var needsUninstall;
      return _regeneratorRuntime.async(function prepareModifiedServer$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            needsUninstall = false;
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(this.modServerPath));

          case 3:
            if (context$2$0.sent) {
              context$2$0.next = 7;
              break;
            }

            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(this.buildNewModServer());

          case 6:
            needsUninstall = true;

          case 7:
            context$2$0.next = 9;
            return _regeneratorRuntime.awrap(this.checkAndSignCert(this.modServerPath));

          case 9:
            context$2$0.t0 = context$2$0.sent;

            if (context$2$0.t0) {
              context$2$0.next = 12;
              break;
            }

            context$2$0.t0 = needsUninstall;

          case 12:
            needsUninstall = context$2$0.t0;

            if (!needsUninstall) {
              context$2$0.next = 17;
              break;
            }

            _logger2['default'].info("New server was built, uninstalling any instances of it");
            context$2$0.next = 17;
            return _regeneratorRuntime.awrap(this.adb.uninstallApk(this.modServerPkg));

          case 17:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'installModifiedServer',
    value: function installModifiedServer() {
      var installed;
      return _regeneratorRuntime.async(function installModifiedServer$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.adb.isAppInstalled(this.modServerPkg));

          case 2:
            installed = context$2$0.sent;

            if (installed) {
              context$2$0.next = 6;
              break;
            }

            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(this.adb.install(this.modServerPath));

          case 6:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'buildNewModServer',
    value: function buildNewModServer() {
      var packageTmpDir, newManifestPath;
      return _regeneratorRuntime.async(function buildNewModServer$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].info('Repackaging selendroid for: \'' + this.appPackage + '\'');
            packageTmpDir = _path2['default'].resolve(this.tmpDir, this.appPackage);
            newManifestPath = _path2['default'].resolve(this.tmpDir, 'AndroidManifest.xml');

            _logger2['default'].info('Creating new manifest: \'' + newManifestPath + '\'');
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.mkdir(packageTmpDir));

          case 6:
            context$2$0.next = 8;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.copyFile(_appiumSelendroidInstaller.SE_MANIFEST_PATH, newManifestPath));

          case 8:
            context$2$0.next = 10;
            return _regeneratorRuntime.awrap(this.adb.initAapt());

          case 10:
            context$2$0.next = 12;
            return _regeneratorRuntime.awrap(this.adb.compileManifest(newManifestPath, this.modServerPkg, this.appPackage));

          case 12:
            context$2$0.next = 14;
            return _regeneratorRuntime.awrap(this.adb.insertManifest(newManifestPath, _appiumSelendroidInstaller.SE_APK_PATH, this.modServerPath));

          case 14:
            _logger2['default'].info('Repackaged selendroid ready: \'' + this.modServerPath + '\'');

          case 15:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'checkAndSignCert',
    value: function checkAndSignCert(apk) {
      var signed;
      return _regeneratorRuntime.async(function checkAndSignCert$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.adb.checkApkCert(apk, this.appPackage));

          case 2:
            signed = context$2$0.sent;

            if (signed) {
              context$2$0.next = 6;
              break;
            }

            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(this.adb.sign(apk));

          case 6:
            return context$2$0.abrupt('return', !signed);

          case 7:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'startSession',
    value: function startSession(caps) {
      var instrumentWith;
      return _regeneratorRuntime.async(function startSession$(context$2$0) {
        var _this = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            instrumentWith = this.modServerPkg + '/' + 'io.selendroid.server.ServerInstrumentation';

            _logger2['default'].info('Starting selendroid server with instrumentation: ' + ('' + instrumentWith));
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.adb.instrument(this.appPackage, this.appActivity, instrumentWith));

          case 4:

            _logger2['default'].info('Waiting for Selendroid to be online...');
            // wait 20s for Selendroid to be online
            context$2$0.next = 7;
            return _regeneratorRuntime.awrap((0, _asyncbox.retryInterval)(20, 1000, function callee$2$0() {
              return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    context$3$0.next = 2;
                    return _regeneratorRuntime.awrap(this.jwproxy.command('/status', 'GET'));

                  case 2:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this);
            }));

          case 7:
            context$2$0.next = 9;
            return _regeneratorRuntime.awrap(this.jwproxy.command('/session', 'POST', { desiredCapabilities: caps }));

          case 9:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'deleteSession',
    value: function deleteSession() {
      return _regeneratorRuntime.async(function deleteSession$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug('Deleting Selendroid server session');
            // rely on jwproxy's intelligence to know what we're talking about and
            // delete the current session
            context$2$0.prev = 1;
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.jwproxy.command('/', 'DELETE'));

          case 4:
            context$2$0.next = 9;
            break;

          case 6:
            context$2$0.prev = 6;
            context$2$0.t0 = context$2$0['catch'](1);

            _logger2['default'].warn('Did not get confirmation Selendroid deleteSession worked; ' + ('Error was: ' + context$2$0.t0));

          case 9:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[1, 6]]);
    }
  }]);

  return SelendroidServer;
})();

exports['default'] = SelendroidServer;
module.exports = exports['default'];

// TODO might have a race condition if we try building this with multiple
// sessions at the same time. OTOH we probably want to share the mod
// server...
// TODO this should be internal to adb

// return whether the apk was signed
//# sourceMappingURL=data:application/json;base64,