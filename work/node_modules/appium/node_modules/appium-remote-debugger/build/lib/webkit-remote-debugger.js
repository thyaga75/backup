require('source-map-support').install();

'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _mobileJsonWireProtocol = require('mobile-json-wire-protocol');

var _remoteDebugger = require('./remote-debugger');

var _webkitRpcClient = require('./webkit-rpc-client');

var _webkitRpcClient2 = _interopRequireDefault(_webkitRpcClient);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

var _requestPromise = require('request-promise');

var _requestPromise2 = _interopRequireDefault(_requestPromise);

var WebKitRemoteDebugger = (function (_RemoteDebugger) {
  _inherits(WebKitRemoteDebugger, _RemoteDebugger);

  function WebKitRemoteDebugger() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, WebKitRemoteDebugger);

    _get(Object.getPrototypeOf(WebKitRemoteDebugger.prototype), 'constructor', this).call(this, _lodash2['default'].defaults({ debuggerType: _remoteDebugger.DEBUGGER_TYPES.webkit }, opts));

    // used to store callback types when sending requests
    this.dataMethods = {};
  }

  _createClass(WebKitRemoteDebugger, [{
    key: 'connect',
    value: function connect(pageId) {
      return _regeneratorRuntime.async(function connect$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            this.rpcClient = new _webkitRpcClient2['default'](this.host, this.port);
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.rpcClient.connect(pageId));

          case 3:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'disconnect',
    value: function disconnect() {
      if (this.rpcClient && this.rpcClient.isConnected()) {
        this.rpcClient.disconnect();
      }
    }
  }, {
    key: 'isConnected',
    value: function isConnected() {
      return !!(this.rpcClient && this.rpcClient.isConnected());
    }
  }, {
    key: 'pageArrayFromJson',
    value: function pageArrayFromJson() {
      var pageElementJSON, newPageArray;
      return _regeneratorRuntime.async(function pageArrayFromJson$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug('Getting WebKitRemoteDebugger pageArray: ' + this.host + ', ' + this.port);
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.getJsonFromUrl(this.host, this.port, '/json'));

          case 3:
            pageElementJSON = context$2$0.sent;

            _logger2['default'].debug('Page element JSON: ' + JSON.stringify(pageElementJSON));
            // Add elements to an array
            newPageArray = pageElementJSON.map(function (pageObject) {
              var urlArray = pageObject.webSocketDebuggerUrl.split('/').reverse();
              var id = urlArray[0];
              return {
                id: id,
                title: pageObject.title,
                url: pageObject.url,
                isKey: !!id
              };
            });
            return context$2$0.abrupt('return', newPageArray);

          case 7:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'getJsonFromUrl',
    value: function getJsonFromUrl(hostname, port, pathname) {
      var uri;
      return _regeneratorRuntime.async(function getJsonFromUrl$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            uri = _url2['default'].format({
              protocol: 'http',
              hostname: hostname,
              port: port,
              pathname: pathname
            });

            _logger2['default'].debug('Sending request to: ' + uri);
            context$2$0.t0 = JSON;
            context$2$0.next = 5;
            return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({ uri: uri, method: 'GET' }));

          case 5:
            context$2$0.t1 = context$2$0.sent;
            return context$2$0.abrupt('return', context$2$0.t0.parse.call(context$2$0.t0, context$2$0.t1));

          case 7:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'convertResult',
    value: function convertResult(res) {
      // WebKit returns a result wrapped deeper than the Remote Debugger:
      //   {
      //     result: {
      //       type: "string",
      //       value: {
      //         status: 0,
      //         value: {
      //           ELEMENT: ":wdc:1441819740060"
      //         }
      //       }
      //     },
      //     wasThrown: false
      //   }

      // check for errors
      if (res && res.wasThrown) {
        // we got some form of error.
        var message = res.result.value || res.result;
        throw new _mobileJsonWireProtocol.errors.JavaScriptError(message);
      }

      if (res && res.result && res.result.type === 'undefined') {
        // if it doesn't throw an error, we just want to put in a
        // place holder. this happens when we have an async execute request
        res.result.value = {};
      }

      // send the actual result to the Remote Debugger converter
      return _get(Object.getPrototypeOf(WebKitRemoteDebugger.prototype), 'convertResult', this).call(this, res && res.result ? res.result.value : res);
    }
  }]);

  return WebKitRemoteDebugger;
})(_remoteDebugger.RemoteDebugger);

exports['default'] = WebKitRemoteDebugger;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi93ZWJraXQtcmVtb3RlLWRlYnVnZ2VyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3NCQUVnQixVQUFVOzs7O3NDQUNILDJCQUEyQjs7OEJBQ0gsbUJBQW1COzsrQkFDdEMscUJBQXFCOzs7O3NCQUNuQyxRQUFROzs7O21CQUNOLEtBQUs7Ozs7OEJBQ0QsaUJBQWlCOzs7O0lBR2hCLG9CQUFvQjtZQUFwQixvQkFBb0I7O0FBQzNCLFdBRE8sb0JBQW9CLEdBQ2Y7UUFBWCxJQUFJLHlEQUFHLEVBQUU7OzBCQURILG9CQUFvQjs7QUFFckMsK0JBRmlCLG9CQUFvQiw2Q0FFL0Isb0JBQUUsUUFBUSxDQUFDLEVBQUMsWUFBWSxFQUFFLCtCQUFlLE1BQU0sRUFBQyxFQUFFLElBQUksQ0FBQyxFQUFFOzs7QUFHL0QsUUFBSSxDQUFDLFdBQVcsR0FBRyxFQUFFLENBQUM7R0FDdkI7O2VBTmtCLG9CQUFvQjs7V0FRekIsaUJBQUMsTUFBTTs7OztBQUNuQixnQkFBSSxDQUFDLFNBQVMsR0FBRyxpQ0FBb0IsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7OzZDQUNyRCxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7Ozs7Ozs7S0FDckM7OztXQUVVLHNCQUFHO0FBQ1osVUFBSSxJQUFJLENBQUMsU0FBUyxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLEVBQUU7QUFDbEQsWUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLEVBQUUsQ0FBQztPQUM3QjtLQUNGOzs7V0FFVyx1QkFBRztBQUNiLGFBQU8sQ0FBQyxFQUFFLElBQUksQ0FBQyxTQUFTLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsQ0FBQSxBQUFDLENBQUM7S0FDM0Q7OztXQUV1QjtVQUVsQixlQUFlLEVBR2YsWUFBWTs7OztBQUpoQixnQ0FBSSxLQUFLLDhDQUE0QyxJQUFJLENBQUMsSUFBSSxVQUFLLElBQUksQ0FBQyxJQUFJLENBQUcsQ0FBQzs7NkNBQ3BELElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQzs7O0FBQTFFLDJCQUFlOztBQUNuQixnQ0FBSSxLQUFLLHlCQUF1QixJQUFJLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxDQUFHLENBQUM7O0FBRS9ELHdCQUFZLEdBQUcsZUFBZSxDQUFDLEdBQUcsQ0FBQyxVQUFDLFVBQVUsRUFBSztBQUNyRCxrQkFBSSxRQUFRLEdBQUcsVUFBVSxDQUFDLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUNwRSxrQkFBSSxFQUFFLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3JCLHFCQUFPO0FBQ0wsa0JBQUUsRUFBRixFQUFFO0FBQ0YscUJBQUssRUFBRSxVQUFVLENBQUMsS0FBSztBQUN2QixtQkFBRyxFQUFFLFVBQVUsQ0FBQyxHQUFHO0FBQ25CLHFCQUFLLEVBQUUsQ0FBQyxDQUFDLEVBQUU7ZUFDWixDQUFDO2FBQ0gsQ0FBQztnREFFSyxZQUFZOzs7Ozs7O0tBQ3BCOzs7V0FFb0Isd0JBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxRQUFRO1VBQ3hDLEdBQUc7Ozs7QUFBSCxlQUFHLEdBQUcsaUJBQUksTUFBTSxDQUFDO0FBQ25CLHNCQUFRLEVBQUUsTUFBTTtBQUNoQixzQkFBUSxFQUFSLFFBQVE7QUFDUixrQkFBSSxFQUFKLElBQUk7QUFDSixzQkFBUSxFQUFSLFFBQVE7YUFDVCxDQUFDOztBQUNGLGdDQUFJLEtBQUssMEJBQXdCLEdBQUcsQ0FBRyxDQUFDOzZCQUNqQyxJQUFJOzs2Q0FBYSxpQ0FBUSxFQUFDLEdBQUcsRUFBSCxHQUFHLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBQyxDQUFDOzs7OytEQUF6QyxLQUFLOzs7Ozs7O0tBQ2xCOzs7V0FFYSx1QkFBQyxHQUFHLEVBQUU7Ozs7Ozs7Ozs7Ozs7Ozs7QUFnQmxCLFVBQUksR0FBRyxJQUFJLEdBQUcsQ0FBQyxTQUFTLEVBQUU7O0FBRXhCLFlBQUksT0FBTyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUM7QUFDN0MsY0FBTSxJQUFJLCtCQUFPLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztPQUMzQzs7QUFFRCxVQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxLQUFLLFdBQVcsRUFBRTs7O0FBR3hELFdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztPQUN2Qjs7O0FBR0Qsd0NBbEZpQixvQkFBb0IsK0NBa0ZWLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLEdBQUcsRUFBRTtLQUN4RTs7O1NBbkZrQixvQkFBb0I7OztxQkFBcEIsb0JBQW9CIiwiZmlsZSI6ImxpYi93ZWJraXQtcmVtb3RlLWRlYnVnZ2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdHJhbnNwaWxlOm1haW5cblxuaW1wb3J0IGxvZyBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQgeyBlcnJvcnMgfSBmcm9tICdtb2JpbGUtanNvbi13aXJlLXByb3RvY29sJztcbmltcG9ydCB7IFJlbW90ZURlYnVnZ2VyLCBERUJVR0dFUl9UWVBFUyB9IGZyb20gJy4vcmVtb3RlLWRlYnVnZ2VyJztcbmltcG9ydCBXZWJLaXRScGNDbGllbnQgZnJvbSAnLi93ZWJraXQtcnBjLWNsaWVudCc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHVybCBmcm9tICd1cmwnO1xuaW1wb3J0IHJlcXVlc3QgZnJvbSAncmVxdWVzdC1wcm9taXNlJztcblxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXZWJLaXRSZW1vdGVEZWJ1Z2dlciBleHRlbmRzIFJlbW90ZURlYnVnZ2VyIHtcbiAgY29uc3RydWN0b3IgKG9wdHMgPSB7fSkge1xuICAgIHN1cGVyKF8uZGVmYXVsdHMoe2RlYnVnZ2VyVHlwZTogREVCVUdHRVJfVFlQRVMud2Via2l0fSwgb3B0cykpO1xuXG4gICAgLy8gdXNlZCB0byBzdG9yZSBjYWxsYmFjayB0eXBlcyB3aGVuIHNlbmRpbmcgcmVxdWVzdHNcbiAgICB0aGlzLmRhdGFNZXRob2RzID0ge307XG4gIH1cblxuICBhc3luYyBjb25uZWN0IChwYWdlSWQpIHtcbiAgICB0aGlzLnJwY0NsaWVudCA9IG5ldyBXZWJLaXRScGNDbGllbnQodGhpcy5ob3N0LCB0aGlzLnBvcnQpO1xuICAgIGF3YWl0IHRoaXMucnBjQ2xpZW50LmNvbm5lY3QocGFnZUlkKTtcbiAgfVxuXG4gIGRpc2Nvbm5lY3QgKCkge1xuICAgIGlmICh0aGlzLnJwY0NsaWVudCAmJiB0aGlzLnJwY0NsaWVudC5pc0Nvbm5lY3RlZCgpKSB7XG4gICAgICB0aGlzLnJwY0NsaWVudC5kaXNjb25uZWN0KCk7XG4gICAgfVxuICB9XG5cbiAgaXNDb25uZWN0ZWQgKCkge1xuICAgIHJldHVybiAhISh0aGlzLnJwY0NsaWVudCAmJiB0aGlzLnJwY0NsaWVudC5pc0Nvbm5lY3RlZCgpKTtcbiAgfVxuXG4gIGFzeW5jIHBhZ2VBcnJheUZyb21Kc29uICgpIHtcbiAgICBsb2cuZGVidWcoYEdldHRpbmcgV2ViS2l0UmVtb3RlRGVidWdnZXIgcGFnZUFycmF5OiAke3RoaXMuaG9zdH0sICR7dGhpcy5wb3J0fWApO1xuICAgIGxldCBwYWdlRWxlbWVudEpTT04gPSBhd2FpdCB0aGlzLmdldEpzb25Gcm9tVXJsKHRoaXMuaG9zdCwgdGhpcy5wb3J0LCAnL2pzb24nKTtcbiAgICBsb2cuZGVidWcoYFBhZ2UgZWxlbWVudCBKU09OOiAke0pTT04uc3RyaW5naWZ5KHBhZ2VFbGVtZW50SlNPTil9YCk7XG4gICAgLy8gQWRkIGVsZW1lbnRzIHRvIGFuIGFycmF5XG4gICAgbGV0IG5ld1BhZ2VBcnJheSA9IHBhZ2VFbGVtZW50SlNPTi5tYXAoKHBhZ2VPYmplY3QpID0+IHtcbiAgICAgIGxldCB1cmxBcnJheSA9IHBhZ2VPYmplY3Qud2ViU29ja2V0RGVidWdnZXJVcmwuc3BsaXQoJy8nKS5yZXZlcnNlKCk7XG4gICAgICBsZXQgaWQgPSB1cmxBcnJheVswXTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGlkLFxuICAgICAgICB0aXRsZTogcGFnZU9iamVjdC50aXRsZSxcbiAgICAgICAgdXJsOiBwYWdlT2JqZWN0LnVybCxcbiAgICAgICAgaXNLZXk6ICEhaWQsXG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIG5ld1BhZ2VBcnJheTtcbiAgfVxuXG4gIGFzeW5jIGdldEpzb25Gcm9tVXJsIChob3N0bmFtZSwgcG9ydCwgcGF0aG5hbWUpIHtcbiAgICBsZXQgdXJpID0gdXJsLmZvcm1hdCh7XG4gICAgICBwcm90b2NvbDogJ2h0dHAnLFxuICAgICAgaG9zdG5hbWUsXG4gICAgICBwb3J0LFxuICAgICAgcGF0aG5hbWVcbiAgICB9KTtcbiAgICBsb2cuZGVidWcoYFNlbmRpbmcgcmVxdWVzdCB0bzogJHt1cml9YCk7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UoYXdhaXQgcmVxdWVzdCh7dXJpLCBtZXRob2Q6ICdHRVQnfSkpO1xuICB9XG5cbiAgY29udmVydFJlc3VsdCAocmVzKSB7XG4gICAgLy8gV2ViS2l0IHJldHVybnMgYSByZXN1bHQgd3JhcHBlZCBkZWVwZXIgdGhhbiB0aGUgUmVtb3RlIERlYnVnZ2VyOlxuICAgIC8vICAge1xuICAgIC8vICAgICByZXN1bHQ6IHtcbiAgICAvLyAgICAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgIC8vICAgICAgIHZhbHVlOiB7XG4gICAgLy8gICAgICAgICBzdGF0dXM6IDAsXG4gICAgLy8gICAgICAgICB2YWx1ZToge1xuICAgIC8vICAgICAgICAgICBFTEVNRU5UOiBcIjp3ZGM6MTQ0MTgxOTc0MDA2MFwiXG4gICAgLy8gICAgICAgICB9XG4gICAgLy8gICAgICAgfVxuICAgIC8vICAgICB9LFxuICAgIC8vICAgICB3YXNUaHJvd246IGZhbHNlXG4gICAgLy8gICB9XG5cbiAgICAvLyBjaGVjayBmb3IgZXJyb3JzXG4gICAgaWYgKHJlcyAmJiByZXMud2FzVGhyb3duKSB7XG4gICAgICAvLyB3ZSBnb3Qgc29tZSBmb3JtIG9mIGVycm9yLlxuICAgICAgbGV0IG1lc3NhZ2UgPSByZXMucmVzdWx0LnZhbHVlIHx8IHJlcy5yZXN1bHQ7XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLkphdmFTY3JpcHRFcnJvcihtZXNzYWdlKTtcbiAgICB9XG5cbiAgICBpZiAocmVzICYmIHJlcy5yZXN1bHQgJiYgcmVzLnJlc3VsdC50eXBlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gaWYgaXQgZG9lc24ndCB0aHJvdyBhbiBlcnJvciwgd2UganVzdCB3YW50IHRvIHB1dCBpbiBhXG4gICAgICAvLyBwbGFjZSBob2xkZXIuIHRoaXMgaGFwcGVucyB3aGVuIHdlIGhhdmUgYW4gYXN5bmMgZXhlY3V0ZSByZXF1ZXN0XG4gICAgICByZXMucmVzdWx0LnZhbHVlID0ge307XG4gICAgfVxuXG4gICAgLy8gc2VuZCB0aGUgYWN0dWFsIHJlc3VsdCB0byB0aGUgUmVtb3RlIERlYnVnZ2VyIGNvbnZlcnRlclxuICAgIHJldHVybiBzdXBlci5jb252ZXJ0UmVzdWx0KHJlcyAmJiByZXMucmVzdWx0ID8gcmVzLnJlc3VsdC52YWx1ZSA6IHJlcyk7XG4gIH1cbn1cbiJdfQ==