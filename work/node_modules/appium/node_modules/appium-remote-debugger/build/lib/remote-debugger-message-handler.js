'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var RpcMessageHandler = (function () {
  function RpcMessageHandler(specialHandlers) {
    _classCallCheck(this, RpcMessageHandler);

    this.setHandlers();
    this.errorHandlers = {};
    this.specialHandlers = _lodash2['default'].clone(specialHandlers);
    this.dataHandlers = {};
    this.willNavigateWithoutReload = false;
  }

  _createClass(RpcMessageHandler, [{
    key: 'setDataMessageHandler',
    value: function setDataMessageHandler(key, errorHandler, handler) {
      this.errorHandlers[key] = errorHandler;
      this.dataHandlers[key] = handler;
    }
  }, {
    key: 'setSpecialMessageHandler',
    value: function setSpecialMessageHandler(key, errorHandler, handler) {
      this.errorHandlers[key] = errorHandler;
      this.specialHandlers[key] = handler;
    }
  }, {
    key: 'setTimelineEventHandler',
    value: function setTimelineEventHandler(timelineEventHandler) {
      this.timelineEventHandler = timelineEventHandler;
    }
  }, {
    key: 'hasErrorHandler',
    value: function hasErrorHandler(key) {
      return _lodash2['default'].has(this.errorHandlers, key);
    }
  }, {
    key: 'hasSpecialMessageHandler',
    value: function hasSpecialMessageHandler(key) {
      return _lodash2['default'].has(this.specialHandlers, key);
    }
  }, {
    key: 'allowNavigationWithoutReload',
    value: function allowNavigationWithoutReload() {
      var allow = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];

      this.willNavigateWithoutReload = allow;
    }
  }, {
    key: 'handleMessage',
    value: function handleMessage(plist) {
      var handlerFor = plist.__selector;
      if (!handlerFor) {
        _logger2['default'].debug('Got an invalid plist');
        return;
      }

      if (_lodash2['default'].has(this.handlers, handlerFor)) {
        this.handlers[handlerFor](plist);
      } else {
        _logger2['default'].debug('Debugger got a message for \'' + handlerFor + '\' and have no ' + 'handler, doing nothing.');
      }
    }
  }, {
    key: 'handleSpecialMessage',
    value: function handleSpecialMessage(handler) {
      var fn = this.specialHandlers[handler];
      if (fn) {
        // most responses are only to be called once, then
        // removed. But not the ones below, which handle
        // page change and app connect/disconnect
        if (handler !== '_rpc_forwardGetListing:' && handler !== '_rpc_applicationDisconnected:' && handler !== '_rpc_applicationConnected:') {
          this.specialHandlers[handler] = null;
        }

        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        fn.apply(undefined, args);
      } else {
        _logger2['default'].warn('Tried to access special message handler \'' + handler + '\' ' + 'but none was found');
      }
    }
  }, {
    key: 'handleDataMessage',
    value: function handleDataMessage(plist) {
      var dataKey, msgId, result, error, message;
      return _regeneratorRuntime.async(function handleDataMessage$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            dataKey = JSON.parse(plist.__argument.WIRMessageDataKey.toString('utf8'));
            msgId = dataKey.id;
            result = dataKey.result;
            error = dataKey.error || null;

            // we can get an error, or we can get a response that is an error
            if (result && result.wasThrown) {
              message = result.result.value || result.result.description;

              error = new Error(message);
            }

            if (!_lodash2['default'].isNull(msgId) && !_lodash2['default'].isUndefined(msgId)) {
              msgId = msgId.toString();
            }

            if (!error) {
              context$2$0.next = 9;
              break;
            }

            if (this.hasErrorHandler(msgId)) {
              this.errorHandlers[msgId](error);
            } else {
              _logger2['default'].error('Error occurred in handling data message: ' + error);
              _logger2['default'].error('No error handler present, ignoring');
            }

            // short circuit
            return context$2$0.abrupt('return');

          case 9:
            if (!(dataKey.method === 'Profiler.resetProfiles')) {
              context$2$0.next = 13;
              break;
            }

            _logger2['default'].debug('Device is telling us to reset profiles. Should probably ' + 'do some kind of callback here');
            context$2$0.next = 23;
            break;

          case 13:
            if (!(dataKey.method === 'Page.frameNavigated')) {
              context$2$0.next = 17;
              break;
            }

            if (!this.willNavigateWithoutReload && !this.pageLoading) {
              _logger2['default'].debug('Frame navigated, unloading page');
              this.specialHandlers['Page.frameNavigated']('remote-debugger');
              this.specialHandlers['Page.frameNavigated'] = null;
            } else {
              _logger2['default'].debug('Frame navigated but we were warned about it, not ' + 'considering page state unloaded');
              this.willNavigateWithoutReload = false;
            }
            context$2$0.next = 23;
            break;

          case 17:
            if (!(dataKey.method === 'Page.loadEventFired')) {
              context$2$0.next = 22;
              break;
            }

            context$2$0.next = 20;
            return _regeneratorRuntime.awrap(this.pageLoad());

          case 20:
            context$2$0.next = 23;
            break;

          case 22:
            if (dataKey.method === 'Timeline.eventRecorded') {
              this.timelineEventHandler(dataKey.params.record);
            } else if (_lodash2['default'].isFunction(this.dataHandlers[msgId])) {
              _logger2['default'].debug('Found data handler for response');
              // we will either get back a result object that has a result.value
              // in which case that is what we want,
              // or else we return the whole thing
              if (result.result && result.result.value) {
                result = result.result.value;
              }
              this.dataHandlers[msgId](result);
              this.dataHandlers[msgId] = null;
            } else if (this.dataHandlers[msgId] === null) {
              _logger2['default'].error('Debugger returned data for message ' + msgId + ' ' + 'but we already ran that callback! WTF??');
            } else {
              if (!msgId && !result && !error) {
                _logger2['default'].debug('Got a blank data response from debugger');
              } else {
                _logger2['default'].error('Debugger returned data for message ' + msgId + ' ' + 'but we were not waiting for that message! ' + ('result: ' + JSON.stringify(result) + '; ') + ('error: ' + error));
              }
            }

          case 23:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'setHandlers',
    value: function setHandlers() {
      var _this = this;

      this.handlers = {
        '_rpc_reportSetup:': function _rpc_reportSetup(plist) {
          _this.handleSpecialMessage('_rpc_reportIdentifier:', plist.__argument.WIRSimulatorNameKey, plist.__argument.WIRSimulatorBuildKey, plist.__argument.WIRSimulatorProductVersionKey);
        },
        '_rpc_reportConnectedApplicationList:': function _rpc_reportConnectedApplicationList(plist) {
          _this.handleSpecialMessage('_rpc_reportConnectedApplicationList:', plist.__argument.WIRApplicationDictionaryKey);
        },
        '_rpc_applicationSentListing:': function _rpc_applicationSentListing(plist) {
          _this.handleSpecialMessage('_rpc_forwardGetListing:', plist.__argument.WIRApplicationIdentifierKey, plist.__argument.WIRListingKey);
        },
        '_rpc_applicationConnected:': function _rpc_applicationConnected(plist) {
          _this.handleSpecialMessage('_rpc_applicationConnected:', plist.__argument);
        },
        '_rpc_applicationDisconnected:': function _rpc_applicationDisconnected(plist) {
          _this.handleSpecialMessage('_rpc_applicationDisconnected:', plist.__argument);
        },
        '_rpc_applicationSentData:': this.handleDataMessage.bind(this)
      };
    }
  }]);

  return RpcMessageHandler;
})();

exports['default'] = RpcMessageHandler;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9yZW1vdGUtZGVidWdnZXItbWVzc2FnZS1oYW5kbGVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O3NCQUFnQixVQUFVOzs7O3NCQUNaLFFBQVE7Ozs7SUFHRCxpQkFBaUI7QUFDeEIsV0FETyxpQkFBaUIsQ0FDdkIsZUFBZSxFQUFFOzBCQURYLGlCQUFpQjs7QUFFbEMsUUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQ25CLFFBQUksQ0FBQyxhQUFhLEdBQUcsRUFBRSxDQUFDO0FBQ3hCLFFBQUksQ0FBQyxlQUFlLEdBQUcsb0JBQUUsS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0FBQ2hELFFBQUksQ0FBQyxZQUFZLEdBQUcsRUFBRSxDQUFDO0FBQ3ZCLFFBQUksQ0FBQyx5QkFBeUIsR0FBRyxLQUFLLENBQUM7R0FDeEM7O2VBUGtCLGlCQUFpQjs7V0FTZCwrQkFBQyxHQUFHLEVBQUUsWUFBWSxFQUFFLE9BQU8sRUFBRTtBQUNqRCxVQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxHQUFHLFlBQVksQ0FBQztBQUN2QyxVQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxHQUFHLE9BQU8sQ0FBQztLQUNsQzs7O1dBRXdCLGtDQUFDLEdBQUcsRUFBRSxZQUFZLEVBQUUsT0FBTyxFQUFFO0FBQ3BELFVBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLEdBQUcsWUFBWSxDQUFDO0FBQ3ZDLFVBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLEdBQUcsT0FBTyxDQUFDO0tBQ3JDOzs7V0FFdUIsaUNBQUMsb0JBQW9CLEVBQUU7QUFDN0MsVUFBSSxDQUFDLG9CQUFvQixHQUFHLG9CQUFvQixDQUFDO0tBQ2xEOzs7V0FFZSx5QkFBQyxHQUFHLEVBQUU7QUFDcEIsYUFBTyxvQkFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxHQUFHLENBQUMsQ0FBQztLQUN2Qzs7O1dBRXdCLGtDQUFDLEdBQUcsRUFBRTtB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QUMxQyxnQkFBSyxvQkFBb0IsQ0FBQywrQkFBK0IsRUFDckQsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQ3ZCO0FBQ0QsbUNBQTJCLEVBQUUsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7T0FDL0QsQ0FBQztLQUNIOzs7U0FwS2tCLGlCQUFpQjs7O3FCQUFqQixpQkFBaUIiLCJmaWxlIjoibGliL3JlbW90ZS1kZWJ1Z2dlci1tZXNzYWdlLWhhbmRsZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbG9nIGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUnBjTWVzc2FnZUhhbmRsZXIge1xuICBjb25zdHJ1Y3RvciAoc3BlY2lhbEhhbmRsZXJzKSB7XG4gICAgdGhpcy5zZXRIYW5kbGVycygpO1xuICAgIHRoaXMuZXJyb3JIYW5kbGVycyA9IHt9O1xuICAgIHRoaXMuc3BlY2lhbEhhbmRsZXJzID0gXy5jbG9uZShzcGVjaWFsSGFuZGxlcnMpO1xuICAgIHRoaXMuZGF0YUhhbmRsZXJzID0ge307XG4gICAgdGhpcy53aWxsTmF2aWdhdGVXaXRob3V0UmVsb2FkID0gZmFsc2U7XG4gIH1cblxuICBzZXREYXRhTWVzc2FnZUhhbmRsZXIgKGtleSwgZXJyb3JIYW5kbGVyLCBoYW5kbGVyKSB7XG4gICAgdGhpcy5lcnJvckhhbmRsZXJzW2tleV0gPSBlcnJvckhhbmRsZXI7XG4gICAgdGhpcy5kYXRhSGFuZGxlcnNba2V5XSA9IGhhbmRsZXI7XG4gIH1cblxuICBzZXRTcGVjaWFsTWVzc2FnZUhhbmRsZXIgKGtleSwgZXJyb3JIYW5kbGVyLCBoYW5kbGVyKSB7XG4gICAgdGhpcy5lcnJvckhhbmRsZXJzW2tleV0gPSBlcnJvckhhbmRsZXI7XG4gICAgdGhpcy5zcGVjaWFsSGFuZGxlcnNba2V5XSA9IGhhbmRsZXI7XG4gIH1cblxuICBzZXRUaW1lbGluZUV2ZW50SGFuZGxlciAodGltZWxpbmVFdmVudEhhbmRsZXIpIHtcbiAgICB0aGlzLnRpbWVsaW5lRXZlbnRIYW5kbGVyID0gdGltZWxpbmVFdmVudEhhbmRsZXI7XG4gIH1cblxuICBoYXNFcnJvckhhbmRsZXIgKGtleSkge1xuICAgIHJldHVybiBfLmhhcyh0aGlzLmVycm9ySGFuZGxlcnMsIGtleSk7XG4gIH1cblxuICBoYXNTcGVjaWFsTWVzc2FnZUhhbmRsZXIgKGtleSkge1xuICAgIHJldHVybiBfLmhhcyh0aGlzLnNwZWNpYWxIYW5kbGVycywga2V5KTtcbiAgfVxuXG4gIGFsbG93TmF2aWdhdGlvbldpdGhvdXRSZWxvYWQgKGFsbG93ID0gdHJ1ZSkge1xuICAgIHRoaXMud2lsbE5hdmlnYXRlV2l0aG91dFJlbG9hZCA9IGFsbG93O1xuICB9XG5cbiAgaGFuZGxlTWVzc2FnZSAocGxpc3QpIHtcbiAgICBsZXQgaGFuZGxlckZvciA9IHBsaXN0Ll9fc2VsZWN0b3I7XG4gICAgaWYgKCFoYW5kbGVyRm9yKSB7XG4gICAgICBsb2cuZGVidWcoJ0dvdCBhbiBpbnZhbGlkIHBsaXN0Jyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKF8uaGFzKHRoaXMuaGFuZGxlcnMsIGhhbmRsZXJGb3IpKSB7XG4gICAgICB0aGlzLmhhbmRsZXJzW2hhbmRsZXJGb3JdKHBsaXN0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9nLmRlYnVnKGBEZWJ1Z2dlciBnb3QgYSBtZXNzYWdlIGZvciAnJHtoYW5kbGVyRm9yfScgYW5kIGhhdmUgbm8gYCArXG4gICAgICAgICAgICAgICAgYGhhbmRsZXIsIGRvaW5nIG5vdGhpbmcuYCk7XG4gICAgfVxuICB9XG5cbiAgaGFuZGxlU3BlY2lhbE1lc3NhZ2UgKGhhbmRsZXIsIC4uLmFyZ3MpIHtcbiAgICBsZXQgZm4gPSB0aGlzLnNwZWNpYWxIYW5kbGVyc1toYW5kbGVyXTtcbiAgICBpZiAoZm4pIHtcbiAgICAgIC8vIG1vc3QgcmVzcG9uc2VzIGFyZSBvbmx5IHRvIGJlIGNhbGxlZCBvbmNlLCB0aGVuXG4gICAgICAvLyByZW1vdmVkLiBCdXQgbm90IHRoZSBvbmVzIGJlbG93LCB3aGljaCBoYW5kbGVcbiAgICAgIC8vIHBhZ2UgY2hhbmdlIGFuZCBhcHAgY29ubmVjdC9kaXNjb25uZWN0XG4gICAgICBpZiAoaGFuZGxlciAhPT0gJ19ycGNfZm9yd2FyZEdldExpc3Rpbmc6JyAmJlxuICAgICAgICAgIGhhbmRsZXIgIT09ICdfcnBjX2FwcGxpY2F0aW9uRGlzY29ubmVjdGVkOicgJiZcbiAgICAgICAgICBoYW5kbGVyICE9PSAnX3JwY19hcHBsaWNhdGlvbkNvbm5lY3RlZDonKSB7XG4gICAgICAgIHRoaXMuc3BlY2lhbEhhbmRsZXJzW2hhbmRsZXJdID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIGZuKC4uLmFyZ3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2cud2FybihgVHJpZWQgdG8gYWNjZXNzIHNwZWNpYWwgbWVzc2FnZSBoYW5kbGVyICcke2hhbmRsZXJ9JyBgICtcbiAgICAgICAgICAgICAgIGBidXQgbm9uZSB3YXMgZm91bmRgKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBoYW5kbGVEYXRhTWVzc2FnZSAocGxpc3QpIHtcbiAgICBsZXQgZGF0YUtleSA9IEpTT04ucGFyc2UocGxpc3QuX19hcmd1bWVudC5XSVJNZXNzYWdlRGF0YUtleS50b1N0cmluZygndXRmOCcpKTtcbiAgICBsZXQgbXNnSWQgPSBkYXRhS2V5LmlkO1xuICAgIGxldCByZXN1bHQgPSBkYXRhS2V5LnJlc3VsdDtcbiAgICBsZXQgZXJyb3IgPSBkYXRhS2V5LmVycm9yIHx8IG51bGw7XG5cbiAgICAvLyB3ZSBjYW4gZ2V0IGFuIGVycm9yLCBvciB3ZSBjYW4gZ2V0IGEgcmVzcG9uc2UgdGhhdCBpcyBhbiBlcnJvclxuICAgIGlmIChyZXN1bHQgJiYgcmVzdWx0Lndhc1Rocm93bikge1xuICAgICAgbGV0IG1lc3NhZ2UgPSByZXN1bHQucmVzdWx0LnZhbHVlIHx8IHJlc3VsdC5yZXN1bHQuZGVzY3JpcHRpb247XG4gICAgICBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICB9XG5cbiAgICBpZiAoIV8uaXNOdWxsKG1zZ0lkKSAmJiAhXy5pc1VuZGVmaW5lZChtc2dJZCkpIHtcbiAgICAgIG1zZ0lkID0gbXNnSWQudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgaWYgKGVycm9yKSB7XG4gICAgICBpZiAodGhpcy5oYXNFcnJvckhhbmRsZXIobXNnSWQpKSB7XG4gICAgICAgIHRoaXMuZXJyb3JIYW5kbGVyc1ttc2dJZF0oZXJyb3IpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG9nLmVycm9yKGBFcnJvciBvY2N1cnJlZCBpbiBoYW5kbGluZyBkYXRhIG1lc3NhZ2U6ICR7ZXJyb3J9YCk7XG4gICAgICAgIGxvZy5lcnJvcignTm8gZXJyb3IgaGFuZGxlciBwcmVzZW50LCBpZ25vcmluZycpO1xuICAgICAgfVxuXG4gICAgICAvLyBzaG9ydCBjaXJjdWl0XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGRhdGFLZXkubWV0aG9kID09PSAnUHJvZmlsZXIucmVzZXRQcm9maWxlcycpIHtcbiAgICAgIGxvZy5kZWJ1ZygnRGV2aWNlIGlzIHRlbGxpbmcgdXMgdG8gcmVzZXQgcHJvZmlsZXMuIFNob3VsZCBwcm9iYWJseSAnICtcbiAgICAgICAgICAgICAgICAnZG8gc29tZSBraW5kIG9mIGNhbGxiYWNrIGhlcmUnKTtcbiAgICB9IGVsc2UgaWYgKGRhdGFLZXkubWV0aG9kID09PSAnUGFnZS5mcmFtZU5hdmlnYXRlZCcpIHtcbiAgICAgIGlmICghdGhpcy53aWxsTmF2aWdhdGVXaXRob3V0UmVsb2FkICYmICF0aGlzLnBhZ2VMb2FkaW5nKSB7XG4gICAgICAgIGxvZy5kZWJ1ZygnRnJhbWUgbmF2aWdhdGVkLCB1bmxvYWRpbmcgcGFnZScpO1xuICAgICAgICB0aGlzLnNwZWNpYWxIYW5kbGVyc1snUGFnZS5mcmFtZU5hdmlnYXRlZCddKCdyZW1vdGUtZGVidWdnZXInKTtcbiAgICAgICAgdGhpcy5zcGVjaWFsSGFuZGxlcnNbJ1BhZ2UuZnJhbWVOYXZpZ2F0ZWQnXSA9IG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsb2cuZGVidWcoJ0ZyYW1lIG5hdmlnYXRlZCBidXQgd2Ugd2VyZSB3YXJuZWQgYWJvdXQgaXQsIG5vdCAnICtcbiAgICAgICAgICAgICAgICAgICdjb25zaWRlcmluZyBwYWdlIHN0YXRlIHVubG9hZGVkJyk7XG4gICAgICAgIHRoaXMud2lsbE5hdmlnYXRlV2l0aG91dFJlbG9hZCA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZGF0YUtleS5tZXRob2QgPT09ICdQYWdlLmxvYWRFdmVudEZpcmVkJykge1xuICAgICAgYXdhaXQgdGhpcy5wYWdlTG9hZCgpO1xuICAgIH0gZWxzZSBpZiAoZGF0YUtleS5tZXRob2QgPT09ICdUaW1lbGluZS5ldmVudFJlY29yZGVkJykge1xuICAgICAgdGhpcy50aW1lbGluZUV2ZW50SGFuZGxlcihkYXRhS2V5LnBhcmFtcy5yZWNvcmQpO1xuICAgIH0gZWxzZSBpZiAoXy5pc0Z1bmN0aW9uKHRoaXMuZGF0YUhhbmRsZXJzW21zZ0lkXSkpIHtcbiAgICAgIGxvZy5kZWJ1ZygnRm91bmQgZGF0YSBoYW5kbGVyIGZvciByZXNwb25zZScpO1xuICAgICAgLy8gd2Ugd2lsbCBlaXRoZXIgZ2V0IGJhY2sgYSByZXN1bHQgb2JqZWN0IHRoYXQgaGFzIGEgcmVzdWx0LnZhbHVlXG4gICAgICAvLyBpbiB3aGljaCBjYXNlIHRoYXQgaXMgd2hhdCB3ZSB3YW50LFxuICAgICAgLy8gb3IgZWxzZSB3ZSByZXR1cm4gdGhlIHdob2xlIHRoaW5nXG4gICAgICBpZiAocmVzdWx0LnJlc3VsdCAmJiByZXN1bHQucmVzdWx0LnZhbHVlKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdC5yZXN1bHQudmFsdWU7XG4gICAgICB9XG4gICAgICB0aGlzLmRhdGFIYW5kbGVyc1ttc2dJZF0ocmVzdWx0KTtcbiAgICAgIHRoaXMuZGF0YUhhbmRsZXJzW21zZ0lkXSA9IG51bGw7XG4gICAgfSBlbHNlIGlmICh0aGlzLmRhdGFIYW5kbGVyc1ttc2dJZF0gPT09IG51bGwpIHtcbiAgICAgIGxvZy5lcnJvcihgRGVidWdnZXIgcmV0dXJuZWQgZGF0YSBmb3IgbWVzc2FnZSAke21zZ0lkfSBgICtcbiAgICAgICAgICAgICAgICBgYnV0IHdlIGFscmVhZHkgcmFuIHRoYXQgY2FsbGJhY2shIFdURj8/YCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghbXNnSWQgJiYgIXJlc3VsdCAmJiAhZXJyb3IpIHtcbiAgICAgICAgbG9nLmRlYnVnKCdHb3QgYSBibGFuayBkYXRhIHJlc3BvbnNlIGZyb20gZGVidWdnZXInKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvZy5lcnJvcihgRGVidWdnZXIgcmV0dXJuZWQgZGF0YSBmb3IgbWVzc2FnZSAke21zZ0lkfSBgICtcbiAgICAgICAgICAgICAgICAgIGBidXQgd2Ugd2VyZSBub3Qgd2FpdGluZyBmb3IgdGhhdCBtZXNzYWdlISBgICtcbiAgICAgICAgICAgICAgICAgIGByZXN1bHQ6ICR7SlNPTi5zdHJpbmdpZnkocmVzdWx0KX07IGAgK1xuICAgICAgICAgICAgICAgICAgYGVycm9yOiAke2Vycm9yfWApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHNldEhhbmRsZXJzICgpIHtcbiAgICB0aGlzLmhhbmRsZXJzID0ge1xuICAgICAgJ19ycGNfcmVwb3J0U2V0dXA6JzogKHBsaXN0KSA9PiB7XG4gICAgICAgIHRoaXMuaGFuZGxlU3BlY2lhbE1lc3NhZ2UoJ19ycGNfcmVwb3J0SWRlbnRpZmllcjonLFxuICAgICAgICAgICAgcGxpc3QuX19hcmd1bWVudC5XSVJTaW11bGF0b3JOYW1lS2V5LFxuICAgICAgICAgICAgcGxpc3QuX19hcmd1bWVudC5XSVJTaW11bGF0b3JCdWlsZEtleSxcbiAgICAgICAgICAgIHBsaXN0Ll9fYXJndW1lbnQuV0lSU2ltdWxhdG9yUHJvZHVjdFZlcnNpb25LZXkpO1xuICAgICAgfSxcbiAgICAgICdfcnBjX3JlcG9ydENvbm5lY3RlZEFwcGxpY2F0aW9uTGlzdDonOiAocGxpc3QpID0+IHtcbiAgICAgICAgdGhpcy5oYW5kbGVTcGVjaWFsTWVzc2FnZSgnX3JwY19yZXBvcnRDb25uZWN0ZWRBcHBsaWNhdGlvbkxpc3Q6JyxcbiAgICAgICAgICAgIHBsaXN0Ll9fYXJndW1lbnQuV0lSQXBwbGljYXRpb25EaWN0aW9uYXJ5S2V5KTtcbiAgICAgIH0sXG4gICAgICAnX3JwY19hcHBsaWNhdGlvblNlbnRMaXN0aW5nOic6IChwbGlzdCkgPT4ge1xuICAgICAgICB0aGlzLmhhbmRsZVNwZWNpYWxNZXNzYWdlKCdfcnBjX2ZvcndhcmRHZXRMaXN0aW5nOicsXG4gICAgICAgICAgICBwbGlzdC5fX2FyZ3VtZW50LldJUkFwcGxpY2F0aW9uSWRlbnRpZmllcktleSxcbiAgICAgICAgICAgIHBsaXN0Ll9fYXJndW1lbnQuV0lSTGlzdGluZ0tleSk7XG4gICAgICB9LFxuICAgICAgJ19ycGNfYXBwbGljYXRpb25Db25uZWN0ZWQ6JzogKHBsaXN0KSA9PiB7XG4gICAgICAgIHRoaXMuaGFuZGxlU3BlY2lhbE1lc3NhZ2UoJ19ycGNfYXBwbGljYXRpb25Db25uZWN0ZWQ6JyxcbiAgICAgICAgICAgIHBsaXN0Ll9fYXJndW1lbnQpO1xuICAgICAgfSxcbiAgICAgICdfcnBjX2FwcGxpY2F0aW9uRGlzY29ubmVjdGVkOic6IChwbGlzdCkgPT4ge1xuICAgICAgICB0aGlzLmhhbmRsZVNwZWNpYWxNZXNzYWdlKCdfcnBjX2FwcGxpY2F0aW9uRGlzY29ubmVjdGVkOicsXG4gICAgICAgICAgICBwbGlzdC5fX2FyZ3VtZW50KTtcbiAgICAgIH0sXG4gICAgICAnX3JwY19hcHBsaWNhdGlvblNlbnREYXRhOic6IHRoaXMuaGFuZGxlRGF0YU1lc3NhZ2UuYmluZCh0aGlzKSxcbiAgICB9O1xuICB9XG59XG4iXX0=