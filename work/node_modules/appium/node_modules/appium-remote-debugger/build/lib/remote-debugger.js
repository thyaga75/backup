require('source-map-support').install();

'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _events = require('events');

var _events2 = _interopRequireDefault(_events);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _mobileJsonWireProtocol = require('mobile-json-wire-protocol');

var _remoteDebuggerRpcClient = require('./remote-debugger-rpc-client');

var _remoteDebuggerRpcClient2 = _interopRequireDefault(_remoteDebuggerRpcClient);

var _messageHandlers = require('./message-handlers');

var _messageHandlers2 = _interopRequireDefault(_messageHandlers);

var _helpers = require('./helpers');

var _appiumSupport = require('appium-support');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var DEBUGGER_TYPES = {
  webkit: 1,
  webinspector: 2
};
var SELECT_APP_RETRIES = 20;
var REMOTE_DEBUGGER_PORT = 27753;

var RemoteDebugger = (function (_events$EventEmitter) {
  _inherits(RemoteDebugger, _events$EventEmitter);

  /*
   * The constructor takes an opts hash with the following properties:
   *   - bundleId - id of the app being connected to
   *   - platformVersion - version of iOS
   *   - debuggerType - one of the DEBUGGER_TYPES
   *   - useNewSafari - for web inspector, whether this is a new Safari instance
   *   - pageLoadMs - the time, in ms, that should be waited for page loading
   *   - host - the remote debugger's host address
   *   - port - the remote debugger port through which to communicate
   */

  function RemoteDebugger() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, RemoteDebugger);

    _get(Object.getPrototypeOf(RemoteDebugger.prototype), 'constructor', this).call(this);

    var bundleId = opts.bundleId;
    var platformVersion = opts.platformVersion;
    var debuggerType = opts.debuggerType;
    var useNewSafari = opts.useNewSafari;
    var pageLoadMs = opts.pageLoadMs;
    var host = opts.host;
    var port = opts.port;

    this.bundleId = bundleId;
    this.platformVersion = platformVersion;
    this.debuggerType = debuggerType || DEBUGGER_TYPES.webinspector;
    if (this.debuggerType === DEBUGGER_TYPES.webinspector) {
      this.useNewSafari = useNewSafari || false;
      this.pageLoadMs = pageLoadMs;
      _logger2['default'].debug('useNewSafari --> ' + this.useNewSafari);
    }

    // app handling configuration
    this.appDict = {};
    this.appIdKey = null;
    this.pageIdKey = null;
    this.pageLoading = false;

    // set up the special callbacks for handling rd events
    this.specialCbs = {
      '_rpc_reportIdentifier:': _lodash2['default'].noop,
      '_rpc_forwardGetListing:': _lodash2['default'].noop,
      '_rpc_reportConnectedApplicationList:': _lodash2['default'].noop,
      '_rpc_applicationConnected:': this.onAppConnect.bind(this),
      '_rpc_applicationDisconnected:': this.onAppDisconnect.bind(this)
    };

    this.host = host || 'localhost';
    this.port = port || REMOTE_DEBUGGER_PORT;
    this.rpcClient = null;
  }

  // event emitted publically

  _createClass(RemoteDebugger, [{
    key: 'connect',
    value: function connect() {
      var appInfo;
      return _regeneratorRuntime.async(function connect$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            // initialize the rpc client for
            this.rpcClient = new _remoteDebuggerRpcClient2['default'](this.host, this.port, this.specialCbs);
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.rpcClient.connect());

          case 3:
            context$2$0.prev = 3;
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(this.setConnectionKey());

          case 6:
            appInfo = context$2$0.sent;

            _logger2['default'].debug('Connected to application');
            return context$2$0.abrupt('return', appInfo);

          case 11:
            context$2$0.prev = 11;
            context$2$0.t0 = context$2$0['catch'](3);
            context$2$0.next = 15;
            return _regeneratorRuntime.awrap(this.disconnect());

          case 15:
            return context$2$0.abrupt('return', null);

          case 16:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[3, 11]]);
    }
  }, {
    key: 'disconnect',
    value: function disconnect() {
      return _regeneratorRuntime.async(function disconnect$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.rpcClient.disconnect());

          case 2:
            this.emit(RemoteDebugger.EVENT_DISCONNECT, true);

          case 3:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'isConnected',
    value: function isConnected() {
      return !!(this.rpcClient && this.rpcClient.isConnected());
    }
  }, {
    key: 'logApplicationDictionary',
    value: function logApplicationDictionary(apps) {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = _getIterator(_lodash2['default'].toPairs(apps)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _step$value = _slicedToArray(_step.value, 2);

          var app = _step$value[0];
          var info = _step$value[1];

          _logger2['default'].debug('Application: \'' + app + '\'');
          var _iteratorNormalCompletion2 = true;
          var _didIteratorError2 = false;
          var _iteratorError2 = undefined;

          try {
            for (var _iterator2 = _getIterator(_lodash2['default'].toPairs(info)), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
              var _step2$value = _slicedToArray(_step2.value, 2);

              var key = _step2$value[0];
              var value = _step2$value[1];

              _logger2['default'].debug('    ' + key + ': \'' + value + '\'');
            }
          } catch (err) {
            _didIteratorError2 = true;
            _iteratorError2 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion2 && _iterator2['return']) {
                _iterator2['return']();
              }
            } finally {
              if (_didIteratorError2) {
                throw _iteratorError2;
              }
            }
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator['return']) {
            _iterator['return']();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
  }, {
    key: 'setConnectionKey',
    value: function setConnectionKey() {
      return _regeneratorRuntime.async(function setConnectionKey$(context$2$0) {
        var _this2 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(new _bluebird2['default'](function callee$2$0(resolve, reject) {
              var connectCb, _ref, _ref2, simNameKey, simBuildKey, simPlatformVersion;

              return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                var _this = this;

                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    connectCb = function connectCb(apps) {
                      if (_lodash2['default'].isUndefined(apps) || _lodash2['default'].keys(apps).length === 0) {
                        var msg = 'Received no apps from remote debugger. Unable to connect.';
                        _logger2['default'].debug(msg);
                        return resolve(_this.appDict);
                      }
                      var newDict = {};

                      // translate the received information into an easier-to-manage
                      // hash with app id as key, and app info as value
                      var _iteratorNormalCompletion3 = true;
                      var _didIteratorError3 = false;
                      var _iteratorError3 = undefined;

                      try {
                        for (var _iterator3 = _getIterator(_lodash2['default'].values(apps)), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                          var dict = _step3.value;

                          var _appInfoFromDict = (0, _helpers.appInfoFromDict)(dict);

                          var _appInfoFromDict2 = _slicedToArray(_appInfoFromDict, 2);

                          var id = _appInfoFromDict2[0];
                          var entry = _appInfoFromDict2[1];

                          newDict[id] = entry;
                        }
                        // update the object's list of apps, and return it through the promise
                      } catch (err) {
                        _didIteratorError3 = true;
                        _iteratorError3 = err;
                      } finally {
                        try {
                          if (!_iteratorNormalCompletion3 && _iterator3['return']) {
                            _iterator3['return']();
                          }
                        } finally {
                          if (_didIteratorError3) {
                            throw _iteratorError3;
                          }
                        }
                      }

                      _lodash2['default'].defaults(_this.appDict, newDict);
                      resolve(newDict);
                    };

                    this.rpcClient.setSpecialMessageHandler('_rpc_reportConnectedApplicationList:', reject, connectCb);

                    _logger2['default'].debug('Sending connection key request');
                    context$3$0.next = 5;
                    return _regeneratorRuntime.awrap(this.rpcClient.send('setConnectionKey'));

                  case 5:
                    _ref = context$3$0.sent;
                    _ref2 = _slicedToArray(_ref, 3);
                    simNameKey = _ref2[0];
                    simBuildKey = _ref2[1];
                    simPlatformVersion = _ref2[2];

                    _logger2['default'].debug('Sim name: ' + simNameKey);
                    _logger2['default'].debug('Sim build: ' + simBuildKey);
                    _logger2['default'].debug('Sim platform version: ' + simPlatformVersion);

                  case 13:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this2);
            }));

          case 2:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 3:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'updateAppsWithDict',
    value: function updateAppsWithDict(dict) {
      // get the dictionary entry into a nice form, and add it to the
      // application dictionary
      this.appDict = this.appDict || {};

      var _appInfoFromDict3 = (0, _helpers.appInfoFromDict)(dict);

      var _appInfoFromDict32 = _slicedToArray(_appInfoFromDict3, 2);

      var id = _appInfoFromDict32[0];
      var entry = _appInfoFromDict32[1];

      this.appDict[id] = entry;

      _logger2['default'].debug('Current applications available:');
      this.logApplicationDictionary(this.appDict);

      // try to get the app id from our connected apps
      this.appIdKey = (0, _helpers.getDebuggerAppKey)(this.bundleId, this.platformVersion, this.appDict);
    }
  }, {
    key: 'selectApp',
    value: function selectApp() {
      var currentUrl = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];
      var maxTries = arguments.length <= 1 || arguments[1] === undefined ? SELECT_APP_RETRIES : arguments[1];

      var pageDict, appIdKey, done, i, possibleAppIds, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, attemptedAppIdKey, _ref3, _ref32, found, pageArray;

      return _regeneratorRuntime.async(function selectApp$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug('Selecting application');

            if (!(!this.appDict || _lodash2['default'].keys(this.appDict).length === 0)) {
              context$2$0.next = 4;
              break;
            }

            _logger2['default'].debug('No applications currently connected.');
            return context$2$0.abrupt('return', []);

          case 4:
            pageDict = undefined, appIdKey = undefined;
            done = false;
            i = 0;

          case 7:
            if (!(i < maxTries)) {
              context$2$0.next = 65;
              break;
            }

            if (!done) {
              context$2$0.next = 10;
              break;
            }

            return context$2$0.abrupt('break', 65);

          case 10:
            possibleAppIds = (0, _helpers.getPossibleDebuggerAppKeys)(this.bundleId, this.platformVersion, this.appDict);

            _logger2['default'].debug('Trying out the possible app ids: ' + possibleAppIds.join(', '));
            _iteratorNormalCompletion4 = true;
            _didIteratorError4 = false;
            _iteratorError4 = undefined;
            context$2$0.prev = 15;
            _iterator4 = _getIterator(possibleAppIds);

          case 17:
            if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {
              context$2$0.next = 48;
              break;
            }

            attemptedAppIdKey = _step4.value;

            if (!done) {
              context$2$0.next = 21;
              break;
            }

            return context$2$0.abrupt('break', 48);

          case 21:
            context$2$0.prev = 21;

            _logger2['default'].debug('Selecting app ' + attemptedAppIdKey + ' (try #' + (i + 1) + ' of ' + maxTries + ')');
            context$2$0.next = 25;
            return _regeneratorRuntime.awrap(this.rpcClient.selectApp(attemptedAppIdKey, this.onAppConnect.bind(this)));

          case 25:
            _ref3 = context$2$0.sent;
            _ref32 = _slicedToArray(_ref3, 2);
            appIdKey = _ref32[0];
            pageDict = _ref32[1];

            if (!_lodash2['default'].isEmpty(pageDict)) {
              context$2$0.next = 32;
              break;
            }

            _logger2['default'].debug('Empty page dictionary received. Trying again.');
            // this.appIdKey = appIdKey;
            return context$2$0.abrupt('continue', 45);

          case 32:
            if (!currentUrl) {
              context$2$0.next = 39;
              break;
            }

            found = undefined;

            _lodash2['default'].each(pageDict, function (record) {
              if (record.WIRURLKey === currentUrl) {
                // this is the page we want
                found = true;
              }
            });

            if (found) {
              context$2$0.next = 39;
              break;
            }

            _logger2['default'].debug('Received app, but expected url (\'' + currentUrl + '\') was not found. Trying again.');
            // this.appIdKey = appIdKey;
            pageDict = null;
            return context$2$0.abrupt('continue', 45);

          case 39:

            // we have gotten the correct application by this point, so short circuit everything
            done = true;
            context$2$0.next = 45;
            break;

          case 42:
            context$2$0.prev = 42;
            context$2$0.t0 = context$2$0['catch'](21);

            _logger2['default'].debug('Retrying connection');

          case 45:
            _iteratorNormalCompletion4 = true;
            context$2$0.next = 17;
            break;

          case 48:
            context$2$0.next = 54;
            break;

          case 50:
            context$2$0.prev = 50;
            context$2$0.t1 = context$2$0['catch'](15);
            _didIteratorError4 = true;
            _iteratorError4 = context$2$0.t1;

          case 54:
            context$2$0.prev = 54;
            context$2$0.prev = 55;

            if (!_iteratorNormalCompletion4 && _iterator4['return']) {
              _iterator4['return']();
            }

          case 57:
            context$2$0.prev = 57;

            if (!_didIteratorError4) {
              context$2$0.next = 60;
              break;
            }

            throw _iteratorError4;

          case 60:
            return context$2$0.finish(57);

          case 61:
            return context$2$0.finish(54);

          case 62:
            i++;
            context$2$0.next = 7;
            break;

          case 65:

            // if, after all this, we have no dictionary, we have failed
            if (!pageDict) {
              _logger2['default'].errorAndThrow('Could not connect to a valid app after ' + maxTries + ' tries.');
            }

            if (this.appIdKey !== appIdKey) {
              _logger2['default'].debug('Received altered app id, updating from \'' + this.appIdKey + '\' to \'' + appIdKey + '\'');
              this.appIdKey = appIdKey;
            }

            // set the callback for getting a listing to the page change callback
            this.rpcClient.setSpecialMessageHandler('_rpc_forwardGetListing:', null, this.onPageChange.bind(this));

            // translate the dictionary into a useful form, and return to sender
            pageArray = (0, _helpers.pageArrayFromDict)(pageDict);

            _logger2['default'].debug('Selecting app ' + this.appIdKey + ': ' + JSON.stringify(pageArray));
            return context$2$0.abrupt('return', pageArray);

          case 71:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[15, 50, 54, 62], [21, 42], [55,, 57, 61]]);
    }
  }, {
    key: 'selectPage',
    value: function selectPage(pageIdKey) {
      var skipReadyCheck = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
      var errors, ready;
      return _regeneratorRuntime.async(function selectPage$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            errors = (0, _helpers.checkParams)({ appIdKey: this.appIdKey });

            if (!errors) {
              context$2$0.next = 3;
              break;
            }

            throw new Error(errors);

          case 3:

            this.pageIdKey = pageIdKey;

            _logger2['default'].debug('Selecting page ' + pageIdKey + ' and forwarding socket setup');

            context$2$0.next = 7;
            return _regeneratorRuntime.awrap(this.rpcClient.send('setSenderKey', {
              appIdKey: this.appIdKey,
              pageIdKey: this.pageIdKey
            }));

          case 7:
            _logger2['default'].debug('Sender key set');

            context$2$0.next = 10;
            return _regeneratorRuntime.awrap(this.rpcClient.send('enablePage', {
              appIdKey: this.appIdKey,
              pageIdKey: this.pageIdKey,
              debuggerType: this.debuggerType
            }));

          case 10:
            _logger2['default'].debug('Enabled activity on page');

            // make sure everything is ready to go
            context$2$0.next = 13;
            return _regeneratorRuntime.awrap(this.checkPageIsReady());

          case 13:
            ready = context$2$0.sent;

            if (!(!skipReadyCheck && !ready)) {
              context$2$0.next = 17;
              break;
            }

            context$2$0.next = 17;
            return _regeneratorRuntime.awrap(this.pageUnload());

          case 17:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'executeAtom',
    value: function executeAtom(atom, args, frames) {
      var script, value;
      return _regeneratorRuntime.async(function executeAtom$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (this.rpcClient.connected) {
              context$2$0.next = 2;
              break;
            }

            throw new Error('Remote debugger is not connected');

          case 2:
            script = (0, _helpers.getScriptForAtom)(atom, args, frames);
            context$2$0.next = 5;
            return _regeneratorRuntime.awrap(this.execute(script, true));

          case 5:
            value = context$2$0.sent;

            _logger2['default'].debug('Received result for atom \'' + atom + '\' execution: ' + JSON.stringify(value));
            return context$2$0.abrupt('return', value);

          case 8:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'executeAtomAsync',
    value: function executeAtomAsync(atom, args, frames, responseUrl) {
      var asyncCallBack, script;
      return _regeneratorRuntime.async(function executeAtomAsync$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            asyncCallBack = 'function (res) { xmlHttp = new XMLHttpRequest(); ' + ('xmlHttp.open(\'POST\', \'' + responseUrl + '\', true);') + 'xmlHttp.setRequestHeader(\'Content-type\',\'application/json\'); ' + 'xmlHttp.send(res); }';
            script = (0, _helpers.getScriptForAtom)(atom, args, frames, asyncCallBack);
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.execute(script));

          case 4:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'pageLoad',
    value: function pageLoad(startPageLoadMs) {
      var timeoutMs, start, verify;
      return _regeneratorRuntime.async(function pageLoad$(context$2$0) {
        var _this3 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            timeoutMs = 500;
            start = startPageLoadMs || Date.now();

            _logger2['default'].debug('Page loaded, verifying whether ready');

            verify = function verify() {
              var ready;
              return _regeneratorRuntime.async(function verify$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    this.pageLoadDelay = _appiumSupport.util.cancellableDelay(timeoutMs);
                    context$3$0.prev = 1;
                    context$3$0.next = 4;
                    return _regeneratorRuntime.awrap(this.pageLoadDelay);

                  case 4:
                    context$3$0.next = 10;
                    break;

                  case 6:
                    context$3$0.prev = 6;
                    context$3$0.t0 = context$3$0['catch'](1);

                    if (!(context$3$0.t0 instanceof _bluebird2['default'].CancellationError)) {
                      context$3$0.next = 10;
                      break;
                    }

                    return context$3$0.abrupt('return');

                  case 10:
                    context$3$0.next = 12;
                    return _regeneratorRuntime.awrap(this.checkPageIsReady());

                  case 12:
                    ready = context$3$0.sent;

                    if (!(ready || this.pageLoadMs > 0 && start + this.pageLoadMs < Date.now())) {
                      context$3$0.next = 18;
                      break;
                    }

                    _logger2['default'].debug('Page is ready');
                    this.pageLoading = false;
                    context$3$0.next = 21;
                    break;

                  case 18:
                    _logger2['default'].debug('Page was not ready, retrying');
                    context$3$0.next = 21;
                    return _regeneratorRuntime.awrap(verify());

                  case 21:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this3, [[1, 6]]);
            };

            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(verify());

          case 6:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'cancelPageLoad',
    value: function cancelPageLoad() {
      return _regeneratorRuntime.async(function cancelPageLoad$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug('Unregistering from page readiness notifications');
            this.pageLoading = false;
            if (this.pageLoadDelay) {
              this.pageLoadDelay.cancel();
            }

          case 3:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'pageUnload',
    value: function pageUnload() {
      return _regeneratorRuntime.async(function pageUnload$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug('Page unloading');
            this.pageLoading = true;
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.waitForDom());

          case 4:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'waitForDom',
    value: function waitForDom(startPageLoadMs) {
      return _regeneratorRuntime.async(function waitForDom$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug('Waiting for dom...');
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.pageLoad(startPageLoadMs));

          case 3:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'checkPageIsReady',
    value: function checkPageIsReady() {
      var readyCmd, readyState;
      return _regeneratorRuntime.async(function checkPageIsReady$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug('Checking document readyState');
            readyCmd = '(function (){ return document.readyState; })()';
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.execute(readyCmd, true));

          case 4:
            readyState = context$2$0.sent;

            _logger2['default'].debug('readyState was ' + JSON.stringify(readyState));

            return context$2$0.abrupt('return', readyState === 'complete');

          case 7:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'navToUrl',
    value: function navToUrl(url) {
      var _errors;

      return _regeneratorRuntime.async(function navToUrl$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!(this.debuggerType === DEBUGGER_TYPES.webinspector)) {
              context$2$0.next = 4;
              break;
            }

            _errors = (0, _helpers.checkParams)({ appIdKey: this.appIdKey, pageIdKey: this.pageIdKey });

            if (!_errors) {
              context$2$0.next = 4;
              break;
            }

            throw new Error(_errors);

          case 4:

            _logger2['default'].debug('Navigating to new URL: ' + url);
            context$2$0.next = 7;
            return _regeneratorRuntime.awrap(this.rpcClient.send('setUrl', {
              url: url,
              appIdKey: this.appIdKey,
              pageIdKey: this.pageIdKey,
              debuggerType: this.debuggerType
            }));

          case 7:
            if (this.useNewSafari) {
              context$2$0.next = 10;
              break;
            }

            context$2$0.next = 10;
            return _regeneratorRuntime.awrap(_bluebird2['default'].delay(1000));

          case 10:
            if (!(this.debuggerType === DEBUGGER_TYPES.webinspector)) {
              context$2$0.next = 13;
              break;
            }

            context$2$0.next = 13;
            return _regeneratorRuntime.awrap(this.waitForFrameNavigated());

          case 13:
            context$2$0.next = 15;
            return _regeneratorRuntime.awrap(this.waitForDom(Date.now()));

          case 15:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'waitForFrameNavigated',
    value: function waitForFrameNavigated() {
      return _regeneratorRuntime.async(function waitForFrameNavigated$(context$2$0) {
        var _this5 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            return context$2$0.abrupt('return', new _bluebird2['default'](function callee$2$0(resolve, reject) {
              var startMs, navEventListener, timeout;
              return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                var _this4 = this;

                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    _logger2['default'].debug('Waiting for frame navigated message...');
                    startMs = Date.now();

                    navEventListener = function navEventListener(value) {
                      _logger2['default'].debug('Frame navigated in ' + (Date.now() - startMs) / 1000 + ' sec from source: ' + value);
                      if (_this4.navigationDelay) {
                        _this4.navigationDelay.cancel();
                      }
                      resolve(value);
                    };

                    this.rpcClient.setSpecialMessageHandler('Page.frameNavigated', reject, navEventListener);

                    // timeout, in case remote debugger doesn't respond,
                    // or takes a long time

                    if (!(!this.useNewSafari || this.pageLoadMs >= 0)) {
                      context$3$0.next = 15;
                      break;
                    }

                    timeout = this.useNewSafari ? this.pageLoadMs : 500;

                    this.navigationDelay = _appiumSupport.util.cancellableDelay(timeout);
                    context$3$0.prev = 7;
                    context$3$0.next = 10;
                    return _regeneratorRuntime.awrap(this.navigationDelay);

                  case 10:
                    navEventListener('timeout');
                    context$3$0.next = 15;
                    break;

                  case 13:
                    context$3$0.prev = 13;
                    context$3$0.t0 = context$3$0['catch'](7);

                  case 15:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this5, [[7, 13]]);
            }));

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'startTimeline',

    // nothing to do: we only get here if the remote debugger
    // already notified of frame navigation, and the delay
    // was cancelled
    value: function startTimeline(fn) {
      return _regeneratorRuntime.async(function startTimeline$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug('Starting to record the timeline');
            this.rpcClient.setTimelineEventHandler(fn);
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.rpcClient.send('startTimeline', {
              appIdKey: this.appIdKey,
              pageIdKey: this.pageIdKey,
              debuggerType: this.debuggerType
            }));

          case 4:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 5:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'stopTimeline',
    value: function stopTimeline() {
      return _regeneratorRuntime.async(function stopTimeline$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug('Stopping to record the timeline');
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.rpcClient.send('stopTimeline', {
              appIdKey: this.appIdKey,
              pageIdKey: this.pageIdKey,
              debuggerType: this.debuggerType
            }));

          case 3:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'execute',
    value: function execute(command, override) {
      var _errors2, res;

      return _regeneratorRuntime.async(function execute$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!(this.pageLoading && !override)) {
              context$2$0.next = 4;
              break;
            }

            _logger2['default'].debug('Trying to execute but page is not loaded.');
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.waitForDom());

          case 4:
            if (!(this.debuggerType === DEBUGGER_TYPES.webinspector)) {
              context$2$0.next = 8;
              break;
            }

            _errors2 = (0, _helpers.checkParams)({ appIdKey: this.appIdKey, pageIdKey: this.pageIdKey });

            if (!_errors2) {
              context$2$0.next = 8;
              break;
            }

            throw new Error(_errors2);

          case 8:

            _logger2['default'].debug('Sending javascript command ' + _lodash2['default'].truncate(command, 50));
            context$2$0.next = 11;
            return _regeneratorRuntime.awrap(this.rpcClient.send('sendJSCommand', {
              command: command,
              appIdKey: this.appIdKey,
              pageIdKey: this.pageIdKey,
              debuggerType: this.debuggerType
            }));

          case 11:
            res = context$2$0.sent;
            return context$2$0.abrupt('return', this.convertResult(res));

          case 13:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'callFunction',
    value: function callFunction(objId, fn, args) {
      var errors, res;
      return _regeneratorRuntime.async(function callFunction$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            errors = (0, _helpers.checkParams)({ appIdKey: this.appIdKey, pageIdKey: this.pageIdKey });

            if (!errors) {
              context$2$0.next = 3;
              break;
            }

            throw new Error(errors);

          case 3:

            _logger2['default'].debug('Calling javascript function');
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(this.rpcClient.send('callJSFunction', {
              objId: objId,
              fn: fn,
              args: args,
              appIdKey: this.appIdKey,
              pageIdKey: this.pageIdKey,
              debuggerType: this.debuggerType
            }));

          case 6:
            res = context$2$0.sent;
            return context$2$0.abrupt('return', this.convertResult(res));

          case 8:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'convertResult',
    value: function convertResult(res) {
      if (_lodash2['default'].isUndefined(res)) {
        throw new Error('Did not get OK result from remote debugger. Result was: ' + JSON.stringify(res));
      } else if (_lodash2['default'].isString(res)) {
        try {
          res = JSON.parse(res);
        } catch (err) {
          // we might get a serialized object, but we might not
          // if we get here, it is just a value
        }
      } else if (!_lodash2['default'].isObject(res)) {
          throw new Error('Result has unexpected type: (' + typeof res + ').');
        }

      if (res.status && res.status !== 0) {
        // we got some form of error.
        var message = res.value.message || res.value;
        throw new _mobileJsonWireProtocol.errors.JavaScriptError(message + ' (status: ' + res.status + ')');
      }

      // with either have an object with a `value` property (even if `null`),
      // or a plain object
      return res.hasOwnProperty('value') ? res.value : res;
    }
  }, {
    key: 'allowNavigationWithoutReload',
    value: function allowNavigationWithoutReload() {
      var allow = arguments.length <= 0 || arguments[0] === undefined ? true : arguments[0];
      return _regeneratorRuntime.async(function allowNavigationWithoutReload$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            this.rpcClient.allowNavigationWithoutReload(allow);

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }]);

  return RemoteDebugger;
})(_events2['default'].EventEmitter);

RemoteDebugger.EVENT_PAGE_CHANGE = 'remote_debugger_page_change';
RemoteDebugger.EVENT_DISCONNECT = 'remote_debugger_disconnect';

// add generic callbacks
var _iteratorNormalCompletion5 = true;
var _didIteratorError5 = false;
var _iteratorError5 = undefined;

try {
  for (var _iterator5 = _getIterator(_lodash2['default'].toPairs(_messageHandlers2['default'])), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
    var _step5$value = _slicedToArray(_step5.value, 2);

    var _name = _step5$value[0];
    var handler = _step5$value[1];

    RemoteDebugger.prototype[_name] = handler;
  }
} catch (err) {
  _didIteratorError5 = true;
  _iteratorError5 = err;
} finally {
  try {
    if (!_iteratorNormalCompletion5 && _iterator5['return']) {
      _iterator5['return']();
    }
  } finally {
    if (_didIteratorError5) {
      throw _iteratorError5;
    }
  }
}

exports.RemoteDebugger = RemoteDebugger;
exports.DEBUGGER_TYPES = DEBUGGER_TYPES;
exports.REMOTE_DEBUGGER_PORT = REMOTE_DEBUGGER_PORT;

// get the connection information about the app

// only resolve when the connection response is received

// local callback, called when the remote debugger has established
// a connection to the app under test
// `app` will be an array of dictionaries of app information

// iterative solution, as recursion was swallowing the promise at some point

// in iOS 8.2 the connect logic happens, but with an empty dictionary
// which leads to the remote debugger getting disconnected, and into a loop

// if we are looking for a particular url, make sure this is the right page

// if the promise has been cancelled
// we want to skip checking the readiness

// if we are ready, or we've spend too much time on this

// no need to do this check when using webkit

// a small pause for the browser to catch up

// add a handler for the `Page.frameNavigated` message
// from the remote debugger

// use pageLoadMs, or a small amount of time

// if the page is not loaded yet, wait for it

// no need to check errors if it is webkit
//# sourceMappingURL=data:application/json;base64,