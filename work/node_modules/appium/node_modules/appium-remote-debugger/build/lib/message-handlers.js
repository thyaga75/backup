'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _remoteDebugger = require('./remote-debugger');

var _helpers = require('./helpers');

/*
 * Generic callbacks used throughout the lifecycle of the Remote Debugger.
 * These will be added to the prototype.
 */

function onPageChange(appIdKey, pageDict) {
  // only act if this is the correct app
  if (this.appIdKey === appIdKey) {
    _logger2['default'].debug('Page changed: ' + JSON.stringify(pageDict));
    this.emit(_remoteDebugger.RemoteDebugger.EVENT_PAGE_CHANGE, (0, _helpers.pageArrayFromDict)(pageDict));
  } else {
    _logger2['default'].debug('Received page change notice for app ' + appIdKey + ' ' + ('but listening for ' + this.appIdKey + '. Ignoring.'));
  }
}

function onAppConnect(dict) {
  var appIdKey = dict.WIRApplicationIdentifierKey;
  _logger2['default'].debug('Notified that a new application ' + appIdKey + ' has connected');

  this.updateAppsWithDict(dict);
}

function onAppDisconnect(dict) {
  var appIdKey = dict.WIRApplicationIdentifierKey;
  _logger2['default'].debug('Application ' + appIdKey + ' disconnected. Removing from app dictionary.');

  // get rid of the entry in our app dictionary,
  // since it is no longer available
  delete this.appDict[appIdKey];

  // if the disconnected app is the one we are connected to, try to find another
  if (this.appIdKey === appIdKey) {
    _logger2['default'].debug('No longer have app id. Attempting to find new one.');
    this.appIdKey = (0, _helpers.getDebuggerAppKey)(this.bundleId, this.platformVersion, this.appDict);
  }

  if (!this.appDict) {
    // this means we no longer have any apps. what the what?
    _logger2['default'].debug('Main app disconnected.');
    this.connected = false;
    this.emit(_remoteDebugger.RemoteDebugger.EVENT_DISCONNECT, true);
  }
}

var messageHandlers = {
  onPageChange: onPageChange,
  onAppConnect: onAppConnect,
  onAppDisconnect: onAppDisconnect
};

exports['default'] = messageHandlers;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9tZXNzYWdlLWhhbmRsZXJzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O3NCQUFnQixVQUFVOzs7OzhCQUNLLG1CQUFtQjs7dUJBQ0csV0FBVzs7Ozs7OztBQU9oRSxTQUFTLFlBQVksQ0FBRSxRQUFRLEVBQUUsUUFBUSxFQUFFOztBQUV6QyxNQUFJLElBQUksQ0FBQyxRQUFRLEtBQUssUUFBUSxFQUFFO0FBQzlCLHdCQUFJLEtBQUssb0JBQWtCLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUcsQ0FBQztBQUN2RCxRQUFJLENBQUMsSUFBSSxDQUFDLCtCQUFlLGlCQUFpQixFQUFFLGdDQUFrQixRQUFRLENBQUMsQ0FBQyxDQUFDO0dBQzFFLE1BQU07QUFDTCx3QkFBSSxLQUFLLENBQUMseUNBQXVDLFFBQVEsaUNBQzFCLElBQUksQ0FBQyxRQUFRLGlCQUFhLENBQUMsQ0FBQztHQUM1RDtDQUNGOztBQUVELFNBQVMsWUFBWSxDQUFFLElBQUksRUFBRTtBQUMzQixNQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsMkJBQTJCLENBQUM7QUFDaEQsc0JBQUksS0FBSyxzQ0FBb0MsUUFBUSxvQkFBaUIsQ0FBQzs7QUFFdkUsTUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDO0NBQy9COztBQUVELFNBQVMsZUFBZSxDQUFFLElBQUksRUFBRTtBQUM5QixNQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsMkJBQTJCLENBQUM7QUFDaEQsc0JBQUksS0FBSyxrQkFBZ0IsUUFBUSxrREFBK0MsQ0FBQzs7OztBQUlqRixTQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7OztBQUc5QixNQUFJLElBQUksQ0FBQyxRQUFRLEtBQUssUUFBUSxFQUFFO0FBQzlCLHdCQUFJLEtBQUssc0RBQXNELENBQUM7QUFDaEUsUUFBSSxDQUFDLFFBQVEsR0FBRyxnQ0FBa0IsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztHQUN0Rjs7QUFFRCxNQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRTs7QUFFakIsd0JBQUksS0FBSyxDQUFDLHdCQUF3QixDQUFDLENBQUM7QUFDcEMsUUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7QUFDdkIsUUFBSSxDQUFDLElBQUksQ0FBQywrQkFBZSxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsQ0FBQztHQUNsRDtDQUNGOztBQUVELElBQU0sZUFBZSxHQUFHO0FBQ3RCLGNBQVksRUFBWixZQUFZO0FBQ1osY0FBWSxFQUFaLFlBQVk7QUFDWixpQkFBZSxFQUFmLGVBQWU7Q0FDaEIsQ0FBQzs7cUJBRWEsZUFBZSIsImZpbGUiOiJsaWIvbWVzc2FnZS1oYW5kbGVycy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBsb2cgZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IHsgUmVtb3RlRGVidWdnZXIgfSBmcm9tICcuL3JlbW90ZS1kZWJ1Z2dlcic7XG5pbXBvcnQgeyBwYWdlQXJyYXlGcm9tRGljdCwgZ2V0RGVidWdnZXJBcHBLZXkgfSBmcm9tICcuL2hlbHBlcnMnO1xuXG4vKlxuICogR2VuZXJpYyBjYWxsYmFja3MgdXNlZCB0aHJvdWdob3V0IHRoZSBsaWZlY3ljbGUgb2YgdGhlIFJlbW90ZSBEZWJ1Z2dlci5cbiAqIFRoZXNlIHdpbGwgYmUgYWRkZWQgdG8gdGhlIHByb3RvdHlwZS5cbiAqL1xuXG5mdW5jdGlvbiBvblBhZ2VDaGFuZ2UgKGFwcElkS2V5LCBwYWdlRGljdCkge1xuICAvLyBvbmx5IGFjdCBpZiB0aGlzIGlzIHRoZSBjb3JyZWN0IGFwcFxuICBpZiAodGhpcy5hcHBJZEtleSA9PT0gYXBwSWRLZXkpIHtcbiAgICBsb2cuZGVidWcoYFBhZ2UgY2hhbmdlZDogJHtKU09OLnN0cmluZ2lmeShwYWdlRGljdCl9YCk7XG4gICAgdGhpcy5lbWl0KFJlbW90ZURlYnVnZ2VyLkVWRU5UX1BBR0VfQ0hBTkdFLCBwYWdlQXJyYXlGcm9tRGljdChwYWdlRGljdCkpO1xuICB9IGVsc2Uge1xuICAgIGxvZy5kZWJ1ZyhgUmVjZWl2ZWQgcGFnZSBjaGFuZ2Ugbm90aWNlIGZvciBhcHAgJHthcHBJZEtleX0gYCArXG4gICAgICAgICAgICAgIGBidXQgbGlzdGVuaW5nIGZvciAke3RoaXMuYXBwSWRLZXl9LiBJZ25vcmluZy5gKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBvbkFwcENvbm5lY3QgKGRpY3QpIHtcbiAgbGV0IGFwcElkS2V5ID0gZGljdC5XSVJBcHBsaWNhdGlvbklkZW50aWZpZXJLZXk7XG4gIGxvZy5kZWJ1ZyhgTm90aWZpZWQgdGhhdCBhIG5ldyBhcHBsaWNhdGlvbiAke2FwcElkS2V5fSBoYXMgY29ubmVjdGVkYCk7XG5cbiAgdGhpcy51cGRhdGVBcHBzV2l0aERpY3QoZGljdCk7XG59XG5cbmZ1bmN0aW9uIG9uQXBwRGlzY29ubmVjdCAoZGljdCkge1xuICBsZXQgYXBwSWRLZXkgPSBkaWN0LldJUkFwcGxpY2F0aW9uSWRlbnRpZmllcktleTtcbiAgbG9nLmRlYnVnKGBBcHBsaWNhdGlvbiAke2FwcElkS2V5fSBkaXNjb25uZWN0ZWQuIFJlbW92aW5nIGZyb20gYXBwIGRpY3Rpb25hcnkuYCk7XG5cbiAgLy8gZ2V0IHJpZCBvZiB0aGUgZW50cnkgaW4gb3VyIGFwcCBkaWN0aW9uYXJ5LFxuICAvLyBzaW5jZSBpdCBpcyBubyBsb25nZXIgYXZhaWxhYmxlXG4gIGRlbGV0ZSB0aGlzLmFwcERpY3RbYXBwSWRLZXldO1xuXG4gIC8vIGlmIHRoZSBkaXNjb25uZWN0ZWQgYXBwIGlzIHRoZSBvbmUgd2UgYXJlIGNvbm5lY3RlZCB0bywgdHJ5IHRvIGZpbmQgYW5vdGhlclxuICBpZiAodGhpcy5hcHBJZEtleSA9PT0gYXBwSWRLZXkpIHtcbiAgICBsb2cuZGVidWcoYE5vIGxvbmdlciBoYXZlIGFwcCBpZC4gQXR0ZW1wdGluZyB0byBmaW5kIG5ldyBvbmUuYCk7XG4gICAgdGhpcy5hcHBJZEtleSA9IGdldERlYnVnZ2VyQXBwS2V5KHRoaXMuYnVuZGxlSWQsIHRoaXMucGxhdGZvcm1WZXJzaW9uLCB0aGlzLmFwcERpY3QpO1xuICB9XG5cbiAgaWYgKCF0aGlzLmFwcERpY3QpIHtcbiAgICAvLyB0aGlzIG1lYW5zIHdlIG5vIGxvbmdlciBoYXZlIGFueSBhcHBzLiB3aGF0IHRoZSB3aGF0P1xuICAgIGxvZy5kZWJ1ZygnTWFpbiBhcHAgZGlzY29ubmVjdGVkLicpO1xuICAgIHRoaXMuY29ubmVjdGVkID0gZmFsc2U7XG4gICAgdGhpcy5lbWl0KFJlbW90ZURlYnVnZ2VyLkVWRU5UX0RJU0NPTk5FQ1QsIHRydWUpO1xuICB9XG59XG5cbmNvbnN0IG1lc3NhZ2VIYW5kbGVycyA9IHtcbiAgb25QYWdlQ2hhbmdlLFxuICBvbkFwcENvbm5lY3QsXG4gIG9uQXBwRGlzY29ubmVjdFxufTtcblxuZXhwb3J0IGRlZmF1bHQgbWVzc2FnZUhhbmRsZXJzO1xuIl19