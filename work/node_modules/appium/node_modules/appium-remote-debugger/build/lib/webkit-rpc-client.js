'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _remoteDebugger = require('./remote-debugger');

var _remoteMessages = require('./remote-messages');

var _remoteMessages2 = _interopRequireDefault(_remoteMessages);

var _ws = require('ws');

var _ws2 = _interopRequireDefault(_ws);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _events = require('events');

var _events2 = _interopRequireDefault(_events);

var WebKitRpcClient = (function (_events$EventEmitter) {
  _inherits(WebKitRpcClient, _events$EventEmitter);

  function WebKitRpcClient(host) {
    var port = arguments.length <= 1 || arguments[1] === undefined ? _remoteDebugger.REMOTE_DEBUGGER_PORT : arguments[1];

    _classCallCheck(this, WebKitRpcClient);

    _get(Object.getPrototypeOf(WebKitRpcClient.prototype), 'constructor', this).call(this);

    this.host = host;
    this.port = port;

    this.curMsgId = 0;

    this.dataHandlers = {};
    this.dataMethods = {};
    this.errorHandlers = {};

    this.setHandlers();
  }

  _createClass(WebKitRpcClient, [{
    key: 'connect',
    value: function connect(pageId) {
      return _regeneratorRuntime.async(function connect$(context$2$0) {
        var _this2 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            return context$2$0.abrupt('return', new _bluebird2['default'](function callee$2$0(resolve, reject) {
              var url;
              return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                var _this = this;

                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    url = 'ws://' + this.host + ':' + this.port + '/devtools/page/' + pageId;

                    this.pageIdKey = pageId;

                    // create and set up socket with appropriate event handlers
                    this.socket = new _ws2['default'](url);
                    this.socket.on('open', function () {
                      _logger2['default'].debug('WebKit debugger web socket connected to url: ' + url);
                      _this.connected = true;
                      resolve();
                    });
                    this.socket.on('close', function () {
                      _logger2['default'].debug('WebKit remote debugger socket disconnected');
                      _this.connected = false;
                    });
                    this.socket.on('error', function (exception) {
                      if (_this.connected) {
                        _logger2['default'].debug('WebKit debugger web socket error: ' + exception.message);
                        _this.connected = false;
                      }

                      reject(exception);
                    });
                    this.socket.on('message', this.receive.bind(this));

                  case 7:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this2);
            }));

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'disconnect',
    value: function disconnect() {
      _logger2['default'].debug('Disconnecting from WebKit remote debugger');
      if (this.isConnected()) {
        this.socket.close(1001);
      }
      this.connected = false;
    }
  }, {
    key: 'isConnected',
    value: function isConnected() {
      return this.socket !== null && this.connected;
    }
  }, {
    key: 'send',
    value: function send(command) {
      var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
      var data, id;
      return _regeneratorRuntime.async(function send$(context$2$0) {
        var _this3 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            data = (0, _remoteMessages2['default'])(command, _lodash2['default'].defaults({ connId: this.connId, senderId: this.senderId }, opts));

            _logger2['default'].debug('Sending WebKit data: ' + _lodash2['default'].truncate(JSON.stringify(data), 50));

            this.curMsgId++;
            data.id = this.curMsgId;

            id = this.curMsgId.toString();
            return context$2$0.abrupt('return', new _bluebird2['default'](function callee$2$0(resolve, reject) {
              return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    // only resolve the send command when WebKit returns a response
                    // store the handler and the data sent
                    this.dataHandlers[id] = resolve;
                    this.dataMethods[id] = data.method;
                    this.errorHandlers[id] = reject;

                    // send the data
                    data = JSON.stringify(data);
                    this.socket.send(data, function (error) {
                      if (!_lodash2['default'].isUndefined(error) && !_lodash2['default'].isNull(error)) {
                        _logger2['default'].debug('WebKit socket error occurred: ' + error);
                        reject(new Error(error));
                      }
                    });

                  case 5:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this3);
            }).then(function (res) {
              // no need to hold onto anything
              delete _this3.dataHandlers[id];
              delete _this3.dataMethods[id];
              delete _this3.errorHandlers[id];

              // and pass along the result
              return res;
            }));

          case 6:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'receive',
    value: function receive(data) {
      _logger2['default'].debug('Receiving WebKit data: ' + _lodash2['default'].truncate(data, 50));

      data = JSON.parse(data);

      // we can get an error, or we can get a response that is an error
      if (data.wasThrown) {
        var message = data.result.value || data.result.description;
        var error = new Error(message);
        if (data.id && this.errorHandlers[data.id]) {
          this.errorHandlers[data.id](error);
          return;
        } else {
          // this should never happen, but log at least
          _logger2['default'].errorAndThrow(error);
        }
      }

      // when sending we set a data method and associated callback.
      // get that, or the generic (automatically sent, not associated
      // with a particular request) method
      var handlerFor = undefined;
      if (data.id && this.dataMethods[data.id]) {
        _logger2['default'].debug('Found handler for message \'' + data.id + '\'');
        handlerFor = this.dataMethods[data.id];
      } else {
        _logger2['default'].debug('Did not find handler for message');
        handlerFor = data.method;
      }

      if (!handlerFor) {
        _logger2['default'].debug('Received an invalid method: ' + data.method);
        return;
      }
      if (_lodash2['default'].has(this.handlers, handlerFor)) {
        this.handlers[handlerFor](data);
      } else {
        _logger2['default'].debug('WebKit debugger got a message for \'' + handlerFor + '\' ' + 'and have no handler, doing nothing.');
      }
    }
  }, {
    key: 'setHandlers',
    value: function setHandlers() {
      var _this4 = this;

      this.handlers = {
        'Runtime.evaluate': function RuntimeEvaluate(data) {
          var msgId = data.id;
          if (data.error) {
            _this4.errorHandlers[msgId](data.error);
          }

          _this4.dataHandlers[msgId](data.result);
        },
        'Page.navigate': function PageNavigate(data) {
          _logger2['default'].debug('Received page navigated message: ' + JSON.stringify(data));
          var msgId = data.id;
          if (data.error) {
            _this4.errorHandlers[msgId](data.error);
          }

          _this4.dataHandlers[msgId](data.result);
        },
        'Profiler.resetProfiles': function ProfilerResetProfiles() {
          _logger2['default'].debug('Device is telling us to reset profiles. Should probably ' + 'do some kind of callback here');
        },
        'Timeline.eventRecorded': function TimelineEventRecorded(data) {
          _this4.timelineEventHandler(data.result);
        }
      };
    }
  }, {
    key: 'setTimelineEventHandler',
    value: function setTimelineEventHandler(timelineEventHandler) {
      this.timelineEventHandler = timelineEventHandler;
      this.messageHandler.setTimelineEventHandler(timelineEventHandler);
    }
  }]);

  return WebKitRpcClient;
})(_events2['default'].EventEmitter);

exports['default'] = WebKitRpcClient;
module.exports = exports['default'];

// we will only resolve this call when the socket is open
// WebKit url
//# sourceMappingURL=data:application/json;base64,