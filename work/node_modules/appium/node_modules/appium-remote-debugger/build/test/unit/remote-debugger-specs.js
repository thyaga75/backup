require('source-map-support').install();

'use strict';

var _toConsumableArray = require('babel-runtime/helpers/to-consumable-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this5 = this;

var _indexJs = require('../../index.js');

var _helpersRemoteDebuggerServer = require('../helpers/remote-debugger-server');

var _helpersServerSetup = require('../helpers/server-setup');

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('RemoteDebugger', function () {
  var rd = undefined;
  var rds = [];
  beforeEach(function () {
    var opts = {
      bundleId: _helpersRemoteDebuggerServer.APP_INFO['PID:42'].bundleId,
      platformVersion: '8.3',
      useNewSafari: true,
      pageLoadMs: 5000,
      port: 27754,
      debuggerType: _indexJs.DEBUGGER_TYPES.webinspector };
    rd = new _indexJs.RemoteDebugger(opts);
    rds[0] = rd;
  });

  function requireAppIdKey(fn, args) {
    var _this = this;

    it('should fail if no app selected', function callee$2$0() {
      var _rd;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            // make sure there is no app id key (set during selectApp)
            rd.appIdKey = null;

            context$3$0.next = 3;
            return _regeneratorRuntime.awrap((_rd = rd)[fn].apply(_rd, _toConsumableArray(args)).should.be.rejectedWith('appIdKey'));

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  }
  function requirePageIdKey(fn, args) {
    var _this2 = this;

    it('should fail if no page selected', function callee$2$0() {
      var _rd2;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            // make sure there is no page id key (set during selectPage)
            rd.pageIdKey = null;

            context$3$0.next = 3;
            return _regeneratorRuntime.awrap((_rd2 = rd)[fn].apply(_rd2, _toConsumableArray(args)).should.be.rejectedWith('pageIdKey'));

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this2);
    });
  }
  function confirmRpcSend(fn, args) {
    var _this3 = this;

    var num = arguments.length <= 2 || arguments[2] === undefined ? 1 : arguments[2];

    it('should send an rpc message', function callee$2$0() {
      var _rd3;

      var spy;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            spy = _sinon2['default'].spy(rd.rpcClient, 'send');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap((_rd3 = rd)[fn].apply(_rd3, _toConsumableArray(args)));

          case 3:
            spy.callCount.should.equal(num);

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this3);
    });
  }
  function confirmRemoteDebuggerErrorHandling(server, fn, args) {
    var _this4 = this;

    var errText = arguments.length <= 3 || arguments[3] === undefined ? 'remote debugger error' : arguments[3];

    it('should handle error from remote debugger', function callee$2$0() {
      var _rd4;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            server.setDataResponseError(errText);
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap((_rd4 = rd)[fn].apply(_rd4, _toConsumableArray(args)).should.be.rejectedWith(errText));

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this4);
    });
  }

  describe('#connect', function () {
    var server = new _helpersRemoteDebuggerServer.RemoteDebuggerServer();

    beforeEach(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(server.start());

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this5);
    });
    afterEach(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(server.stop());

          case 2:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this5);
    });

    it('should return application information', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(rd.connect());

          case 2:
            context$3$0.t0 = _helpersRemoteDebuggerServer.APP_INFO;
            context$3$0.sent.should.eql(context$3$0.t0);

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this5);
    });
    it('should set the connection key', function callee$2$0() {
      var spy;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            spy = _sinon2['default'].spy(rd, 'setConnectionKey');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(rd.connect());

          case 3:
            spy.calledOnce.should.be['true'];

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this5);
    });
  });

  describe('#disconnect', (0, _helpersServerSetup.withConnectedServer)(rds, function () {
    it('should disconnect from the rpc client', function callee$2$0() {
      var spy;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            spy = _sinon2['default'].spy(rd.rpcClient, 'disconnect');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(rd.disconnect());

          case 3:
            spy.calledOnce.should.be['true'];
            rd.rpcClient.disconnect.restore();

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this5);
    });
    it('should emit an appropriate event', function callee$2$0() {
      var spy;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            spy = _sinon2['default'].spy();

            rd.on(_indexJs.RemoteDebugger.EVENT_DISCONNECT, spy);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(rd.disconnect());

          case 4:
            spy.calledOnce.should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this5);
    });
  }));

  describe('#selectApp', (0, _helpersServerSetup.withConnectedServer)(rds, function (server) {
    confirmRpcSend('selectApp', []);
    it('should be able to handle an app change event before selection', function callee$2$0() {
      var initialIdKey, timeout, start, spy;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            initialIdKey = rd.appIdKey;

            // change the app immediately
            server.changeApp(1, true);

            // need to wait for the change to have been received
            // wait up to 2 seconds
            timeout = 2000;
            start = Date.now();

          case 4:
            if (!(Date.now() <= start + timeout)) {
              context$3$0.next = 11;
              break;
            }

            if (!(rd.appIdKey !== initialIdKey)) {
              context$3$0.next = 7;
              break;
            }

            return context$3$0.abrupt('break', 11);

          case 7:
            context$3$0.next = 9;
            return _regeneratorRuntime.awrap(_bluebird2['default'].delay(100));

          case 9:
            context$3$0.next = 4;
            break;

          case 11:
            spy = _sinon2['default'].spy(rd.rpcClient, 'selectApp');
            context$3$0.next = 14;
            return _regeneratorRuntime.awrap(rd.selectApp());

          case 14:
            rd.appIdKey.should.equal('PID:42');
            spy.calledOnce.should.be['true'];

          case 16:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this5);
    });
    it('should be able to handle an app change event during selection', function callee$2$0() {
      var spy;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            // change the app when the selectApp call gets in
            server.changeApp(1, false);

            spy = _sinon2['default'].spy(rd.rpcClient, 'selectApp');
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(rd.selectApp());

          case 4:
            spy.calledTwice.should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this5);
    });
  }));

  describe('#selectPage', (0, _helpersServerSetup.withConnectedServer)(rds, function (server) {
    requireAppIdKey('selectPage', []);
    confirmRpcSend('selectPage', [1, true], 3);
    confirmRpcSend('selectPage', [1, false], 4);
    confirmRemoteDebuggerErrorHandling(server, 'selectPage', [1]);
  }));

  describe('#execute', (0, _helpersServerSetup.withConnectedServer)(rds, function () {
    requireAppIdKey('execute', []);
    requirePageIdKey('execute', []);
    confirmRpcSend('execute', ['document.getElementsByTagName("html")[0].outerHTML']);
  }));

  describe('#checkPageIsReady', (0, _helpersServerSetup.withConnectedServer)(rds, function (server) {
    requireAppIdKey('checkPageIsReady', []);
    requirePageIdKey('checkPageIsReady', []);
    confirmRpcSend('checkPageIsReady', []);
    it('should return true when server responds with complete', function callee$2$0() {
      var ready;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            server.setDataResponseValue('complete');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(rd.checkPageIsReady());

          case 3:
            ready = context$3$0.sent;

            ready.should.be['true'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this5);
    });
    it('should return false when server responds with loading', function callee$2$0() {
      var ready;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            server.setDataResponseValue('loading');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(rd.checkPageIsReady());

          case 3:
            ready = context$3$0.sent;

            ready.should.be['false'];

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this5);
    });
    confirmRemoteDebuggerErrorHandling(server, 'checkPageIsReady', []);
  }));

  describe('#executeAtom', (0, _helpersServerSetup.withConnectedServer)(rds, function (server) {
    confirmRpcSend('executeAtom', ['find_element', [], []]);
    it('should execute the atom', function callee$2$0() {
      var sentElement, element;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sentElement = { ELEMENT: ':wdc:1435784377545' };

            server.setDataResponseValue(sentElement);
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(rd.executeAtom('find_element', [], []));

          case 4:
            element = context$3$0.sent;

            element.should.eql(sentElement);

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this5);
    });
    confirmRemoteDebuggerErrorHandling(server, 'executeAtom', ['find_element', [], []]);
  }));

  describe('timeline', (0, _helpersServerSetup.withConnectedServer)(rds, function () {
    describe('#startTimeline', function () {
      var timelineCallback = _sinon2['default'].spy();
      confirmRpcSend('startTimeline', [timelineCallback]);
    });

    describe('#stopTimeline', function () {
      confirmRpcSend('stopTimeline', []);
    });
  }));

  describe('#waitForFrameNavigated', (0, _helpersServerSetup.withConnectedServer)(rds, function (server) {
    it('should work when the delay is cancelled but the server sends message', function callee$2$0() {
      var p, source;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            p = rd.waitForFrameNavigated();

            rd.navigationDelay.cancel();

            // make the server send the navigation message
            server.sendFrameNavigationMessage();

            // wait for rd.waitForFrameNavigated() to finish
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(p);

          case 5:
            source = context$3$0.sent;

            source.should.equal('remote-debugger');

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this5);
    });
    it('should timeout and finish when server does not send message', function callee$2$0() {
      var source;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(rd.waitForFrameNavigated());

          case 2:
            source = context$3$0.sent;

            source.should.equal('timeout');

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this5);
    });
  }));

  describe('#navToUrl', (0, _helpersServerSetup.withConnectedServer)(rds, function () {
    var url = 'http://appium.io';

    requireAppIdKey('navToUrl', [url]);
    requirePageIdKey('navToUrl', [url]);
    confirmRpcSend('navToUrl', [url], 2);
  }));

  describe('#callFunction', (0, _helpersServerSetup.withConnectedServer)(rds, function () {
    requireAppIdKey('callFunction', []);
    requirePageIdKey('callFunction', []);
    confirmRpcSend('callFunction', []);
  }));

  describe('#pageLoad', (0, _helpersServerSetup.withConnectedServer)(rds, function (server) {
    it('should call #checkPageIsReady', function callee$2$0() {
      var spy;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            spy = _sinon2['default'].spy(rd, 'checkPageIsReady');
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(rd.pageLoad());

          case 3:
            spy.calledOnce.should.be['true'];

          case 4:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this5);
    });
    it('should not call #checkPageIsReady if delay is cancelled', function callee$2$0() {
      var spy, p;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            spy = _sinon2['default'].spy(rd, 'checkPageIsReady');
            p = rd.pageLoad();

            rd.pageLoadDelay.cancel();
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(p);

          case 5:
            spy.called.should.be['false'];

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this5);
    });
    it('should retry if page is not ready', function callee$2$0() {
      var spy;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            // give a long timeout so we can get the response from the server
            rd.pageLoadMs = 10000;

            // make the server respond first with random status, then with complete
            server.setDataResponseValue('loading');
            server.setDataResponseValue('complete');

            spy = _sinon2['default'].spy(rd, 'checkPageIsReady');
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(rd.pageLoad());

          case 6:
            spy.calledTwice.should.be['true'];

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this5);
    });
  }));

  describe('socket errors', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      var _this6 = this;

      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          it('should handle socket connect error', function callee$2$0() {
            return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap(rd.connect().should.be.rejected);

                case 2:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this6);
          });

        case 1:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this5);
  });
});

// once the appIdKey has changed, we are good to go
//# sourceMappingURL=data:application/json;base64,