require('source-map-support').install();

'use strict';

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _libRemoteMessages = require('../../lib/remote-messages');

var _libRemoteMessages2 = _interopRequireDefault(_libRemoteMessages);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

_chai2['default'].should();

describe('getRemoteCommand', function () {
  var commands = ['setConnectionKey', 'connectToApp', 'setSenderKey', 'indicateWebView', 'sendJSCommand', 'callJSFunction', 'setUrl', 'enablePage', 'startTimeline', 'stopTimeline'];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    var _loop = function () {
      var command = _step.value;

      it('should be able to retrieve ' + command + ' command', function () {
        var remoteCommand = (0, _libRemoteMessages2['default'])(command, {});
        remoteCommand.should.be.an['instanceof'](Object);
        remoteCommand.__argument.should.exist;
        remoteCommand.__selector.should.exist;
      });
    };

    for (var _iterator = _getIterator(commands), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      _loop();
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator['return']) {
        _iterator['return']();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvdW5pdC9yZW1vdGUtbWVzc2FnZXMtc3BlY3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7aUNBRTZCLDJCQUEyQjs7OztvQkFDdkMsTUFBTTs7OztBQUV2QixrQkFBSyxNQUFNLEVBQUUsQ0FBQzs7QUFFZCxRQUFRLENBQUMsa0JBQWtCLEVBQUUsWUFBTTtBQUNqQyxNQUFJLFFBQVEsR0FBRyxDQUFDLGtCQUFrQixFQUFFLGNBQWMsRUFBRSxjQUFjLEVBQ2xELGlCQUFpQixFQUFFLGVBQWUsRUFBRSxnQkFBZ0IsRUFDcEQsUUFBUSxFQUFFLFlBQVksRUFBRSxlQUFlLEVBQUUsY0FBYyxDQUFDLENBQUM7Ozs7Ozs7VUFDakUsT0FBTzs7QUFDYixRQUFFLGlDQUErQixPQUFPLGVBQVksWUFBTTtBQUN4RCxZQUFJLGFBQWEsR0FBRyxvQ0FBaUIsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELHFCQUFhLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLGNBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUM5QyxxQkFBYSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO0FBQ3RDLHFCQUFhLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7T0FDdkMsQ0FBQyxDQUFDOzs7QUFOTCxzQ0FBbUIsUUFBUSw0R0FBRTs7S0FPNUI7Ozs7Ozs7Ozs7Ozs7OztDQUNGLENBQUMsQ0FBQyIsImZpbGUiOiJ0ZXN0L3VuaXQvcmVtb3RlLW1lc3NhZ2VzLXNwZWNzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdHJhbnNwaWxlOm1vY2hhXG5cbmltcG9ydCBnZXRSZW1vdGVDb21tYW5kIGZyb20gJy4uLy4uL2xpYi9yZW1vdGUtbWVzc2FnZXMnO1xuaW1wb3J0IGNoYWkgZnJvbSAnY2hhaSc7XG5cbmNoYWkuc2hvdWxkKCk7XG5cbmRlc2NyaWJlKCdnZXRSZW1vdGVDb21tYW5kJywgKCkgPT4ge1xuICBsZXQgY29tbWFuZHMgPSBbJ3NldENvbm5lY3Rpb25LZXknLCAnY29ubmVjdFRvQXBwJywgJ3NldFNlbmRlcktleScsXG4gICAgICAgICAgICAgICAgICAnaW5kaWNhdGVXZWJWaWV3JywgJ3NlbmRKU0NvbW1hbmQnLCAnY2FsbEpTRnVuY3Rpb24nLFxuICAgICAgICAgICAgICAgICAgJ3NldFVybCcsICdlbmFibGVQYWdlJywgJ3N0YXJ0VGltZWxpbmUnLCAnc3RvcFRpbWVsaW5lJ107XG4gIGZvcihsZXQgY29tbWFuZCBvZiBjb21tYW5kcykge1xuICAgIGl0KGBzaG91bGQgYmUgYWJsZSB0byByZXRyaWV2ZSAke2NvbW1hbmR9IGNvbW1hbmRgLCAoKSA9PiB7XG4gICAgICBsZXQgcmVtb3RlQ29tbWFuZCA9IGdldFJlbW90ZUNvbW1hbmQoY29tbWFuZCwge30pO1xuICAgICAgcmVtb3RlQ29tbWFuZC5zaG91bGQuYmUuYW4uaW5zdGFuY2VvZihPYmplY3QpO1xuICAgICAgcmVtb3RlQ29tbWFuZC5fX2FyZ3VtZW50LnNob3VsZC5leGlzdDtcbiAgICAgIHJlbW90ZUNvbW1hbmQuX19zZWxlY3Rvci5zaG91bGQuZXhpc3Q7XG4gICAgfSk7XG4gIH1cbn0pO1xuIl19