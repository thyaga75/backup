'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _requestPromise = require('request-promise');

var _requestPromise2 = _interopRequireDefault(_requestPromise);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _appiumSupport = require('appium-support');

var _teen_process = require('teen_process');

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var SE_VER = "0.17.0";
var SE_DOWNLOAD = 'https://github.com/selendroid/selendroid/releases/' + ('download/' + SE_VER + '/selendroid-standalone-' + SE_VER + '-with') + '-dependencies.jar';
var SE_DOWNLOAD_MD5 = "5e1f7de5e4d2eb77b68675d76c5edf6a";
var SE_DIR = _path2['default'].resolve(__dirname, "..", "..", "selendroid");
var SE_DOWNLOAD_DIR = _path2['default'].resolve(SE_DIR, "download");
var SE_JAR_PATH = _path2['default'].resolve(SE_DOWNLOAD_DIR, "selendroid-server.jar");
var SE_APK_PATH = _path2['default'].resolve(SE_DIR, "selendroid-server.apk");
var SE_MANIFEST_PATH = _path2['default'].resolve(SE_DIR, "AndroidManifest.xml");

function setupSelendroid() {
  var manifestPath, serverPath, extractedManifestPath, extractedServerPath;
  return _regeneratorRuntime.async(function setupSelendroid$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(SE_JAR_PATH));

      case 2:
        context$1$0.t0 = context$1$0.sent;

        if (!context$1$0.t0) {
          context$1$0.next = 9;
          break;
        }

        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.md5(SE_JAR_PATH));

      case 6:
        context$1$0.t1 = context$1$0.sent;
        context$1$0.t2 = SE_DOWNLOAD_MD5;
        context$1$0.t0 = context$1$0.t1 === context$1$0.t2;

      case 9:
        if (!context$1$0.t0) {
          context$1$0.next = 13;
          break;
        }

        _logger2['default'].info("Standalone jar exists and has correct hash, skipping download");
        context$1$0.next = 15;
        break;

      case 13:
        context$1$0.next = 15;
        return _regeneratorRuntime.awrap(downloadSelendroid());

      case 15:
        _logger2['default'].info('Determining AndroidManifest location');
        context$1$0.next = 18;
        return _regeneratorRuntime.awrap(getFilePathFromJar(/AndroidManifest.*\.xml$/, SE_JAR_PATH));

      case 18:
        manifestPath = context$1$0.sent;

        _logger2['default'].info('Determining server apk location');
        context$1$0.next = 22;
        return _regeneratorRuntime.awrap(getFilePathFromJar(/selendroid-server.*\.apk$/, SE_JAR_PATH));

      case 22:
        serverPath = context$1$0.sent;

        _logger2['default'].info('Extracting manifest and apk to ' + SE_DOWNLOAD_DIR);
        context$1$0.next = 26;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('jar', ['xf', SE_JAR_PATH, manifestPath, serverPath], {
          cwd: SE_DOWNLOAD_DIR
        }));

      case 26:
        _logger2['default'].info('Copying manifest and apk to ' + SE_DIR);
        extractedManifestPath = _path2['default'].resolve(SE_DOWNLOAD_DIR, manifestPath);
        extractedServerPath = _path2['default'].resolve(SE_DOWNLOAD_DIR, serverPath);
        context$1$0.next = 31;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.copyFile(extractedManifestPath, SE_MANIFEST_PATH));

      case 31:
        context$1$0.next = 33;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.copyFile(extractedServerPath, SE_APK_PATH));

      case 33:
        _logger2['default'].info("Cleaning up temp files");
        context$1$0.next = 36;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.rimraf(extractedManifestPath));

      case 36:
        context$1$0.next = 38;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.rimraf(extractedServerPath));

      case 38:
        _logger2['default'].info('Fixing AndroidManifest icon bug');
        context$1$0.next = 41;
        return _regeneratorRuntime.awrap(fixManifestIcons(SE_MANIFEST_PATH));

      case 41:
        context$1$0.next = 43;
        return _regeneratorRuntime.awrap(serverExists());

      case 43:
        if (context$1$0.sent) {
          context$1$0.next = 45;
          break;
        }

        throw new Error("Something went wrong in setting up selendroid");

      case 45:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function downloadSelendroid() {
  var body;
  return _regeneratorRuntime.async(function downloadSelendroid$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].info('Ensuring ' + SE_DOWNLOAD_DIR + ' exists');
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.mkdir(SE_DIR));

      case 3:
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.mkdir(SE_DOWNLOAD_DIR));

      case 5:
        _logger2['default'].info('Downloading Selendroid standalone server version ' + SE_VER + ' from ' + (SE_DOWNLOAD + ' --> ' + SE_JAR_PATH));
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(_requestPromise2['default'].get({ url: SE_DOWNLOAD, encoding: 'binary' }));

      case 8:
        body = context$1$0.sent;

        _logger2['default'].info('Writing binary content to ' + SE_JAR_PATH);
        context$1$0.next = 12;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.writeFile(SE_JAR_PATH, body, { encoding: 'binary' }));

      case 12:
        context$1$0.next = 14;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.chmod(SE_JAR_PATH, 420));

      case 14:
        context$1$0.next = 16;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.md5(SE_JAR_PATH));

      case 16:
        context$1$0.t0 = context$1$0.sent;
        context$1$0.t1 = SE_DOWNLOAD_MD5;

        if (!(context$1$0.t0 === context$1$0.t1)) {
          context$1$0.next = 22;
          break;
        }

        _logger2['default'].info("Selendroid standalone server downloaded");
        context$1$0.next = 23;
        break;

      case 22:
        _logger2['default'].warn("Selendroid standalone server downloaded, but MD5 hash did not " + "match, please be careful");

      case 23:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function getFilePathFromJar(fileRegex, jarPath) {
  var _ref, stdout, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, line;

  return _regeneratorRuntime.async(function getFilePathFromJar$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('jar', ['tf', jarPath]));

      case 2:
        _ref = context$1$0.sent;
        stdout = _ref.stdout;
        _iteratorNormalCompletion = true;
        _didIteratorError = false;
        _iteratorError = undefined;
        context$1$0.prev = 7;
        _iterator = _getIterator(stdout.split("\n"));

      case 9:
        if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
          context$1$0.next = 16;
          break;
        }

        line = _step.value;

        if (!fileRegex.test(line.trim())) {
          context$1$0.next = 13;
          break;
        }

        return context$1$0.abrupt('return', line.trim());

      case 13:
        _iteratorNormalCompletion = true;
        context$1$0.next = 9;
        break;

      case 16:
        context$1$0.next = 22;
        break;

      case 18:
        context$1$0.prev = 18;
        context$1$0.t0 = context$1$0['catch'](7);
        _didIteratorError = true;
        _iteratorError = context$1$0.t0;

      case 22:
        context$1$0.prev = 22;
        context$1$0.prev = 23;

        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }

      case 25:
        context$1$0.prev = 25;

        if (!_didIteratorError) {
          context$1$0.next = 28;
          break;
        }

        throw _iteratorError;

      case 28:
        return context$1$0.finish(25);

      case 29:
        return context$1$0.finish(22);

      case 30:
        throw new Error('Could not find ' + fileRegex + ' in ' + jarPath);

      case 31:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[7, 18, 22, 30], [23,, 25, 29]]);
}

function serverExists() {
  return _regeneratorRuntime.async(function serverExists$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.prev = 0;
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(SE_APK_PATH));

      case 3:
        context$1$0.t0 = context$1$0.sent;

        if (!context$1$0.t0) {
          context$1$0.next = 8;
          break;
        }

        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(SE_MANIFEST_PATH));

      case 7:
        context$1$0.t0 = context$1$0.sent;

      case 8:
        return context$1$0.abrupt('return', context$1$0.t0);

      case 11:
        context$1$0.prev = 11;
        context$1$0.t1 = context$1$0['catch'](0);

        if (!(context$1$0.t1.code.indexOf("ENOENT") !== -1)) {
          context$1$0.next = 15;
          break;
        }

        return context$1$0.abrupt('return', false);

      case 15:
        throw context$1$0.t1;

      case 16:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[0, 11]]);
}

function fixManifestIcons(manifest) {
  var curData, iconRe, newData;
  return _regeneratorRuntime.async(function fixManifestIcons$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(manifest));

      case 2:
        curData = context$1$0.sent.toString('utf8');
        iconRe = /application[\s\S]+android:icon="[^"]+"/;
        newData = curData.replace(iconRe, "application");
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.writeFile(manifest, newData));

      case 7:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

exports.setupSelendroid = setupSelendroid;
exports.serverExists = serverExists;
exports.SE_APK_PATH = SE_APK_PATH;
exports.SE_MANIFEST_PATH = SE_MANIFEST_PATH;
//# sourceMappingURL=data:application/json;base64,