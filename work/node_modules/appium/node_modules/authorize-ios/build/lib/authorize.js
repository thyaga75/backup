'use strict';

var _toConsumableArray = require('babel-runtime/helpers/to-consumable-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _appiumLogger = require('appium-logger');

var _teen_process = require('teen_process');

var _appiumXcode = require('appium-xcode');

var _appiumSupport = require('appium-support');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _glob2 = require('glob');

var _glob3 = _interopRequireDefault(_glob2);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var glob = _bluebird2['default'].promisify(_glob3['default']);
var logger = (0, _appiumLogger.getLogger)('AuthorizeIOS');

exports['default'] = function authorize(insecure) {
  var xcodeDir, user, cmd, _args, olderXcodeSimulatorPath, directories, newerXcodeSimulatorPath, args;

  return _regeneratorRuntime.async(function authorize$(context$1$0) {
    var _this = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        xcodeDir = undefined;
        user = undefined;
        context$1$0.prev = 2;

        // enable developer tools
        logger.info('Enabling DevToolsSecurity');
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('DevToolsSecurity', ['--enable']));

      case 6:
        // update security db -- removes authorization prompt
        logger.info('Updating security db for ' + ((insecure ? 'insecure' : 'developer') + ' access'));
        cmd = 'security';
        _args = ['authorizationdb', 'write', 'system.privilege.taskport', insecure ? 'allow' : 'is-developer'];
        context$1$0.next = 11;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)(cmd, _args));

      case 11:

        logger.info('Granting access to built-in simulator apps');

        if (process.env.HOME) {
          context$1$0.next = 14;
          break;
        }

        throw new Error('Could not determine your $HOME');

      case 14:

        user = /\/([^\/]+)$/.exec(process.env.HOME)[1];
        context$1$0.next = 17;
        return _regeneratorRuntime.awrap((0, _appiumXcode.getPath)());

      case 17:
        xcodeDir = context$1$0.sent;

        logger.info('The xcode directory is : ' + xcodeDir);
        context$1$0.next = 24;
        break;

      case 21:
        context$1$0.prev = 21;
        context$1$0.t0 = context$1$0['catch'](2);

        logger.errorAndThrow(context$1$0.t0);

      case 24:
        olderXcodeSimulatorPath = _path2['default'].resolve(xcodeDir, 'Platforms/iPhoneSimulator.platform/' + 'Developer/SDKs/iPhoneSimulator*.sdk/Applications');
        context$1$0.next = 27;
        return _regeneratorRuntime.awrap(glob(olderXcodeSimulatorPath));

      case 27:
        directories = context$1$0.sent;
        newerXcodeSimulatorPath = _path2['default'].resolve('/Library/Developer/CoreSimulator/' + 'Profiles/Runtimes/iOS *.simruntime/' + 'Contents/Resources/RuntimeRoot/Applications/');
        context$1$0.t1 = directories;
        context$1$0.next = 32;
        return _regeneratorRuntime.awrap(glob(newerXcodeSimulatorPath));

      case 32:
        context$1$0.t2 = context$1$0.sent;
        directories = context$1$0.t1.concat.call(context$1$0.t1, context$1$0.t2);

        directories = directories.filter(function callee$1$0(dir) {
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(dir));

              case 2:
                return context$2$0.abrupt('return', context$2$0.sent);

              case 3:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this);
        });

        args = ['-R', user + ':'].concat(_toConsumableArray(directories));

        logger.info('Changing ownership to \'' + user + '\' on directories: ' + directories.join(', '));
        context$1$0.prev = 37;
        context$1$0.next = 40;
        return _regeneratorRuntime.awrap((0, _teen_process.exec)('chown', args));

      case 40:
        context$1$0.next = 46;
        break;

      case 42:
        context$1$0.prev = 42;
        context$1$0.t3 = context$1$0['catch'](37);

        logger.error('Encountered an issue changing user priveledges ' + ('for iOS sim app dirs: ' + directories));
        logger.error('Error was: ' + context$1$0.t3.message);

      case 46:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this, [[2, 21], [37, 42]]);
};

module.exports = exports['default'];

// change permission
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9hdXRob3JpemUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OzRCQUEwQixlQUFlOzs0QkFDcEIsY0FBYzs7MkJBQ1gsY0FBYzs7NkJBQ25CLGdCQUFnQjs7b0JBQ2xCLE1BQU07Ozs7cUJBQ0wsTUFBTTs7Ozt3QkFDVixVQUFVOzs7O0FBR3hCLElBQU0sSUFBSSxHQUFHLHNCQUFFLFNBQVMsbUJBQU8sQ0FBQztBQUNoQyxJQUFNLE1BQU0sR0FBRyw2QkFBVSxjQUFjLENBQUMsQ0FBQzs7cUJBRTFCLFNBQWUsU0FBUyxDQUFFLFFBQVE7TUFDM0MsUUFBUSxFQUNSLElBQUksRUFTRixHQUFHLEVBQ0gsS0FBSSxFQWlCTix1QkFBdUIsRUFHdkIsV0FBVyxFQUVYLHVCQUF1QixFQVN2QixJQUFJOzs7Ozs7O0FBMUNKLGdCQUFRO0FBQ1IsWUFBSTs7OztBQUlOLGNBQU0sQ0FBQyxJQUFJLENBQUMsMkJBQTJCLENBQUMsQ0FBQzs7eUNBQ25DLHdCQUFLLGtCQUFrQixFQUFFLENBQUMsVUFBVSxDQUFDLENBQUM7Ozs7QUFFNUMsY0FBTSxDQUFDLElBQUksQ0FBQyxnQ0FDRyxRQUFRLEdBQUcsVUFBVSxHQUFHLFdBQVcsQ0FBQSxhQUFTLENBQUMsQ0FBQztBQUN6RCxXQUFHLEdBQUcsVUFBVTtBQUNoQixhQUFJLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxPQUFPLEVBQUUsMkJBQTJCLEVBQ3RELFFBQVEsR0FBRyxPQUFPLEdBQUcsY0FBYyxDQUFFOzt5Q0FDNUMsd0JBQUssR0FBRyxFQUFFLEtBQUksQ0FBQzs7OztBQUVyQixjQUFNLENBQUMsSUFBSSxDQUFDLDRDQUE0QyxDQUFDLENBQUM7O1lBQ3JELE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSTs7Ozs7Y0FDYixJQUFJLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQzs7OztBQUduRCxZQUFJLEdBQUcsYUFBYSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDOzt5Q0FDOUIsMkJBQVM7OztBQUExQixnQkFBUTs7QUFDUixjQUFNLENBQUMsSUFBSSwrQkFBNkIsUUFBUSxDQUFHLENBQUM7Ozs7Ozs7O0FBRXBELGNBQU0sQ0FBQyxhQUFhLGdCQUFHLENBQUM7OztBQUl0QiwrQkFBdUIsR0FBRyxrQkFBSyxPQUFPLENBQUMsUUFBUSxFQUN2QixxQ0FBcUMsR0FDckMsa0RBQWtELENBQUM7O3lDQUN2RCxJQUFJLENBQUMsdUJBQXVCLENBQUM7OztBQUFqRCxtQkFBVztBQUVYLCtCQUF1QixHQUFHLGtCQUFLLE9BQU8sQ0FBQyxtQ0FBbUMsR0FDbEQscUNBQXFDLEdBQ3JDLDhDQUE4QyxDQUFDO3lCQUM3RCxXQUFXOzt5Q0FBYyxJQUFJLENBQUMsdUJBQXVCLENBQUM7Ozs7QUFBcEUsbUJBQVcsa0JBQWUsTUFBTTs7QUFFaEMsbUJBQVcsR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLG9CQUFPLEdBQUc7Ozs7O2lEQUM1QixrQkFBRyxNQUFNLENBQUMsR0FBRyxDQUFDOzs7Ozs7Ozs7O1NBQzVCLENBQUMsQ0FBQzs7QUFFQyxZQUFJLElBQUksSUFBSSxFQUFLLElBQUksa0NBQVEsV0FBVzs7QUFFNUMsY0FBTSxDQUFDLElBQUksOEJBQTJCLElBQUksMkJBQXFCLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUcsQ0FBQzs7O3lDQUVqRix3QkFBSyxPQUFPLEVBQUUsSUFBSSxDQUFDOzs7Ozs7Ozs7O0FBRXpCLGNBQU0sQ0FBQyxLQUFLLENBQUMsZ0ZBQ3lCLFdBQVcsQ0FBRSxDQUFDLENBQUM7QUFDckQsY0FBTSxDQUFDLEtBQUssaUJBQWUsZUFBSSxPQUFPLENBQUcsQ0FBQzs7Ozs7OztDQUU3QyIsImZpbGUiOiJsaWIvYXV0aG9yaXplLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0TG9nZ2VyIH0gZnJvbSAnYXBwaXVtLWxvZ2dlcic7XG5pbXBvcnQgeyBleGVjIH0gZnJvbSAndGVlbl9wcm9jZXNzJztcbmltcG9ydCB7IGdldFBhdGggfSBmcm9tICdhcHBpdW0teGNvZGUnO1xuaW1wb3J0IHsgZnMgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBfZ2xvYiBmcm9tICdnbG9iJztcbmltcG9ydCBCIGZyb20gJ2JsdWViaXJkJztcblxuXG5jb25zdCBnbG9iID0gQi5wcm9taXNpZnkoX2dsb2IpO1xuY29uc3QgbG9nZ2VyID0gZ2V0TG9nZ2VyKCdBdXRob3JpemVJT1MnKTtcblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gYXV0aG9yaXplIChpbnNlY3VyZSkge1xuICBsZXQgeGNvZGVEaXI7XG4gIGxldCB1c2VyO1xuXG4gIHRyeSB7XG4gICAgLy8gZW5hYmxlIGRldmVsb3BlciB0b29sc1xuICAgIGxvZ2dlci5pbmZvKCdFbmFibGluZyBEZXZUb29sc1NlY3VyaXR5Jyk7XG4gICAgYXdhaXQgZXhlYygnRGV2VG9vbHNTZWN1cml0eScsIFsnLS1lbmFibGUnXSk7XG4gICAgLy8gdXBkYXRlIHNlY3VyaXR5IGRiIC0tIHJlbW92ZXMgYXV0aG9yaXphdGlvbiBwcm9tcHRcbiAgICBsb2dnZXIuaW5mbyhgVXBkYXRpbmcgc2VjdXJpdHkgZGIgZm9yIGAgK1xuICAgICAgICAgICAgICAgIGAke2luc2VjdXJlID8gJ2luc2VjdXJlJyA6ICdkZXZlbG9wZXInfSBhY2Nlc3NgKTtcbiAgICBsZXQgY21kID0gJ3NlY3VyaXR5JztcbiAgICBsZXQgYXJncyA9IFsnYXV0aG9yaXphdGlvbmRiJywgJ3dyaXRlJywgJ3N5c3RlbS5wcml2aWxlZ2UudGFza3BvcnQnLFxuICAgICAgICAgICAgICAgIChpbnNlY3VyZSA/ICdhbGxvdycgOiAnaXMtZGV2ZWxvcGVyJyldO1xuICAgIGF3YWl0IGV4ZWMoY21kLCBhcmdzKTtcblxuICAgIGxvZ2dlci5pbmZvKCdHcmFudGluZyBhY2Nlc3MgdG8gYnVpbHQtaW4gc2ltdWxhdG9yIGFwcHMnKTtcbiAgICBpZiAoIXByb2Nlc3MuZW52LkhPTUUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IGRldGVybWluZSB5b3VyICRIT01FJyk7XG4gICAgfVxuXG4gICAgdXNlciA9IC9cXC8oW15cXC9dKykkLy5leGVjKHByb2Nlc3MuZW52LkhPTUUpWzFdO1xuICAgIHhjb2RlRGlyID0gYXdhaXQgZ2V0UGF0aCgpO1xuICAgIGxvZ2dlci5pbmZvKGBUaGUgeGNvZGUgZGlyZWN0b3J5IGlzIDogJHt4Y29kZURpcn1gKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGxvZ2dlci5lcnJvckFuZFRocm93KGUpO1xuICB9XG5cbiAgLy8gY2hhbmdlIHBlcm1pc3Npb25cbiAgbGV0IG9sZGVyWGNvZGVTaW11bGF0b3JQYXRoID0gcGF0aC5yZXNvbHZlKHhjb2RlRGlyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1BsYXRmb3Jtcy9pUGhvbmVTaW11bGF0b3IucGxhdGZvcm0vJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnRGV2ZWxvcGVyL1NES3MvaVBob25lU2ltdWxhdG9yKi5zZGsvQXBwbGljYXRpb25zJyk7XG4gIGxldCBkaXJlY3RvcmllcyA9IGF3YWl0IGdsb2Iob2xkZXJYY29kZVNpbXVsYXRvclBhdGgpO1xuXG4gIGxldCBuZXdlclhjb2RlU2ltdWxhdG9yUGF0aCA9IHBhdGgucmVzb2x2ZSgnL0xpYnJhcnkvRGV2ZWxvcGVyL0NvcmVTaW11bGF0b3IvJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnUHJvZmlsZXMvUnVudGltZXMvaU9TICouc2ltcnVudGltZS8nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdDb250ZW50cy9SZXNvdXJjZXMvUnVudGltZVJvb3QvQXBwbGljYXRpb25zLycpO1xuICBkaXJlY3RvcmllcyA9IGRpcmVjdG9yaWVzLmNvbmNhdChhd2FpdCBnbG9iKG5ld2VyWGNvZGVTaW11bGF0b3JQYXRoKSk7XG5cbiAgZGlyZWN0b3JpZXMgPSBkaXJlY3Rvcmllcy5maWx0ZXIoYXN5bmMgKGRpcikgPT4ge1xuICAgIHJldHVybiBhd2FpdCBmcy5leGlzdHMoZGlyKTtcbiAgfSk7XG5cbiAgbGV0IGFyZ3MgPSBbJy1SJywgYCR7dXNlcn06YCwgLi4uZGlyZWN0b3JpZXNdO1xuXG4gIGxvZ2dlci5pbmZvKGBDaGFuZ2luZyBvd25lcnNoaXAgdG8gJyR7dXNlcn0nIG9uIGRpcmVjdG9yaWVzOiAke2RpcmVjdG9yaWVzLmpvaW4oJywgJyl9YCk7XG4gIHRyeSB7XG4gICAgYXdhaXQgZXhlYygnY2hvd24nLCBhcmdzKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgbG9nZ2VyLmVycm9yKGBFbmNvdW50ZXJlZCBhbiBpc3N1ZSBjaGFuZ2luZyB1c2VyIHByaXZlbGVkZ2VzIGAgK1xuICAgICAgICAgICAgICAgICBgZm9yIGlPUyBzaW0gYXBwIGRpcnM6ICR7ZGlyZWN0b3JpZXN9YCk7XG4gICAgbG9nZ2VyLmVycm9yKGBFcnJvciB3YXM6ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gIH1cbn07XG4iXX0=