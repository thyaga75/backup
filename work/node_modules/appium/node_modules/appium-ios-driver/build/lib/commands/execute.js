'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _mobileJsonWireProtocol = require('mobile-json-wire-protocol');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

var _appiumSupport = require('appium-support');

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var commands = {},
    helpers = {},
    extensions = {};

commands.execute = function callee$0$0(script, args) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!this.isWebContext()) {
          context$1$0.next = 7;
          break;
        }

        args = this.convertElementsForAtoms(args);
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.executeAtom('execute_script', [script, args]));

      case 4:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 7:
        if (!script.match(/^mobile\:/)) {
          context$1$0.next = 14;
          break;
        }

        script = script.replace(/^mobile\:/, '').trim();
        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(this.executeMobile(script, _lodash2['default'].isArray(args) ? args[0] : args));

      case 11:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 14:
        context$1$0.next = 16;
        return _regeneratorRuntime.awrap(this.uiAutoClient.sendCommand(script));

      case 16:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 17:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.executeAsync = function callee$0$0(script, args, sessionId) {
  var address, port, responseUrl, defaultHost, urlObject;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (this.isWebContext()) {
          context$1$0.next = 4;
          break;
        }

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.uiAutoClient.sendCommand(script));

      case 3:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 4:
        address = this.opts.callbackAddress || this.opts.address;
        port = this.opts.callbackPort || this.opts.port;

        sessionId = sessionId || this.sessionId;
        responseUrl = 'http://' + address + ':' + port + '/wd/hub/session/' + sessionId + '/receive_async_response';

        if (this.isRealDevice()) {
          defaultHost = this.opts.address;
          urlObject = _url2['default'].parse(responseUrl);

          if (urlObject.hostname === defaultHost) {
            _logger2['default'].debug('Real device safari test and no custom callback address ' + 'set, changing callback address to local ip.');
            urlObject.hostname = _appiumSupport.util.localIp();
            urlObject.host = null; // set to null, otherwise hostname is ignored
            responseUrl = _url2['default'].format(urlObject);
          } else {
            _logger2['default'].debug('Custom callback address set, leaving as is.');
          }
        }

        _logger2['default'].debug('Response url for executeAsync: ' + responseUrl);
        args = this.convertElementsForAtoms(args);
        context$1$0.next = 13;
        return _regeneratorRuntime.awrap(this.executeAtomAsync('execute_async_script', [script, args, this.asyncWaitMs], responseUrl));

      case 13:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 14:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.receiveAsyncResponse = function callee$0$0(status, value) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Received async response: ' + JSON.stringify(value));
        if (!_lodash2['default'].isNull(this.asyncPromise) && !_lodash2['default'].isUndefined(this.asyncPromise)) {
          if (status !== 0) {
            this.asyncPromise.reject((0, _mobileJsonWireProtocol.errorFromCode)(status, value.message));
          } else {
            this.asyncPromise.resolve(value);
          }
        } else {
          _logger2['default'].warn('Received async response when we were not expecting one! ' + ('Response was: ' + JSON.stringify(value)));
        }

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.asyncScriptTimeout = function callee$0$0(ms) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        this.asyncWaitMs = parseInt(ms, 10);
        _logger2['default'].debug('Set iOS async script timeout to ' + ms + ' ms');

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.executeMobile = function callee$0$0(mobileCommand) {
  var opts = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!(mobileCommand === 'scroll')) {
          context$1$0.next = 5;
          break;
        }

        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(this.mobileScroll(opts));

      case 3:
        context$1$0.next = 6;
        break;

      case 5:
        throw new _mobileJsonWireProtocol.errors.UnknownCommandError('Unknown command, all the mobile commands except scroll have been removed.');

      case 6:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

_Object$assign(extensions, commands, helpers);
exports.commands = commands;
exports.helpers = helpers;
exports['default'] = extensions;

// we only support mobile: scroll
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9leGVjdXRlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztzQ0FBc0MsMkJBQTJCOztzQkFDbkQsUUFBUTs7OzttQkFDTixLQUFLOzs7OzZCQUNBLGdCQUFnQjs7c0JBQ2xCLFdBQVc7Ozs7QUFHOUIsSUFBSSxRQUFRLEdBQUcsRUFBRTtJQUFFLE9BQU8sR0FBRyxFQUFFO0lBQUUsVUFBVSxHQUFHLEVBQUUsQ0FBQzs7QUFFakQsUUFBUSxDQUFDLE9BQU8sR0FBRyxvQkFBZ0IsTUFBTSxFQUFFLElBQUk7Ozs7YUFDekMsSUFBSSxDQUFDLFlBQVksRUFBRTs7Ozs7QUFDckIsWUFBSSxHQUFHLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsQ0FBQzs7eUNBQzdCLElBQUksQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7Ozs7OzthQUUzRCxNQUFNLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQzs7Ozs7QUFDM0IsY0FBTSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDOzt5Q0FDbkMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsb0JBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7Ozs7Ozs7eUNBRTVELElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQzs7Ozs7Ozs7OztDQUd2RCxDQUFDOztBQUVGLFFBQVEsQ0FBQyxZQUFZLEdBQUcsb0JBQWdCLE1BQU0sRUFBRSxJQUFJLEVBQUUsU0FBUztNQUt6RCxPQUFPLEVBQ1AsSUFBSSxFQUVKLFdBQVcsRUFHVCxXQUFXLEVBQ1gsU0FBUzs7OztZQVhWLElBQUksQ0FBQyxZQUFZLEVBQUU7Ozs7Ozt5Q0FDVCxJQUFJLENBQUMsWUFBWSxDQUFD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LEdBQVIsUUFBUTtRQUFFLE9BQU8sR0FBUCxPQUFPO3FCQUNYLFVBQVUiLCJmaWxlIjoibGliL2NvbW1hbmRzL2V4ZWN1dGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlcnJvcnMsIGVycm9yRnJvbUNvZGUgfSBmcm9tICdtb2JpbGUtanNvbi13aXJlLXByb3RvY29sJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgdXJsIGZyb20gJ3VybCc7XG5pbXBvcnQgeyB1dGlsIH0gZnJvbSAnYXBwaXVtLXN1cHBvcnQnO1xuaW1wb3J0IGxvZ2dlciBmcm9tICcuLi9sb2dnZXInO1xuXG5cbmxldCBjb21tYW5kcyA9IHt9LCBoZWxwZXJzID0ge30sIGV4dGVuc2lvbnMgPSB7fTtcblxuY29tbWFuZHMuZXhlY3V0ZSA9IGFzeW5jIGZ1bmN0aW9uIChzY3JpcHQsIGFyZ3MpIHtcbiAgaWYgKHRoaXMuaXNXZWJDb250ZXh0KCkpIHtcbiAgICBhcmdzID0gdGhpcy5jb252ZXJ0RWxlbWVudHNGb3JBdG9tcyhhcmdzKTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5leGVjdXRlQXRvbSgnZXhlY3V0ZV9zY3JpcHQnLCBbc2NyaXB0LCBhcmdzXSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHNjcmlwdC5tYXRjaCgvXm1vYmlsZVxcOi8pKSB7XG4gICAgICBzY3JpcHQgPSBzY3JpcHQucmVwbGFjZSgvXm1vYmlsZVxcOi8sICcnKS50cmltKCk7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5leGVjdXRlTW9iaWxlKHNjcmlwdCwgXy5pc0FycmF5KGFyZ3MpID8gYXJnc1swXSA6IGFyZ3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy51aUF1dG9DbGllbnQuc2VuZENvbW1hbmQoc2NyaXB0KTtcbiAgICB9XG4gIH1cbn07XG5cbmNvbW1hbmRzLmV4ZWN1dGVBc3luYyA9IGFzeW5jIGZ1bmN0aW9uIChzY3JpcHQsIGFyZ3MsIHNlc3Npb25JZCkge1xuICBpZiAoIXRoaXMuaXNXZWJDb250ZXh0KCkpIHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy51aUF1dG9DbGllbnQuc2VuZENvbW1hbmQoc2NyaXB0KTtcbiAgfVxuXG4gIGxldCBhZGRyZXNzID0gdGhpcy5vcHRzLmNhbGxiYWNrQWRkcmVzcyB8fCB0aGlzLm9wdHMuYWRkcmVzcztcbiAgbGV0IHBvcnQgPSB0aGlzLm9wdHMuY2FsbGJhY2tQb3J0IHx8IHRoaXMub3B0cy5wb3J0O1xuICBzZXNzaW9uSWQgPSBzZXNzaW9uSWQgfHwgdGhpcy5zZXNzaW9uSWQ7XG4gIGxldCByZXNwb25zZVVybCA9IGBodHRwOi8vJHthZGRyZXNzfToke3BvcnR9L3dkL2h1Yi9zZXNzaW9uLyR7c2Vzc2lvbklkfS9yZWNlaXZlX2FzeW5jX3Jlc3BvbnNlYDtcblxuICBpZiAodGhpcy5pc1JlYWxEZXZpY2UoKSkge1xuICAgIGxldCBkZWZhdWx0SG9zdCA9IHRoaXMub3B0cy5hZGRyZXNzO1xuICAgIGxldCB1cmxPYmplY3QgPSB1cmwucGFyc2UocmVzcG9uc2VVcmwpO1xuICAgIGlmICh1cmxPYmplY3QuaG9zdG5hbWUgPT09IGRlZmF1bHRIb3N0KSB7XG4gICAgICBsb2dnZXIuZGVidWcoJ1JlYWwgZGV2aWNlIHNhZmFyaSB0ZXN0IGFuZCBubyBjdXN0b20gY2FsbGJhY2sgYWRkcmVzcyAnICtcbiAgICAgICAgICAgICAgICAgICAnc2V0LCBjaGFuZ2luZyBjYWxsYmFjayBhZGRyZXNzIHRvIGxvY2FsIGlwLicpO1xuICAgICAgdXJsT2JqZWN0Lmhvc3RuYW1lID0gdXRpbC5sb2NhbElwKCk7XG4gICAgICB1cmxPYmplY3QuaG9zdCA9IG51bGw7IC8vIHNldCB0byBudWxsLCBvdGhlcndpc2UgaG9zdG5hbWUgaXMgaWdub3JlZFxuICAgICAgcmVzcG9uc2VVcmwgPSB1cmwuZm9ybWF0KHVybE9iamVjdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvZ2dlci5kZWJ1ZygnQ3VzdG9tIGNhbGxiYWNrIGFkZHJlc3Mgc2V0LCBsZWF2aW5nIGFzIGlzLicpO1xuICAgIH1cbiAgfVxuXG4gIGxvZ2dlci5kZWJ1ZyhgUmVzcG9uc2UgdXJsIGZvciBleGVjdXRlQXN5bmM6ICR7cmVzcG9uc2VVcmx9YCk7XG4gIGFyZ3MgPSB0aGlzLmNvbnZlcnRFbGVtZW50c0ZvckF0b21zKGFyZ3MpO1xuICByZXR1cm4gYXdhaXQgdGhpcy5leGVjdXRlQXRvbUFzeW5jKCdleGVjdXRlX2FzeW5jX3NjcmlwdCcsIFtzY3JpcHQsIGFyZ3MsIHRoaXMuYXN5bmNXYWl0TXNdLCByZXNwb25zZVVybCk7XG59O1xuXG5jb21tYW5kcy5yZWNlaXZlQXN5bmNSZXNwb25zZSA9IGFzeW5jIGZ1bmN0aW9uIChzdGF0dXMsIHZhbHVlKSB7XG4gIGxvZ2dlci5kZWJ1ZyhgUmVjZWl2ZWQgYXN5bmMgcmVzcG9uc2U6ICR7SlNPTi5zdHJpbmdpZnkodmFsdWUpfWApO1xuICBpZiAoIV8uaXNOdWxsKHRoaXMuYXN5bmNQcm9taXNlKSAmJiAhXy5pc1VuZGVmaW5lZCh0aGlzLmFzeW5jUHJvbWlzZSkpIHtcbiAgICBpZiAoc3RhdHVzICE9PSAwKSB7XG4gICAgICB0aGlzLmFzeW5jUHJvbWlzZS5yZWplY3QoZXJyb3JGcm9tQ29kZShzdGF0dXMsIHZhbHVlLm1lc3NhZ2UpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hc3luY1Byb21pc2UucmVzb2x2ZSh2YWx1ZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxvZ2dlci53YXJuKGBSZWNlaXZlZCBhc3luYyByZXNwb25zZSB3aGVuIHdlIHdlcmUgbm90IGV4cGVjdGluZyBvbmUhIGAgK1xuICAgICAgICAgICAgICAgIGBSZXNwb25zZSB3YXM6ICR7SlNPTi5zdHJpbmdpZnkodmFsdWUpfWApO1xuICB9XG59O1xuXG5jb21tYW5kcy5hc3luY1NjcmlwdFRpbWVvdXQgPSBhc3luYyBmdW5jdGlvbiAobXMpIHtcbiAgdGhpcy5hc3luY1dhaXRNcyA9IHBhcnNlSW50KG1zLCAxMCk7XG4gIGxvZ2dlci5kZWJ1ZyhgU2V0IGlPUyBhc3luYyBzY3JpcHQgdGltZW91dCB0byAke21zfSBtc2ApO1xufTtcblxuY29tbWFuZHMuZXhlY3V0ZU1vYmlsZSA9IGFzeW5jIGZ1bmN0aW9uIChtb2JpbGVDb21tYW5kLCBvcHRzPXt9KSB7XG4gIC8vIHdlIG9ubHkgc3VwcG9ydCBtb2JpbGU6IHNjcm9sbFxuICBpZiAobW9iaWxlQ29tbWFuZCA9PT0gJ3Njcm9sbCcpIHtcbiAgICBhd2FpdCB0aGlzLm1vYmlsZVNjcm9sbChvcHRzKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLlVua25vd25Db21tYW5kRXJyb3IoJ1Vua25vd24gY29tbWFuZCwgYWxsIHRoZSBtb2JpbGUgY29tbWFuZHMgZXhjZXB0IHNjcm9sbCBoYXZlIGJlZW4gcmVtb3ZlZC4nKTtcbiAgfVxufTtcblxuT2JqZWN0LmFzc2lnbihleHRlbnNpb25zLCBjb21tYW5kcywgaGVscGVycyk7XG5leHBvcnQgeyBjb21tYW5kcywgaGVscGVycyB9O1xuZXhwb3J0IGRlZmF1bHQgZXh0ZW5zaW9ucztcbiJdfQ==