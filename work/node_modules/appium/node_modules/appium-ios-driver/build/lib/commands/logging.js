'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var commands = {};

var SUPPORTED_LOG_TYPES = {
  'syslog': 'System Logs - Device logs for iOS applications on real devices and simulators',
  'crashlog': 'Crash Logs - Crash reports for iOS applications on real devices and simulators',
  'performance': 'Performance Logs - Debug Timelines on real devices and simulators'
};

commands.getLogTypes = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Retrieving supported log types');
        return context$1$0.abrupt('return', _lodash2['default'].keys(SUPPORTED_LOG_TYPES));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.getLog = function callee$0$0(logType) {
  var logs;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Retrieving \'' + logType + '\' logs');
        // Check if passed logType is supported

        if (_lodash2['default'].has(SUPPORTED_LOG_TYPES, logType)) {
          context$1$0.next = 3;
          break;
        }

        throw new Error('Unsupported log type \'' + logType + '\' for this device. Supported types : ' + JSON.stringify(SUPPORTED_LOG_TYPES));

      case 3:
        if (!_lodash2['default'].isEmpty(this.logs)) {
          context$1$0.next = 5;
          break;
        }

        throw new Error('No logs currently available. Is the device/simulator started?');

      case 5:
        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(this.logs[logType].getLogs());

      case 7:
        logs = context$1$0.sent;

        if (!logs) {
          context$1$0.next = 12;
          break;
        }

        return context$1$0.abrupt('return', logs);

      case 12:
        throw new Error('No logs of type \'' + logType + '\' found.');

      case 13:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

exports.commands = commands;
exports.SUPPORTED_LOG_TYPES = SUPPORTED_LOG_TYPES;
exports['default'] = commands;

// make sure that we have logs at all
// otherwise it's not been initialized

// If logs captured successfully send response with data, else send error
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9sb2dnaW5nLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7c0JBQWMsUUFBUTs7OztzQkFDSCxXQUFXOzs7O0FBRTlCLElBQUksUUFBUSxHQUFHLEVBQUUsQ0FBQzs7QUFFbEIsSUFBTSxtQkFBbUIsR0FBRztBQUMxQixVQUFRLEVBQUUsK0VBQStFO0FBQ3pGLFlBQVUsRUFBRSxnRkFBZ0Y7QUFDNUYsZUFBYSxFQUFFLG1FQUFtRTtDQUNuRixDQUFDOztBQUVGLFFBQVEsQ0FBQyxXQUFXLEdBQUc7Ozs7QUFDckIsNEJBQU8sS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7NENBQ3hDLG9CQUFFLElBQUksQ0FBQyxtQkFBbUIsQ0FBQzs7Ozs7OztDQUNuQyxDQUFDOztBQUVGLFFBQVEsQ0FBQyxNQUFNLEdBQUcsb0JBQWdCLE9BQU87TUFjbkMsSUFBSTs7OztBQWJSLDRCQUFPLEtBQUssbUJBQWdCLE9BQU8sYUFBUyxDQUFDOzs7WUFFeEMsb0JBQUUsR0FBRyxDQUFDLG1CQUFtQixFQUFFLE9BQU8sQ0FBQzs7Ozs7Y0FDaEMsSUFBSSxLQUFLLDZCQUEwQixPQUFPLDhDQUF3QyxJQUFJLENBQUMsU0FBUyxDQUFDLG1CQUFtQixDQUFDLENBQUc7OzthQUs1SCxvQkFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQzs7Ozs7Y0FDaEIsSUFBSSxLQUFLLENBQUMsK0RBQStELENBQUM7Ozs7eUNBSWpFLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFOzs7QUFBekMsWUFBSTs7YUFDSixJQUFJOzs7Ozs0Q0FDQyxJQUFJOzs7Y0FFTCxJQUFJLEtBQUssd0JBQXFCLE9BQU8sZUFBVzs7Ozs7OztDQUV6RCxDQUFDOztRQUVPLFFBQVEsR0FBUixRQUFRO1FBQUUsbUJBQW1CLEdBQW5CLG1CQUFtQjtxQkFDdkIsUUFBUSIsImZpbGUiOiJsaWIvY29tbWFuZHMvbG9nZ2luZy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgbG9nZ2VyIGZyb20gJy4uL2xvZ2dlcic7XG5cbmxldCBjb21tYW5kcyA9IHt9O1xuXG5jb25zdCBTVVBQT1JURURfTE9HX1RZUEVTID0ge1xuICAnc3lzbG9nJzogJ1N5c3RlbSBMb2dzIC0gRGV2aWNlIGxvZ3MgZm9yIGlPUyBhcHBsaWNhdGlvbnMgb24gcmVhbCBkZXZpY2VzIGFuZCBzaW11bGF0b3JzJyxcbiAgJ2NyYXNobG9nJzogJ0NyYXNoIExvZ3MgLSBDcmFzaCByZXBvcnRzIGZvciBpT1MgYXBwbGljYXRpb25zIG9uIHJlYWwgZGV2aWNlcyBhbmQgc2ltdWxhdG9ycycsXG4gICdwZXJmb3JtYW5jZSc6ICdQZXJmb3JtYW5jZSBMb2dzIC0gRGVidWcgVGltZWxpbmVzIG9uIHJlYWwgZGV2aWNlcyBhbmQgc2ltdWxhdG9ycydcbn07XG5cbmNvbW1hbmRzLmdldExvZ1R5cGVzID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICBsb2dnZXIuZGVidWcoJ1JldHJpZXZpbmcgc3VwcG9ydGVkIGxvZyB0eXBlcycpO1xuICByZXR1cm4gXy5rZXlzKFNVUFBPUlRFRF9MT0dfVFlQRVMpO1xufTtcblxuY29tbWFuZHMuZ2V0TG9nID0gYXN5bmMgZnVuY3Rpb24gKGxvZ1R5cGUpIHtcbiAgbG9nZ2VyLmRlYnVnKGBSZXRyaWV2aW5nICcke2xvZ1R5cGV9JyBsb2dzYCk7XG4gIC8vIENoZWNrIGlmIHBhc3NlZCBsb2dUeXBlIGlzIHN1cHBvcnRlZFxuICBpZiAoIV8uaGFzKFNVUFBPUlRFRF9MT0dfVFlQRVMsIGxvZ1R5cGUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBsb2cgdHlwZSAnJHtsb2dUeXBlfScgZm9yIHRoaXMgZGV2aWNlLiBTdXBwb3J0ZWQgdHlwZXMgOiAke0pTT04uc3RyaW5naWZ5KFNVUFBPUlRFRF9MT0dfVFlQRVMpfWApO1xuICB9XG5cbiAgLy8gbWFrZSBzdXJlIHRoYXQgd2UgaGF2ZSBsb2dzIGF0IGFsbFxuICAvLyBvdGhlcndpc2UgaXQncyBub3QgYmVlbiBpbml0aWFsaXplZFxuICBpZiAoXy5pc0VtcHR5KHRoaXMubG9ncykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGxvZ3MgY3VycmVudGx5IGF2YWlsYWJsZS4gSXMgdGhlIGRldmljZS9zaW11bGF0b3Igc3RhcnRlZD8nKTtcbiAgfVxuXG4gIC8vIElmIGxvZ3MgY2FwdHVyZWQgc3VjY2Vzc2Z1bGx5IHNlbmQgcmVzcG9uc2Ugd2l0aCBkYXRhLCBlbHNlIHNlbmQgZXJyb3JcbiAgbGV0IGxvZ3MgPSBhd2FpdCB0aGlzLmxvZ3NbbG9nVHlwZV0uZ2V0TG9ncygpO1xuICBpZiAobG9ncykge1xuICAgIHJldHVybiBsb2dzO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihgTm8gbG9ncyBvZiB0eXBlICcke2xvZ1R5cGV9JyBmb3VuZC5gKTtcbiAgfVxufTtcblxuZXhwb3J0IHsgY29tbWFuZHMsIFNVUFBPUlRFRF9MT0dfVFlQRVMgfTtcbmV4cG9ydCBkZWZhdWx0IGNvbW1hbmRzO1xuIl19