'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _mobileJsonWireProtocol = require('mobile-json-wire-protocol');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _utils = require('../utils');

var commands = {},
    helpers = {},
    extensions = {};
var FLICK_MS = 3000;

commands.nativeTap = function callee$0$0(el) {
  var command;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        el = (0, _utils.unwrapEl)(el);
        command = 'au.tapById(\'' + el + '\')';
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.uiAutoClient.sendCommand(command));

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.click = function callee$0$0(el) {
  var atomsElement;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        el = (0, _utils.unwrapEl)(el);

        if (!this.isWebContext()) {
          context$1$0.next = 13;
          break;
        }

        if (!(this.opts.nativeWebTap && !this.isRealDevice())) {
          context$1$0.next = 7;
          break;
        }

        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.nativeWebTap(el));

      case 5:
        context$1$0.next = 11;
        break;

      case 7:
        atomsElement = this.useAtomsElement(el);
        context$1$0.next = 10;
        return _regeneratorRuntime.awrap(this.executeAtom('click', [atomsElement]));

      case 10:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 11:
        context$1$0.next = 19;
        break;

      case 13:
        if (!this.opts.useRobot) {
          context$1$0.next = 17;
          break;
        }

        throw new _mobileJsonWireProtocol.errors.NotYetImplementedError();

      case 17:
        context$1$0.next = 19;
        return _regeneratorRuntime.awrap(this.nativeTap(el));

      case 19:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.clickCurrent = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!this.isWebContext()) {
          context$1$0.next = 7;
          break;
        }

        if (!_lodash2['default'].isNull(this.curWebCoords)) {
          context$1$0.next = 3;
          break;
        }

        throw new _mobileJsonWireProtocol.errors.UnknownError('Cannot call click() before calling moveTo() to set coords');

      case 3:
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.clickWebCoords());

      case 5:
        context$1$0.next = 11;
        break;

      case 7:
        if (!(this.curCoords === null)) {
          context$1$0.next = 9;
          break;
        }

        throw new _mobileJsonWireProtocol.errors.UnknownError("Cannot call click() before calling moveTo() to set coords");

      case 9:
        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(this.clickCoords(this.curCoords));

      case 11:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.clickCoords = function callee$0$0(coords) {
  var opts, command;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!this.opts.useRobot) {
          context$1$0.next = 4;
          break;
        }

        throw new _mobileJsonWireProtocol.errors.NotYetImplementedError();

      case 4:
        opts = coords;

        opts.tapCount = 1;
        opts.duration = 0.3;
        opts.touchCount = 1;
        command = 'au.complexTap(' + JSON.stringify(opts) + ')';
        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(this.uiAutoClient.sendCommand(command));

      case 11:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.mobileRotation = function callee$0$0(x, y, radius, rotation, touchCount, duration, el) {
  var location, options;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!this.isWebContext()) {
          context$1$0.next = 2;
          break;
        }

        throw new _mobileJsonWireProtocol.errors.NotYetImplementedError();

      case 2:
        el = (0, _utils.unwrapEl)(el);
        location = { 'x': x, 'y': y };
        options = { 'duration': duration, 'radius': radius, 'rotation': rotation, 'touchCount': touchCount };

        if (!el) {
          context$1$0.next = 12;
          break;
        }

        if (!this.isWebContext()) {
          context$1$0.next = 8;
          break;
        }

        throw new _mobileJsonWireProtocol.errors.NotYetImplementedError();

      case 8:
        context$1$0.next = 10;
        return _regeneratorRuntime.awrap(this.uiAutoClient.sendCommand(
        // UIAElement.rotateWithOptions takes only one options param.
        'au.getElement(\'' + el + '\').rotateWithOptions(' + JSON.stringify(options) + ')'));

      case 10:
        context$1$0.next = 14;
        break;

      case 12:
        context$1$0.next = 14;
        return _regeneratorRuntime.awrap(this.uiAutoClient.sendCommand('target.rotateWithOptions(' + JSON.stringify(location) + ', ' + JSON.stringify(options) + ')'));

      case 14:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.handleTap = function callee$0$0(gesture) {
  var options, cmdBase, rect, offsetX, offsetY, size, opts, cmd;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        options = gesture.options;
        cmdBase = options.element ? 'au.getElement(\'' + options.element + '\')' : 'UIATarget.localTarget().frontMostApp()';
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.uiAutoClient.sendCommand(cmdBase + '.rect()'));

      case 4:
        rect = context$1$0.sent;
        offsetX = 0.5;
        offsetY = 0.5;
        size = { w: rect.size.width, h: rect.size.height };

        // default options x/y to center, no matter the container
        options.x = options.x || size.w / 2;
        options.y = options.y || size.h / 2;

        offsetX = options.x / size.w;
        offsetY = options.y / size.h;

        opts = {
          tapOffset: {
            x: offsetX,
            y: offsetY
          },
          tapCount: options.count || 1,
          touchCount: 1
        };
        cmd = cmdBase + '.tapWithOptions(' + JSON.stringify(opts) + ')';
        context$1$0.next = 16;
        return _regeneratorRuntime.awrap(this.uiAutoClient.sendCommand(cmd));

      case 16:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 17:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.performTouch = function callee$0$0(gestures) {
  var touchStateObjects;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!this.isWebContext()) {
          context$1$0.next = 2;
          break;
        }

        throw new _mobileJsonWireProtocol.errors.NotYetImplementedError();

      case 2:
        if (!(gestures.length === 1 && gestures[0].action === 'tap')) {
          context$1$0.next = 6;
          break;
        }

        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.handleTap(gestures[0]));

      case 5:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 6:
        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(this.parseTouch(gestures));

      case 8:
        touchStateObjects = context$1$0.sent;
        context$1$0.next = 11;
        return _regeneratorRuntime.awrap(this.uiAutoClient.sendCommand('target.touch(' + JSON.stringify(touchStateObjects) + ')'));

      case 11:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.parseTouch = function callee$0$0(gestures) {
  var touchStateObjects, finishParsing, needsPoint, cycleThroughGestures;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        // `release` is automatic in iOS
        if (_lodash2['default'].last(gestures).action === 'release') {
          gestures.pop();
        }

        touchStateObjects = [];

        finishParsing = function finishParsing() {
          var prevPos = null;

          // we need to change the time (which is now an offset)
          // and the position (which may be an offset)
          var time = 0;
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = _getIterator(touchStateObjects), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var state = _step.value;

              if (state.touch[0] === false) {
                // if we have no position (this happens with `wait`) we need the previous one
                state.touch[0] = prevPos;
              } else if (state.touch[0].offset && prevPos) {
                // the current position is an offset
                state.touch[0].x += prevPos.x;
                state.touch[0].y += prevPos.y;
              }
              // prevent wait => press => moveto crash
              if (state.touch[0]) {
                delete state.touch[0].offset;
                prevPos = state.touch[0];
              }

              var timeOffset = state.timeOffset;
              time += timeOffset;
              state.time = time;

              delete state.timeOffset;
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator['return']) {
                _iterator['return']();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
        };

        needsPoint = function needsPoint(action) {
          return _lodash2['default'].includes(['press', 'moveTo', 'tap', 'longPress'], action);
        };

        cycleThroughGestures = function cycleThroughGestures() {
          var gesture, tapPoint, el, command, rect, pos, size, touchStateObject, offset;
          return _regeneratorRuntime.async(function cycleThroughGestures$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                gesture = gestures.shift();

                if (!(typeof gesture === "undefined")) {
                  context$2$0.next = 3;
                  break;
                }

                return context$2$0.abrupt('return', finishParsing());

              case 3:
                tapPoint = false;

                if (!needsPoint(gesture.action)) {
                  context$2$0.next = 27;
                  break;
                }

                el = gesture.options.element;

                if (!el) {
                  context$2$0.next = 20;
                  break;
                }

                command = 'au.getElement(\'' + el + '\').rect()';
                context$2$0.next = 10;
                return _regeneratorRuntime.awrap(this.uiAutoClient.sendCommand(command));

              case 10:
                rect = context$2$0.sent;
                pos = { x: rect.origin.x, y: rect.origin.y };
                size = { w: rect.size.width, h: rect.size.height };

                if (gesture.options.x || gesture.options.y) {
                  tapPoint = {
                    offset: false,
                    x: pos.x + (gesture.options.x || 0),
                    y: pos.y + (gesture.options.y || 0)
                  };
                } else {
                  tapPoint = {
                    offset: false,
                    x: pos.x + size.w / 2,
                    y: pos.y + size.h / 2
                  };
                }

                touchStateObject = {
                  timeOffset: 0.2,
                  touch: [tapPoint]
                };

                touchStateObjects.push(touchStateObject);
                context$2$0.next = 18;
                return _regeneratorRuntime.awrap(cycleThroughGestures());

              case 18:
                context$2$0.next = 25;
                break;

              case 20:
                // iOS expects absolute coordinates, so we need to save these as offsets
                // and then translate when everything is done
                tapPoint = {
                  offset: true,
                  x: gesture.options.x || 0,
                  y: gesture.options.y || 0
                };
                touchStateObject = {
                  timeOffset: 0.2,
                  touch: [tapPoint]
                };

                touchStateObjects.push(touchStateObject);
                context$2$0.next = 25;
                return _regeneratorRuntime.awrap(cycleThroughGestures());

              case 25:
                context$2$0.next = 34;
                break;

              case 27:
                // in this case we need the previous entry's tap point
                tapPoint = false; // temporary marker
                offset = 0.2;

                if (gesture.action === 'wait') {
                  if (typeof gesture.options.ms !== 'undefined' || gesture.options.ms !== null) {
                    offset = parseInt(gesture.options.ms) / 1000;
                  }
                }
                touchStateObject = {
                  timeOffset: offset,
                  touch: [tapPoint]
                };

                touchStateObjects.push(touchStateObject);
                context$2$0.next = 34;
                return _regeneratorRuntime.awrap(cycleThroughGestures());

              case 34:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this);
        };

        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(cycleThroughGestures());

      case 7:
        return context$1$0.abrupt('return', touchStateObjects);

      case 8:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

var mergeStates = function mergeStates(states) {
  var getSlice = function getSlice(states, index) {
    var array = [];
    for (var i = 0; i < states.length; i++) {
      array.push(states[i][index]);
    }

    return array;
  };

  var timeSequence = function timeSequence(states) {
    var seq = [];
    _lodash2['default'].each(states, function (state) {
      var times = _lodash2['default'].map(state, "time");
      seq = _lodash2['default'].union(seq, times);
    });

    return seq.sort();
  };

  // for now we will just assume that the times line up
  var merged = [];
  _lodash2['default'].each(timeSequence(states), function (time, index) {
    var slice = getSlice(states, index);
    var obj = {
      time: time,
      touch: []
    };
    _lodash2['default'].each(slice, function (action) {
      obj.touch.push(action.touch[0]);
    });
    merged.push(obj);
  });
  return merged;
};

commands.performMultiAction = function callee$0$0(actions, el) {
  var states, cycleThroughActions;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this2 = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!this.isWebContext()) {
          context$1$0.next = 2;
          break;
        }

        throw new _mobileJsonWireProtocol.errors.NotYetImplementedError();

      case 2:

        el = (0, _utils.unwrapEl)(el);
        // TODO: why elementId is not used
        states = [];

        cycleThroughActions = function cycleThroughActions() {
          var action, mergedStates, val;
          return _regeneratorRuntime.async(function cycleThroughActions$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                action = actions.shift();

                if (!(typeof action === "undefined")) {
                  context$2$0.next = 6;
                  break;
                }

                mergedStates = mergeStates(states);
                context$2$0.next = 5;
                return _regeneratorRuntime.awrap(this.uiAutoClient.sendCommand('target.touch(' + JSON.stringify(mergedStates) + ')'));

              case 5:
                return context$2$0.abrupt('return');

              case 6:
                context$2$0.next = 8;
                return _regeneratorRuntime.awrap(this.parseTouch(action));

              case 8:
                val = context$2$0.sent;

                states.push(val);
                context$2$0.next = 12;
                return _regeneratorRuntime.awrap(cycleThroughActions());

              case 12:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this2);
        };

        context$1$0.next = 7;
        return _regeneratorRuntime.awrap(cycleThroughActions());

      case 7:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.mobileScroll = function callee$0$0() {
  var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
  var direction, el, command;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        direction = opts.direction;
        el = opts.element;

        el = (0, _utils.unwrapEl)(el);

        if (!this.isWebContext()) {
          context$1$0.next = 7;
          break;
        }

        throw new _mobileJsonWireProtocol.errors.NotYetImplementedError();

      case 7:
        direction = direction.charAt(0).toUpperCase() + direction.slice(1);
        command = undefined;

        if (_lodash2['default'].isNull(el) || _lodash2['default'].isUndefined(el)) {
          // By default, scroll the first scrollview.
          command = 'au.scrollFirstView(\'' + direction + '\')';
        } else {
          // if element is defined, call scrollLeft, scrollRight, scrollUp, and scrollDown on the element.
          command = 'au.getElement(\'' + el + '\').scroll' + direction + '()';
        }
        context$1$0.next = 12;
        return _regeneratorRuntime.awrap(this.uiAutoClient.sendCommand(command));

      case 12:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.flick = function callee$0$0(el, xspeed, yspeed, xoffset, yoffset, speed) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        el = (0, _utils.unwrapEl)(el);

        if (!_lodash2['default'].every([el, xoffset, yoffset, speed], function (p) {
          return !_lodash2['default'].isNull(p) && !_lodash2['default'].isUndefined(p);
        })) {
          context$1$0.next = 6;
          break;
        }

        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.flickElement(el, xoffset, yoffset, speed));

      case 4:
        context$1$0.next = 12;
        break;

      case 6:
        if (!_lodash2['default'].every([xspeed, yspeed], function (p) {
          return !_lodash2['default'].isNull(p) && !_lodash2['default'].isUndefined(p);
        })) {
          context$1$0.next = 11;
          break;
        }

        context$1$0.next = 9;
        return _regeneratorRuntime.awrap(this.xySpeedFlick(xspeed, yspeed));

      case 9:
        context$1$0.next = 12;
        break;

      case 11:
        throw new _mobileJsonWireProtocol.errors.UnknownError('Bad flick parameters, pass either (xspeed, yspeed) or (element, xoffset, yoffset, speed)!');

      case 12:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.xySpeedFlick = function callee$0$0(xSpeed, ySpeed) {
  var command;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        command = 'au.touchFlickFromSpeed(' + xSpeed + ',' + ySpeed + ')';
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap(_bluebird2['default'].all([this.uiAutoClient.sendCommand(command), _bluebird2['default'].delay(FLICK_MS)]));

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.flickElement = function callee$0$0(el, xoffset, yoffset, speed) {
  var command;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        el = (0, _utils.unwrapEl)(el);
        command = "";

        if (!this.isWebContext()) {
          context$1$0.next = 7;
          break;
        }

        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(this.webFlickElement(el, xoffset, yoffset));

      case 5:
        context$1$0.next = 10;
        break;

      case 7:
        command = 'au.getElement(\'' + el + '\').touchFlick(' + xoffset + ',' + yoffset + ',' + speed + ')';
        context$1$0.next = 10;
        return _regeneratorRuntime.awrap(_bluebird2['default'].all([this.uiAutoClient.sendCommand(command), _bluebird2['default'].delay(FLICK_MS)]));

      case 10:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

// TODO: maybe rename this in mjsonwp
commands.mobileShake = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(this.uiAutoClient.sendCommand("au.shake()"));

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.moveTo = function callee$0$0(el) {
  var xoffset = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];
  var yoffset = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];

  var _ref, x, y, coords, atomsElement, relCoords, elPos;

  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        el = (0, _utils.unwrapEl)(el);

        if (!this.isWebContext()) {
          context$1$0.next = 15;
          break;
        }

        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(this.getLocation(el));

      case 4:
        _ref = context$1$0.sent;
        x = _ref.x;
        y = _ref.y;
        coords = {
          x: x + xoffset,
          y: y + yoffset
        };

        this.curWebCoords = coords;
        atomsElement = this.useAtomsElement(el);
        relCoords = { x: xoffset, y: yoffset };
        context$1$0.next = 13;
        return _regeneratorRuntime.awrap(this.executeAtom('move_mouse', [atomsElement, relCoords]));

      case 13:
        context$1$0.next = 25;
        break;

      case 15:
        if (!(_lodash2['default'].isNull(el) || _lodash2['default'].isUndefined(el))) {
          context$1$0.next = 21;
          break;
        }

        if (this.curCoords) {
          context$1$0.next = 18;
          break;
        }

        throw new _mobileJsonWireProtocol.errors.UnknownException('Current cursor position unknown, please use moveTo with an element the first time.');

      case 18:
        this.curCoords = {
          x: this.curCoords.x + xoffset,
          y: this.curCoords.y + yoffset
        };
        context$1$0.next = 25;
        break;

      case 21:
        context$1$0.next = 23;
        return _regeneratorRuntime.awrap(this.getLocation(el));

      case 23:
        elPos = context$1$0.sent;

        this.curCoords = {
          x: elPos.x + xoffset,
          y: elPos.y + yoffset
        };

      case 25:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

_Object$assign(extensions, commands, helpers);
exports.commands = commands;
exports.helpers = helpers;
exports['default'] = extensions;

// atoms-based clicks don't always work in safari 7

/* TODO */ /*button*/
/* TODO */
// not implemented yet in the web

// start by getting the size and position of the element we are tapping

// default to center
// press, longPress, moveTo and tap all need a position

// not implemented yet in web

// speed is not used because underlying UIATarget.flickFromTo doesn't support it
//# sourceMappingURL=data:application/json;base64,