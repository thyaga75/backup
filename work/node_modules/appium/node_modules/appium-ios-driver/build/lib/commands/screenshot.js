'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _uuidJs = require('uuid-js');

var _uuidJs2 = _interopRequireDefault(_uuidJs);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _asyncbox = require('asyncbox');

var _appiumSupport = require('appium-support');

var _appiumUiauto = require('appium-uiauto');

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var _mobileJsonWireProtocol = require('mobile-json-wire-protocol');

var commands = {},
    helpers = {},
    extensions = {};

commands.getScreenshot = function callee$0$0() {
  var guid, shotFile, shotFolder, shotPath, takeScreenShot, data;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    var _this = this;

    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        guid = _uuidJs2['default'].create();
        shotFile = 'screenshot' + guid;
        shotFolder = _path2['default'].resolve(this.opts.tmpDir, 'appium-instruments/Run 1/');
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(shotFolder));

      case 5:
        if (context$1$0.sent) {
          context$1$0.next = 8;
          break;
        }

        context$1$0.next = 8;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.mkdirp(shotFolder));

      case 8:
        shotPath = _path2['default'].resolve(shotFolder, shotFile + '.png');

        _logger2['default'].debug('Taking screenshot: \'' + shotPath + '\'');

        takeScreenShot = function takeScreenShot() {
          var screenshotWaitTimeout, startMs, success;
          return _regeneratorRuntime.async(function takeScreenShot$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                context$2$0.next = 2;
                return _regeneratorRuntime.awrap(this.uiAutoClient.sendCommand('au.capture(\'' + shotFile + '\')'));

              case 2:
                screenshotWaitTimeout = (this.opts.screenshotWaitTimeout || 10) * 1000;

                _logger2['default'].debug('Waiting ' + screenshotWaitTimeout + ' ms for screenshot to be generated.');
                startMs = Date.now();
                success = false;

              case 6:
                if (!(Date.now() - startMs < screenshotWaitTimeout)) {
                  context$2$0.next = 16;
                  break;
                }

                context$2$0.next = 9;
                return _regeneratorRuntime.awrap(_appiumSupport.fs.hasAccess(shotPath));

              case 9:
                if (!context$2$0.sent) {
                  context$2$0.next = 12;
                  break;
                }

                success = true;
                return context$2$0.abrupt('break', 16);

              case 12:
                context$2$0.next = 14;
                return _regeneratorRuntime.awrap(_bluebird2['default'].delay(300));

              case 14:
                context$2$0.next = 6;
                break;

              case 16:
                if (success) {
                  context$2$0.next = 18;
                  break;
                }

                throw new _mobileJsonWireProtocol.errors.UnknownError('Timed out waiting for screenshot file');

              case 18:
                context$2$0.next = 20;
                return _regeneratorRuntime.awrap(this.getOrientation());

              case 20:
                context$2$0.t0 = context$2$0.sent;

                if (!(context$2$0.t0 === 'LANDSCAPE')) {
                  context$2$0.next = 25;
                  break;
                }

                _logger2['default'].debug('Rotating landscape screenshot');
                context$2$0.next = 25;
                return _regeneratorRuntime.awrap(_appiumUiauto.utils.rotateImage(shotPath, -90));

              case 25:
                context$2$0.next = 27;
                return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(shotPath));

              case 27:
                return context$2$0.abrupt('return', context$2$0.sent);

              case 28:
              case 'end':
                return context$2$0.stop();
            }
          }, null, _this);
        };

        context$1$0.next = 13;
        return _regeneratorRuntime.awrap((0, _asyncbox.retry)(3, takeScreenShot));

      case 13:
        data = context$1$0.sent;
        return context$1$0.abrupt('return', new Buffer(data).toString('base64'));

      case 15:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

_Object$assign(extensions, commands, helpers);
exports.commands = commands;
exports.helpers = helpers;
exports['default'] = extensions;

// check the rotation, and rotate if necessary

// Retrying the whole screenshot process for three times.
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9zY3JlZW5zaG90LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztzQkFBaUIsU0FBUzs7Ozt3QkFDWixVQUFVOzs7O29CQUNQLE1BQU07Ozs7d0JBQ0QsVUFBVTs7NkJBQ2IsZ0JBQWdCOzs0QkFDYixlQUFlOztzQkFDbEIsV0FBVzs7OztzQ0FDUCwyQkFBMkI7O0FBR2xELElBQUksUUFBUSxHQUFHLEVBQUU7SUFBRSxPQUFPLEdBQUcsRUFBRTtJQUFFLFVBQVUsR0FBRyxFQUFFLENBQUM7O0FBRWpELFFBQVEsQ0FBQyxhQUFhLEdBQUc7TUFDbkIsSUFBSSxFQUNKLFFBQVEsRUFFUixVQUFVLEVBS1YsUUFBUSxFQUdSLGNBQWMsRUE0QmQsSUFBSTs7Ozs7O0FBdkNKLFlBQUksR0FBRyxvQkFBSyxNQUFNLEVBQUU7QUFDcEIsZ0JBQVEsa0JBQWdCLElBQUk7QUFFNUIsa0JBQVUsR0FBRyxrQkFBSyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsMkJBQTJCLENBQUM7O3lDQUNoRSxrQkFBRyxNQUFNLENBQUMsVUFBVSxDQUFDOzs7Ozs7Ozs7eUNBQ3pCLGtCQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUM7OztBQUd6QixnQkFBUSxHQUFHLGtCQUFLLE9BQU8sQ0FBQyxVQUFVLEVBQUssUUFBUSxVQUFPOztBQUMxRCw0QkFBTyxLQUFLLDJCQUF3QixRQUFRLFFBQUksQ0FBQzs7QUFFN0Msc0JBQWMsR0FBRyxTQUFqQixjQUFjO2NBR1oscUJBQXFCLEVBRXJCLE9BQU8sRUFFUCxPQUFPOzs7OztpREFOTCxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsbUJBQWdCLFFBQVEsU0FBSzs7O0FBRTVELHFDQUFxQixHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsSUFBSSxFQUFFLENBQUEsR0FBSSxJQUFJOztBQUMxRSxvQ0FBTyxLQUFLLGNBQVkscUJBQXFCLHlDQUFzQyxDQUFDO0FBQ2hGLHVCQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRTtBQUVwQix1QkFBTyxHQUFHLEtBQUs7OztzQkFDWixBQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxPQUFPLEdBQUkscUJBQXFCLENBQUE7Ozs7OztpREFDekMsa0JBQUcsU0FBUyxDQUFDLFFBQVEsQ0FBQzs7Ozs7Ozs7QUFDOUIsdUJBQU8sR0FBRyxJQUFJLENBQUM7Ozs7O2lEQUdYLHNCQUFFLEtBQUssQ0FBQyxHQUFHLENBQUM7Ozs7Ozs7b0JBRWYsT0FBTzs7Ozs7c0JBQ0osSUFBSSwrQkFBTyxZQUFZLENBQUMsdUNBQXVDLENBQUM7Ozs7aURBSTlELElBQUksQ0FBQyxjQUFjLEVBQUU7Ozs7O3lDQUFLLFdBQVc7Ozs7O0FBQzdDLG9DQUFPLEtBQUssQ0FBQywrQkFBK0IsQ0FBQyxDQUFDOztpREFDeEMsb0JBQU0sV0FBVyxDQUFDLFFBQVEsRUFBRSxDQUFDLEVBQUUsQ0FBQzs7OztpREFFM0Isa0JBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQzs7Ozs7Ozs7OztTQUNuQzs7O3lDQUdnQixxQkFBTSxDQUFDLEVBQUUsY0FBYyxDQUFDOzs7QUFBckMsWUFBSTs0Q0FDRCxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDOzs7Ozs7O0NBQzNDLENBQUM7O0FBR0YsZUFBYyxVQUFVLEVBQUUsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3BDLFFBQVEsR0FBUixRQUFRO1FBQUUsT0FBTyxHQUFQLE9BQU87cUJBQ1gsVUFBVSIsImZpbGUiOiJsaWIvY29tbWFuZHMvc2NyZWVuc2hvdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB1dWlkIGZyb20gJ3V1aWQtanMnO1xuaW1wb3J0IEIgZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyByZXRyeSB9IGZyb20gJ2FzeW5jYm94JztcbmltcG9ydCB7IGZzIH0gZnJvbSAnYXBwaXVtLXN1cHBvcnQnO1xuaW1wb3J0IHsgdXRpbHMgfSBmcm9tICdhcHBpdW0tdWlhdXRvJztcbmltcG9ydCBsb2dnZXIgZnJvbSAnLi4vbG9nZ2VyJztcbmltcG9ydCB7IGVycm9ycyB9IGZyb20gJ21vYmlsZS1qc29uLXdpcmUtcHJvdG9jb2wnO1xuXG5cbmxldCBjb21tYW5kcyA9IHt9LCBoZWxwZXJzID0ge30sIGV4dGVuc2lvbnMgPSB7fTtcblxuY29tbWFuZHMuZ2V0U2NyZWVuc2hvdCA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgbGV0IGd1aWQgPSB1dWlkLmNyZWF0ZSgpO1xuICBsZXQgc2hvdEZpbGUgPSBgc2NyZWVuc2hvdCR7Z3VpZH1gO1xuXG4gIGxldCBzaG90Rm9sZGVyID0gcGF0aC5yZXNvbHZlKHRoaXMub3B0cy50bXBEaXIsICdhcHBpdW0taW5zdHJ1bWVudHMvUnVuIDEvJyk7XG4gIGlmICghKGF3YWl0IGZzLmV4aXN0cyhzaG90Rm9sZGVyKSkpIHtcbiAgICBhd2FpdCBmcy5ta2RpcnAoc2hvdEZvbGRlcik7XG4gIH1cblxuICBsZXQgc2hvdFBhdGggPSBwYXRoLnJlc29sdmUoc2hvdEZvbGRlciwgYCR7c2hvdEZpbGV9LnBuZ2ApO1xuICBsb2dnZXIuZGVidWcoYFRha2luZyBzY3JlZW5zaG90OiAnJHtzaG90UGF0aH0nYCk7XG5cbiAgbGV0IHRha2VTY3JlZW5TaG90ID0gYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IHRoaXMudWlBdXRvQ2xpZW50LnNlbmRDb21tYW5kKGBhdS5jYXB0dXJlKCcke3Nob3RGaWxlfScpYCk7XG5cbiAgICBsZXQgc2NyZWVuc2hvdFdhaXRUaW1lb3V0ID0gKHRoaXMub3B0cy5zY3JlZW5zaG90V2FpdFRpbWVvdXQgfHwgMTApICogMTAwMDtcbiAgICBsb2dnZXIuZGVidWcoYFdhaXRpbmcgJHtzY3JlZW5zaG90V2FpdFRpbWVvdXR9IG1zIGZvciBzY3JlZW5zaG90IHRvIGJlIGdlbmVyYXRlZC5gKTtcbiAgICBsZXQgc3RhcnRNcyA9IERhdGUubm93KCk7XG5cbiAgICBsZXQgc3VjY2VzcyA9IGZhbHNlO1xuICAgIHdoaWxlICgoRGF0ZS5ub3coKSAtIHN0YXJ0TXMpIDwgc2NyZWVuc2hvdFdhaXRUaW1lb3V0KSB7XG4gICAgICBpZiAoYXdhaXQgZnMuaGFzQWNjZXNzKHNob3RQYXRoKSkge1xuICAgICAgICBzdWNjZXNzID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBhd2FpdCBCLmRlbGF5KDMwMCk7XG4gICAgfVxuICAgIGlmICghc3VjY2Vzcykge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5Vbmtub3duRXJyb3IoJ1RpbWVkIG91dCB3YWl0aW5nIGZvciBzY3JlZW5zaG90IGZpbGUnKTtcbiAgICB9XG5cbiAgICAvLyBjaGVjayB0aGUgcm90YXRpb24sIGFuZCByb3RhdGUgaWYgbmVjZXNzYXJ5XG4gICAgaWYgKGF3YWl0IHRoaXMuZ2V0T3JpZW50YXRpb24oKSA9PT0gJ0xBTkRTQ0FQRScpIHtcbiAgICAgIGxvZ2dlci5kZWJ1ZygnUm90YXRpbmcgbGFuZHNjYXBlIHNjcmVlbnNob3QnKTtcbiAgICAgIGF3YWl0IHV0aWxzLnJvdGF0ZUltYWdlKHNob3RQYXRoLCAtOTApO1xuICAgIH1cbiAgICByZXR1cm4gYXdhaXQgZnMucmVhZEZpbGUoc2hvdFBhdGgpO1xuICB9O1xuXG4gIC8vIFJldHJ5aW5nIHRoZSB3aG9sZSBzY3JlZW5zaG90IHByb2Nlc3MgZm9yIHRocmVlIHRpbWVzLlxuICBsZXQgZGF0YSA9IGF3YWl0IHJldHJ5KDMsIHRha2VTY3JlZW5TaG90KTtcbiAgcmV0dXJuIG5ldyBCdWZmZXIoZGF0YSkudG9TdHJpbmcoJ2Jhc2U2NCcpO1xufTtcblxuXG5PYmplY3QuYXNzaWduKGV4dGVuc2lvbnMsIGNvbW1hbmRzLCBoZWxwZXJzKTtcbmV4cG9ydCB7IGNvbW1hbmRzLCBoZWxwZXJzIH07XG5leHBvcnQgZGVmYXVsdCBleHRlbnNpb25zO1xuIl19