'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _appiumBaseDriver = require('appium-base-driver');

var _utils = require('./utils');

var _utils2 = _interopRequireDefault(_utils);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _appiumSupport = require('appium-support');

var _appiumIosSimulator = require('appium-ios-simulator');

var _appiumUiauto = require('appium-uiauto');

var _appiumInstruments = require('appium-instruments');

var _asyncbox = require('asyncbox');

var _appiumIosLog = require('appium-ios-log');

var _commandsIndex = require('./commands/index');

var _commandsIndex2 = _interopRequireDefault(_commandsIndex);

var _desiredCaps = require('./desired-caps');

var _desiredCaps2 = _interopRequireDefault(_desiredCaps);

var _mobileJsonWireProtocol = require('mobile-json-wire-protocol');

var _nodeIdevice = require('node-idevice');

var _nodeIdevice2 = _interopRequireDefault(_nodeIdevice);

var _commandsSafari = require('./commands/safari');

var _safariLauncher = require('./safari-launcher');

// promisify _iDevice
var iDevice = function iDevice() {
  var device = _nodeIdevice2['default'].apply(undefined, arguments);
  var promisified = {};
  var _arr = ['install', 'installAndWait', 'remove', 'isInstalled'];
  for (var _i = 0; _i < _arr.length; _i++) {
    var m = _arr[_i];
    promisified[m] = _bluebird2['default'].promisify(device[m].bind(device));
  }
  return promisified;
};

var serverCapabilities = {
  webStorageEnabled: false,
  locationContextEnabled: false,
  browserName: '',
  platform: 'MAC',
  javascriptEnabled: true,
  databaseEnabled: false,
  takesScreenshot: true,
  networkConnectionEnabled: false
};

var IosDriver = (function (_BaseDriver) {
  _inherits(IosDriver, _BaseDriver);

  _createClass(IosDriver, [{
    key: 'resetIos',
    value: function resetIos() {
      this.appExt = ".app";
      _lodash2['default'].defaults(this.opts, serverCapabilities);
      this.xcodeVersion = null;
      this.iosSdkVersion = null;
      this.iosSimUdid = null;
      this.logs = {};
      this.instruments = null;
      this.uiAutoClient = null;
      this.onInstrumentsDie = function () {};
      this.stopping = false;
      this.cbForCurrentCmd = null;
      this.remote = null;
      this.curContext = null;
      this.curWebFrames = [];
      this.selectingNewPage = false;
      this.windowHandleCache = [];
      this.webElementIds = [];
      this.implicitWaitMs = 0;
      this.asynclibWaitMs = 0;
      this.pageLoadMs = 6000;
      this.asynclibResponseCb = null;
      this.returnedFromExecuteAtom = {};
      this.executedAtomsCounter = 0;
      this.curCoords = null;
      this.curWebCoords = null;
      this.landscapeWebCoordsOffset = 0;
      this.keepAppToRetainPrefs = false;
      this.ready = false;
      this.asyncWaitMs = 0;

      this.settings = new _appiumBaseDriver.DeviceSettings({}, _lodash2['default'].noop);

      this.locatorStrategies = ['xpath', 'id', 'class name', '-ios uiautomation', 'accessibility id'];
      this.webLocatorStrategies = ['link text', 'css selector', 'tag name', 'partial link text'];
    }
  }]);

  function IosDriver(opts, shouldValidateCaps) {
    _classCallCheck(this, IosDriver);

    _get(Object.getPrototypeOf(IosDriver.prototype), 'constructor', this).call(this, opts, shouldValidateCaps);

    this.desiredCapConstraints = _desiredCaps2['default'];
    this.resetIos();
  }

  _createClass(IosDriver, [{
    key: 'validateLocatorStrategy',
    value: function validateLocatorStrategy(strategy) {
      _get(Object.getPrototypeOf(IosDriver.prototype), 'validateLocatorStrategy', this).call(this, strategy, this.isWebContext());
    }
  }, {
    key: 'start',
    value: function start() {
      return _regeneratorRuntime.async(function start$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!this.isRealDevice()) {
              context$2$0.next = 5;
              break;
            }

            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.startRealDevice());

          case 3:
            context$2$0.next = 7;
            break;

          case 5:
            context$2$0.next = 7;
            return _regeneratorRuntime.awrap(this.startSimulator());

          case 7:
            this.ready = true;

          case 8:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'createSession',
    value: function createSession(caps) {
      var _ref, _ref2, sessionId;

      return _regeneratorRuntime.async(function createSession$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(_get(Object.getPrototypeOf(IosDriver.prototype), 'createSession', this).call(this, caps));

          case 2:
            _ref = context$2$0.sent;
            _ref2 = _slicedToArray(_ref, 1);
            sessionId = _ref2[0];

            // merge server capabilities + desired capabilities
            this.caps = _Object$assign({}, serverCapabilities, this.caps);
            this.caps.desired = caps;

            context$2$0.next = 9;
            return _regeneratorRuntime.awrap(_utils2['default'].detectUdid(this.opts));

          case 9:
            context$2$0.next = 11;
            return _regeneratorRuntime.awrap(_utils2['default'].prepareIosOpts(this.opts));

          case 11:
            this.realDevice = null;
            this.useRobot = this.opts.useRobot;
            this.safari = this.opts.safari;
            this.curOrientation = this.opts.initialOrientation;

            this.sock = _path2['default'].resolve(this.opts.tmpDir || '/tmp', 'instruments_sock');
            this.perfLogEnabled = !!(typeof this.opts.loggingPrefs === 'object' && this.opts.loggingPrefs.performance);
            context$2$0.prev = 17;
            context$2$0.next = 20;
            return _regeneratorRuntime.awrap(this.configureApp());

          case 20:
            context$2$0.next = 26;
            break;

          case 22:
            context$2$0.prev = 22;
            context$2$0.t0 = context$2$0['catch'](17);

            _logger2['default'].error('Bad app: \'' + this.opts.app + '\'. App paths need to ' + 'be absolute, or relative to the appium server ' + 'install dir, or a URL to compressed file, or a ' + 'special app name.');
            throw context$2$0.t0;

          case 26:
            context$2$0.next = 28;
            return _regeneratorRuntime.awrap(this.start());

          case 28:

            // TODO: this should be in BaseDriver.postCreateSession
            this.startNewCommandTimeout('createSession');
            return context$2$0.abrupt('return', [sessionId, this.caps]);

          case 30:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[17, 22]]);
    }
  }, {
    key: 'stop',
    value: function stop() {
      var stopPromises;
      return _regeneratorRuntime.async(function stop$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            this.ready = false;
            stopPromises = [];

            if (this.uiAutoClient) stopPromises.push(this.uiAutoClient.shutdown());
            if (this.instruments) stopPromises.push(this.instruments.shutdown());
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(_bluebird2['default'].all(stopPromises));

          case 6:
            this.uiAutoClient = null;
            this.instruments = null;
            this.realDevice = null;

            // postcleanup
            this.curCoords = null;
            this.opts.curOrientation = null;
            if (!_lodash2['default'].isEmpty(this.logs)) {
              this.logs.syslog.stopCapture();
              this.logs = {};
            }

            if (!this.remote) {
              context$2$0.next = 15;
              break;
            }

            context$2$0.next = 15;
            return _regeneratorRuntime.awrap(this.stopRemote());

          case 15:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'deleteSession',
    value: function deleteSession() {
      return _regeneratorRuntime.async(function deleteSession$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug("Deleting ios session");

            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.stop());

          case 3:
            if (!this.isRealDevice()) {
              context$2$0.next = 8;
              break;
            }

            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(this.runRealDeviceReset());

          case 6:
            context$2$0.next = 10;
            break;

          case 8:
            context$2$0.next = 10;
            return _regeneratorRuntime.awrap(this.runSimReset());

          case 10:
            context$2$0.next = 12;
            return _regeneratorRuntime.awrap(_get(Object.getPrototypeOf(IosDriver.prototype), 'deleteSession', this).call(this));

          case 12:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'executeCommand',
    value: function executeCommand(cmd) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      var _get2;

      return _regeneratorRuntime.async(function executeCommand$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug('Executing iOS command \'' + cmd + '\'');

            if (!(cmd === 'receiveAsyncResponse')) {
              context$2$0.next = 7;
              break;
            }

            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.receiveAsyncResponse.apply(this, args));

          case 4:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 7:
            if (!(this.ready || _lodash2['default'].includes(['launchApp'], cmd))) {
              context$2$0.next = 11;
              break;
            }

            context$2$0.next = 10;
            return _regeneratorRuntime.awrap((_get2 = _get(Object.getPrototypeOf(IosDriver.prototype), 'executeCommand', this)).call.apply(_get2, [this, cmd].concat(args)));

          case 10:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 11:
            throw new _mobileJsonWireProtocol.errors.NoSuchDriverError('Driver is not ready, cannot execute ' + cmd + '.');

          case 12:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }

    // TODO: reformat this.helpers + configureApp
  }, {
    key: 'configureApp',
    value: function configureApp() {
      return _regeneratorRuntime.async(function configureApp$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.prev = 0;

            // if the app name is a bundleId assign it to the bundleId property
            if (!this.opts.bundleId && _utils2['default'].appIsPackageOrBundle(this.opts.app)) {
              this.opts.bundleId = this.opts.app;
            }

            if (!(this.opts.app && this.opts.app.toLowerCase() === "settings")) {
              context$2$0.next = 6;
              break;
            }

            if (parseFloat(this.opts.platformVersion) >= 8) {
              _logger2['default'].debug("We are on iOS8+ so not copying preferences app");
              this.opts.bundleId = "com.apple.Preferences";
              this.opts.app = null;
            }
            context$2$0.next = 30;
            break;

          case 6:
            if (!this.isSafari()) {
              context$2$0.next = 23;
              break;
            }

            if (this.isRealDevice()) {
              context$2$0.next = 11;
              break;
            }

            if (parseFloat(this.opts.platformVersion) >= 8) {
              _logger2['default'].debug("We are on iOS8+ so not copying Safari app");
              this.opts.bundleId = _commandsSafari.SAFARI_BUNDLE;
              this.opts.app = null;
            }
            context$2$0.next = 21;
            break;

          case 11:
            context$2$0.t0 = this.safari;

            if (!context$2$0.t0) {
              context$2$0.next = 16;
              break;
            }

            context$2$0.next = 15;
            return _regeneratorRuntime.awrap((0, _safariLauncher.needsInstall)());

          case 15:
            context$2$0.t0 = context$2$0.sent;

          case 16:
            if (!context$2$0.t0) {
              context$2$0.next = 21;
              break;
            }

            _logger2['default'].debug('SafariLauncher not found, installing...');
            context$2$0.next = 20;
            return _regeneratorRuntime.awrap((0, _safariLauncher.install)());

          case 20:
            this.opts.bundleId = 'com.bytearc.SafariLauncher';

          case 21:
            context$2$0.next = 30;
            break;

          case 23:
            if (!(this.opts.bundleId && _utils2['default'].appIsPackageOrBundle(this.opts.bundleId) && (this.opts.app === "" || _utils2['default'].appIsPackageOrBundle(this.opts.app)))) {
              context$2$0.next = 27;
              break;
            }

            // we have a bundle ID, but no app, or app is also a bundle
            _logger2['default'].debug("App is an iOS bundle, will attempt to run as pre-existing");
            context$2$0.next = 30;
            break;

          case 27:
            context$2$0.next = 29;
            return _regeneratorRuntime.awrap(this.helpers.configureApp(this.opts.app, '.app'));

          case 29:
            this.opts.app = context$2$0.sent;

          case 30:
            context$2$0.next = 36;
            break;

          case 32:
            context$2$0.prev = 32;
            context$2$0.t1 = context$2$0['catch'](0);

            _logger2['default'].error(context$2$0.t1);
            throw new Error('Bad app: ' + this.opts.app + '. App paths need to be absolute, or relative to the appium ' + "server install dir, or a URL to compressed file, or a special app name.");

          case 36:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[0, 32]]);
    }
  }, {
    key: 'startSimulator',
    value: function startSimulator() {
      var dString;
      return _regeneratorRuntime.async(function startSimulator$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(_utils2['default'].removeInstrumentsSocket(this.sock));

          case 2:

            _logger2['default'].debug("Setting Xcode version");
            context$2$0.next = 5;
            return _regeneratorRuntime.awrap(_utils2['default'].getAndCheckXcodeVersion(this.opts));

          case 5:
            this.xcodeVersion = context$2$0.sent;

            _logger2['default'].debug('Xcode version set to ' + this.xcodeVersion);

            _logger2['default'].debug("Setting iOS SDK Version");
            context$2$0.next = 10;
            return _regeneratorRuntime.awrap(_utils2['default'].getAndCheckIosSdkVersion());

          case 10:
            this.iosSdkVersion = context$2$0.sent;

            _logger2['default'].debug('iOS SDK Version set to ' + this.iosSdkVersion);

            context$2$0.next = 14;
            return _regeneratorRuntime.awrap(this.checkSimAvailable());

          case 14:
            context$2$0.next = 16;
            return _regeneratorRuntime.awrap(this.moveBuiltInApp());

          case 16:
            context$2$0.next = 18;
            return _regeneratorRuntime.awrap((0, _appiumIosSimulator.getSimulator)(this.iosSimUdid, this.xcodeVersion));

          case 18:
            this.sim = context$2$0.sent;
            context$2$0.next = 21;
            return _regeneratorRuntime.awrap(_utils2['default'].parseLocalizableStrings(this.opts));

          case 21:
            context$2$0.next = 23;
            return _regeneratorRuntime.awrap(_utils2['default'].setBundleIdFromApp(this.opts));

          case 23:
            context$2$0.next = 25;
            return _regeneratorRuntime.awrap(this.createInstruments());

          case 25:
            // previously setDeviceInfo()
            this.shouldPrelaunchSimulator = _utils2['default'].shouldPrelaunchSimulator(this.opts, this.iosSdkVersion);
            context$2$0.next = 28;
            return _regeneratorRuntime.awrap(this.adjustedDeviceName());

          case 28:
            dString = context$2$0.sent;

            if (!this.caps.app) {
              context$2$0.next = 32;
              break;
            }

            context$2$0.next = 32;
            return _regeneratorRuntime.awrap(_utils2['default'].setDeviceTypeInInfoPlist(this.opts.app, dString));

          case 32:
            context$2$0.next = 34;
            return _regeneratorRuntime.awrap(this.checkPreferences());

          case 34:
            context$2$0.next = 36;
            return _regeneratorRuntime.awrap(this.runSimReset());

          case 36:
            context$2$0.next = 38;
            return _regeneratorRuntime.awrap(this.isolateSimDevice());

          case 38:
            context$2$0.next = 40;
            return _regeneratorRuntime.awrap(this.setLocale());

          case 40:
            context$2$0.next = 42;
            return _regeneratorRuntime.awrap(this.setPreferences());

          case 42:
            context$2$0.next = 44;
            return _regeneratorRuntime.awrap(this.startLogCapture());

          case 44:
            context$2$0.next = 46;
            return _regeneratorRuntime.awrap(this.prelaunchSimulator());

          case 46:
            context$2$0.next = 48;
            return _regeneratorRuntime.awrap(this.startInstruments());

          case 48:
            context$2$0.next = 50;
            return _regeneratorRuntime.awrap(this.onInstrumentsLaunch());

          case 50:
            context$2$0.next = 52;
            return _regeneratorRuntime.awrap(this.configureBootstrap());

          case 52:
            context$2$0.next = 54;
            return _regeneratorRuntime.awrap(this.setBundleId());

          case 54:
            context$2$0.next = 56;
            return _regeneratorRuntime.awrap(this.setInitialOrientation());

          case 56:
            context$2$0.next = 58;
            return _regeneratorRuntime.awrap(this.initAutoWebview());

          case 58:
            context$2$0.next = 60;
            return _regeneratorRuntime.awrap(this.waitForAppLaunched());

          case 60:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'startRealDevice',
    value: function startRealDevice() {
      return _regeneratorRuntime.async(function startRealDevice$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(_utils2['default'].removeInstrumentsSocket(this.sock));

          case 2:
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(_utils2['default'].parseLocalizableStrings(this.opts));

          case 4:
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(_utils2['default'].setBundleIdFromApp(this.opts));

          case 6:
            context$2$0.next = 8;
            return _regeneratorRuntime.awrap(this.createInstruments());

          case 8:
            context$2$0.next = 10;
            return _regeneratorRuntime.awrap(this.runRealDeviceReset());

          case 10:
            context$2$0.next = 12;
            return _regeneratorRuntime.awrap(this.startLogCapture());

          case 12:
            context$2$0.next = 14;
            return _regeneratorRuntime.awrap(this.installToRealDevice());

          case 14:
            context$2$0.next = 16;
            return _regeneratorRuntime.awrap(this.startInstruments());

          case 16:
            context$2$0.next = 18;
            return _regeneratorRuntime.awrap(this.onInstrumentsLaunch());

          case 18:
            context$2$0.next = 20;
            return _regeneratorRuntime.awrap(this.configureBootstrap());

          case 20:
            context$2$0.next = 22;
            return _regeneratorRuntime.awrap(this.setBundleId());

          case 22:
            context$2$0.next = 24;
            return _regeneratorRuntime.awrap(this.setInitialOrientation());

          case 24:
            context$2$0.next = 26;
            return _regeneratorRuntime.awrap(this.initAutoWebview());

          case 26:
            context$2$0.next = 28;
            return _regeneratorRuntime.awrap(this.waitForAppLaunched());

          case 28:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'installToRealDevice',
    value: function installToRealDevice() {
      var msg;
      return _regeneratorRuntime.async(function installToRealDevice$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            // get a real device object to deal with incoming queries
            this.realDevice = this.getIDeviceObj();

            // if user has passed in desiredCaps.autoLaunch = false
            // meaning they will manage app install / launching

            if (!(this.opts.autoLaunch === false)) {
              context$2$0.next = 3;
              break;
            }

            return context$2$0.abrupt('return');

          case 3:
            if (!this.opts.udid) {
              context$2$0.next = 36;
              break;
            }

            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(this.realDevice.isInstalled(this.opts.bundleId));

          case 6:
            if (!context$2$0.sent) {
              context$2$0.next = 16;
              break;
            }

            _logger2['default'].debug("App is installed.");

            if (!this.opts.fullReset) {
              context$2$0.next = 12;
              break;
            }

            _logger2['default'].debug("fullReset requested. Forcing app install.");
            context$2$0.next = 14;
            break;

          case 12:
            _logger2['default'].debug("fullReset not requested. No need to install.");
            return context$2$0.abrupt('return');

          case 14:
            context$2$0.next = 17;
            break;

          case 16:
            _logger2['default'].debug("App is not installed. Will try to install the app.");

          case 17:
            if (!(this.opts.ipa && this.opts.bundleId)) {
              context$2$0.next = 22;
              break;
            }

            context$2$0.next = 20;
            return _regeneratorRuntime.awrap(this.installIpa());

          case 20:
            context$2$0.next = 34;
            break;

          case 22:
            if (!this.opts.ipa) {
              context$2$0.next = 28;
              break;
            }

            msg = "You specified a UDID and ipa but did not include the bundle id";

            _logger2['default'].warn(msg);
            throw new _mobileJsonWireProtocol.errors.UnknownError(msg);

          case 28:
            if (!this.opts.app) {
              context$2$0.next = 33;
              break;
            }

            context$2$0.next = 31;
            return _regeneratorRuntime.awrap(this.realDevice.install(this.opts.app));

          case 31:
            context$2$0.next = 34;
            break;

          case 33:
            _logger2['default'].debug("Real device specified but no ipa or app path, assuming bundle ID is " + "on device");

          case 34:
            context$2$0.next = 37;
            break;

          case 36:
            _logger2['default'].debug("No device id or app, not installing to real device.");

          case 37:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'getIDeviceObj',
    value: function getIDeviceObj() {
      var idiPath = _path2['default'].resolve(__dirname, "../../../build/", "libimobiledevice-macosx/ideviceinstaller");
      _logger2['default'].debug('Creating iDevice object with udid ' + this.opts.udid);
      try {
        return iDevice(this.opts.udid);
      } catch (e1) {
        _logger2['default'].debug('Couldn\'t find ideviceinstaller, trying built-in at ' + idiPath);
        try {
          return iDevice(this.opts.udid, { cmd: idiPath });
        } catch (e2) {
          var msg = "Could not initialize ideviceinstaller; make sure it is " + "installed and works on your system";
          _logger2['default'].error(msg);
          throw new Error(msg);
        }
      }
    }
  }, {
    key: 'installIpa',
    value: function installIpa() {
      return _regeneratorRuntime.async(function installIpa$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug('Installing ipa found at ' + this.opts.ipa);
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.realDevice.isInstalled(this.opts.bundleId));

          case 3:
            if (!context$2$0.sent) {
              context$2$0.next = 9;
              break;
            }

            _logger2['default'].debug("Bundle found on device, removing before reinstalling.");
            context$2$0.next = 7;
            return _regeneratorRuntime.awrap(this.realDevice.remove(this.opts.bundleId));

          case 7:
            context$2$0.next = 10;
            break;

          case 9:
            _logger2['default'].debug("Nothing found on device, going ahead and installing.");

          case 10:
            context$2$0.next = 12;
            return _regeneratorRuntime.awrap(this.realDevice.installAndWait(this.opts.ipa, this.opts.bundleId));

          case 12:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'moveBuiltInApp',
    value: function moveBuiltInApp() {
      return _regeneratorRuntime.async(function moveBuiltInApp$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'validateDesiredCaps',

    // call sim function once it is in place
    value: function validateDesiredCaps(caps) {
      // check with the base class, and return if it fails
      var res = _get(Object.getPrototypeOf(IosDriver.prototype), 'validateDesiredCaps', this).call(this, caps);
      if (!res) return res;

      // make sure that the capabilities have one of `app` or `bundleId`
      if ((caps.browserName || '').toLowerCase() !== 'safari' && !caps.app && !caps.bundleId) {
        var msg = 'The desired capabilities must include either an app or a bundleId for iOS';
        _logger2['default'].errorAndThrow(msg);
      }

      // `launchTimeout` is more complex than the validators can easily handle
      // and too specific for a generalized validator of its own
      if (caps.launchTimeout) {
        // it can be a number, a JSON string, or an object
        var msg = 'launchTimeout must be a number, object, or string JSON object';
        if (!_lodash2['default'].isNumber(caps.launchTimeout)) {
          if (_lodash2['default'].isString(caps.launchTimeout)) {
            // if this is a string, it must be a JSON string
            try {
              // change `launchTimeout` to an object
              caps.launchTimeout = JSON.parse(caps.launchTimeout);
            } catch (err) {
              // it was a string, but not something parsable as JSON
              _logger2['default'].errorAndThrow(msg);
            }
          }
          if (!_lodash2['default'].isObject(caps.launchTimeout)) {
            _logger2['default'].errorAndThrow(msg);
          }
        }
      }

      // finally, return true since the superclass check passed, as did this
      return true;
    }
  }, {
    key: 'checkPreferences',
    value: function checkPreferences() {
      var settingsCaps, safariSettingsCaps, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, cap;

      return _regeneratorRuntime.async(function checkPreferences$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            settingsCaps = ['locationServicesEnabled', 'locationServicesAuthorized', 'safariAllowPopups', 'safariIgnoreFraudWarning', 'safariOpenLinksInBackground'];
            safariSettingsCaps = settingsCaps.slice(2, 5);

            this.needToSetPrefs = false;
            this.needToSetSafariPrefs = false;
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            context$2$0.prev = 7;
            for (_iterator = _getIterator(settingsCaps); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              cap = _step.value;

              if (_lodash2['default'].has(this.opts, cap)) {
                this.needToSetPrefs = true;
                if (_lodash2['default'].includes(safariSettingsCaps, cap)) {
                  this.needToSetSafariPrefs = true;
                }
              }
            }
            context$2$0.next = 15;
            break;

          case 11:
            context$2$0.prev = 11;
            context$2$0.t0 = context$2$0['catch'](7);
            _didIteratorError = true;
            _iteratorError = context$2$0.t0;

          case 15:
            context$2$0.prev = 15;
            context$2$0.prev = 16;

            if (!_iteratorNormalCompletion && _iterator['return']) {
              _iterator['return']();
            }

          case 18:
            context$2$0.prev = 18;

            if (!_didIteratorError) {
              context$2$0.next = 21;
              break;
            }

            throw _iteratorError;

          case 21:
            return context$2$0.finish(18);

          case 22:
            return context$2$0.finish(15);

          case 23:
            this.keepAppToRetainPrefs = this.needToSetPrefs;

          case 24:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[7, 11, 15, 23], [16,, 18, 22]]);
    }
  }, {
    key: 'deleteSim',
    value: function deleteSim() {
      return _regeneratorRuntime.async(function deleteSim$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.sim['delete']());

          case 2:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'clearAppData',
    value: function clearAppData() {
      return _regeneratorRuntime.async(function clearAppData$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!(!this.keepAppToRetainPrefs && this.opts.app && this.opts.bundleId)) {
              context$2$0.next = 3;
              break;
            }

            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.sim.cleanCustomApp(_path2['default'].basename(this.opts.app), this.opts.bundleId));

          case 3:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'cleanupDeviceState',
    value: function cleanupDeviceState() {
      var bundleId;
      return _regeneratorRuntime.async(function cleanupDeviceState$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!(this.realDevice && this.opts.bundleId && this.opts.fullReset)) {
              context$2$0.next = 15;
              break;
            }

            _logger2['default'].debug("fullReset requested. Will try to uninstall the app.");
            bundleId = this.opts.bundleId;
            context$2$0.prev = 3;
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(this.realDevice.remove(bundleId));

          case 6:
            context$2$0.next = 12;
            break;

          case 8:
            context$2$0.prev = 8;
            context$2$0.t0 = context$2$0['catch'](3);

            _logger2['default'].error('Could not remove \'' + bundleId + '\' from device');
            throw context$2$0.t0;

          case 12:
            _logger2['default'].debug('Removed ' + bundleId);
            context$2$0.next = 29;
            break;

          case 15:
            if (this.isRealDevice()) {
              context$2$0.next = 29;
              break;
            }

            if (!this.sim) {
              context$2$0.next = 29;
              break;
            }

            _logger2['default'].debug('Cleaning sim state.');
            context$2$0.prev = 18;
            context$2$0.next = 21;
            return _regeneratorRuntime.awrap(this.clearAppData());

          case 21:
            context$2$0.next = 23;
            return _regeneratorRuntime.awrap(this.sim.clean());

          case 23:
            context$2$0.next = 29;
            break;

          case 25:
            context$2$0.prev = 25;
            context$2$0.t1 = context$2$0['catch'](18);

            _logger2['default'].warn(context$2$0.t1);
            _logger2['default'].warn("Could not reset simulator. Leaving as is.");

          case 29:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[3, 8], [18, 25]]);
    }
  }, {
    key: 'runRealDeviceReset',
    value: function runRealDeviceReset() {
      return _regeneratorRuntime.async(function runRealDeviceReset$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!(this.opts.reset || this.opts.fullReset)) {
              context$2$0.next = 7;
              break;
            }

            _logger2['default'].debug("Running ios real device reset flow");

            if (!this.opts.reset) {
              context$2$0.next = 5;
              break;
            }

            context$2$0.next = 5;
            return _regeneratorRuntime.awrap(this.cleanupDeviceState());

          case 5:
            context$2$0.next = 8;
            break;

          case 7:
            _logger2['default'].debug("Reset not set, not ending real device");

          case 8:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'runSimReset',
    value: function runSimReset() {
      return _regeneratorRuntime.async(function runSimReset$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!(this.opts.reset || this.opts.fullReset)) {
              context$2$0.next = 15;
              break;
            }

            _logger2['default'].debug("Running ios sim reset flow");
            // The simulator process must be ended before we delete applications.
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.endSimulator());

          case 4:
            if (!(this.opts.fullReset && !this.isRealDevice())) {
              context$2$0.next = 10;
              break;
            }

            _logger2['default'].debug('Full reset is on, so erasing simulator');
            context$2$0.next = 8;
            return _regeneratorRuntime.awrap(this.cleanSimulator());

          case 8:
            context$2$0.next = 13;
            break;

          case 10:
            if (!this.opts.reset) {
              context$2$0.next = 13;
              break;
            }

            context$2$0.next = 13;
            return _regeneratorRuntime.awrap(this.cleanupDeviceState());

          case 13:
            context$2$0.next = 16;
            break;

          case 15:
            _logger2['default'].debug("Reset not set, not ending sim");

          case 16:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'cleanSimulator',
    value: function cleanSimulator() {
      return _regeneratorRuntime.async(function cleanSimulator$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug('Cleaning the simulator');

            if (!this.sim) {
              context$2$0.next = 4;
              break;
            }

            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.sim.clean());

          case 4:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'endSimulator',
    value: function endSimulator() {
      return _regeneratorRuntime.async(function endSimulator$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug("Killing the simulator");

            if (!this.sim) {
              context$2$0.next = 4;
              break;
            }

            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.sim.shutdown());

          case 4:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'isolateSimDevice',
    value: function isolateSimDevice() {
      return _regeneratorRuntime.async(function isolateSimDevice$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!(!this.isRealDevice() && this.opts.isolateSimDevice && this.iosSdkVersion >= 8)) {
              context$2$0.next = 3;
              break;
            }

            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.sim.isolateSim());

          case 3:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'launchAndQuitSimulator',
    value: function launchAndQuitSimulator() {
      return _regeneratorRuntime.async(function launchAndQuitSimulator$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug('No simulator directories found.');
            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(this.sim.launchAndQuit(this.isSafari()));

          case 3:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 4:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'setLocale',
    value: function setLocale() {
      var updated;
      return _regeneratorRuntime.async(function setLocale$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!this.isRealDevice()) {
              context$2$0.next = 5;
              break;
            }

            _logger2['default'].debug("Not setting locale because we're using a real device");
            return context$2$0.abrupt('return');

          case 5:
            if (!(!this.opts.language && !this.opts.locale && !this.opts.calendarFormat)) {
              context$2$0.next = 8;
              break;
            }

            _logger2['default'].debug("Not setting locale");
            return context$2$0.abrupt('return');

          case 8:
            context$2$0.next = 10;
            return _regeneratorRuntime.awrap(this.sim.isFresh());

          case 10:
            if (!context$2$0.sent) {
              context$2$0.next = 12;
              break;
            }

            this.launchAndQuitSimulator();

          case 12:

            _logger2['default'].debug("Setting locale information");
            this.localeConfig = this.localeConfig || {};
            this.localeConfig = {
              language: this.opts.language || this.localeConfig.language,
              locale: this.opts.locale || this.localeConfig.locale,
              calendarFormat: this.opts.calendarFormat || this.localeConfig.calendarFormat
            };

            context$2$0.prev = 15;
            context$2$0.next = 18;
            return _regeneratorRuntime.awrap(this.sim.updateLocale(this.opts.language, this.opts.locale, this.opts.calendarFormat));

          case 18:
            updated = context$2$0.sent;

            if (!updated) {
              context$2$0.next = 23;
              break;
            }

            _logger2['default'].debug('Locale was updated. Stopping simulator.');
            context$2$0.next = 23;
            return _regeneratorRuntime.awrap(this.endSimulator());

          case 23:
            context$2$0.next = 28;
            break;

          case 25:
            context$2$0.prev = 25;
            context$2$0.t0 = context$2$0['catch'](15);

            _logger2['default'].errorAndThrow('Appium was unable to set locale info: ' + context$2$0.t0);

          case 28:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[15, 25]]);
    }
  }, {
    key: 'setPreferences',
    value: function setPreferences() {
      var msg;
      return _regeneratorRuntime.async(function setPreferences$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (this.needToSetPrefs) {
              context$2$0.next = 5;
              break;
            }

            _logger2['default'].debug("No iOS / app preferences to set");
            return context$2$0.abrupt('return');

          case 5:
            if (!this.opts.fullReset) {
              context$2$0.next = 10;
              break;
            }

            msg = "Cannot set preferences because a full-reset was requested";

            _logger2['default'].debug(msg);
            _logger2['default'].error(msg);
            throw new Error(msg);

          case 10:

            _logger2['default'].debug("Setting iOS and app preferences");

            context$2$0.next = 13;
            return _regeneratorRuntime.awrap(this.sim.isFresh());

          case 13:
            if (!context$2$0.sent) {
              context$2$0.next = 16;
              break;
            }

            context$2$0.next = 16;
            return _regeneratorRuntime.awrap(this.launchAndQuitSimulator());

          case 16:
            context$2$0.prev = 16;
            context$2$0.next = 19;
            return _regeneratorRuntime.awrap(this.setLocServicesPrefs());

          case 19:
            context$2$0.next = 25;
            break;

          case 21:
            context$2$0.prev = 21;
            context$2$0.t0 = context$2$0['catch'](16);

            _logger2['default'].error("Error setting location services preferences, prefs will not work");
            _logger2['default'].error(context$2$0.t0);

          case 25:
            context$2$0.prev = 25;
            context$2$0.next = 28;
            return _regeneratorRuntime.awrap(this.setSafariPrefs());

          case 28:
            context$2$0.next = 34;
            break;

          case 30:
            context$2$0.prev = 30;
            context$2$0.t1 = context$2$0['catch'](25);

            _logger2['default'].error("Error setting safari preferences, prefs will not work");
            _logger2['default'].error(context$2$0.t1);

          case 34:

            _logger2['default'].debug("Updated plist files, rebooting the simulator if it's already open");
            context$2$0.next = 37;
            return _regeneratorRuntime.awrap(this.endSimulator());

          case 37:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[16, 21], [25, 30]]);
    }
  }, {
    key: 'setLocServicesPrefs',
    value: function setLocServicesPrefs() {
      var locServ, msg, locAuth;
      return _regeneratorRuntime.async(function setLocServicesPrefs$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            locServ = _lodash2['default'].find([this.opts.locationServicesEnabled, this.opts.locationServicesAuthorized], function (c) {
              return !_lodash2['default'].isUndefined(c);
            });

            if (_lodash2['default'].isUndefined(locServ)) {
              context$2$0.next = 6;
              break;
            }

            locServ = locServ ? 1 : 0;
            _logger2['default'].debug('Setting location services to ' + locServ);
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(this.sim.updateSettings('locationServices', {
              LocationServicesEnabled: locServ,
              'LocationServicesEnabledIn7.0': locServ,
              'LocationServicesEnabledIn8.0': locServ
            }));

          case 6:
            if (_lodash2['default'].isUndefined(this.opts.locationServicesAuthorized)) {
              context$2$0.next = 15;
              break;
            }

            if (this.opts.bundleId) {
              context$2$0.next = 11;
              break;
            }

            msg = "Can't set location services for app without bundle ID";

            _logger2['default'].error(msg);
            throw new Error(msg);

          case 11:
            locAuth = !!this.opts.locationServicesAuthorized;

            if (locAuth) {
              _logger2['default'].debug("Authorizing location services for app");
            } else {
              _logger2['default'].debug("De-authorizing location services for app");
            }
            context$2$0.next = 15;
            return _regeneratorRuntime.awrap(this.sim.updateLocationSettings(this.opts.bundleId, locAuth));

          case 15:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'setSafariPrefs',
    value: function setSafariPrefs() {
      var safariSettings, val;
      return _regeneratorRuntime.async(function setSafariPrefs$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            safariSettings = {};

            if (_lodash2['default'].has(this.opts, 'safariAllowPopups')) {
              val = !!this.opts.safariAllowPopups;

              _logger2['default'].debug('Setting javascript window opening to \'' + val + '\'');
              safariSettings.WebKitJavaScriptCanOpenWindowsAutomatically = val;
              safariSettings.JavaScriptCanOpenWindowsAutomatically = val;
            }
            if (_lodash2['default'].has(this.opts, 'safariIgnoreFraudWarning')) {
              val = !this.opts.safariIgnoreFraudWarning;

              _logger2['default'].debug('Setting fraudulent website warning to \'' + val + '\'');
              safariSettings.WarnAboutFraudulentWebsites = val;
            }
            if (_lodash2['default'].has(this.opts, 'safariOpenLinksInBackground')) {
              val = this.opts.safariOpenLinksInBackground ? 1 : 0;

              _logger2['default'].debug('Setting opening links in background to \'' + !!val + '\'');
              safariSettings.OpenLinksInBackground = val;
            }

            if (!(_lodash2['default'].size(safariSettings) > 0)) {
              context$2$0.next = 7;
              break;
            }

            context$2$0.next = 7;
            return _regeneratorRuntime.awrap(this.sim.updateSafariSettings(safariSettings));

          case 7:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'startLogCapture',
    value: function startLogCapture() {
      return _regeneratorRuntime.async(function startLogCapture$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (_lodash2['default'].isEmpty(this.logs)) {
              context$2$0.next = 2;
              break;
            }

            throw new Error("Trying to start iOS log capture but it's already started!");

          case 2:
            this.logs.crashlog = new _appiumIosLog.IOSCrashLog();
            this.logs.syslog = new _appiumIosLog.IOSLog({
              sim: this.sim,
              udid: this.opts.udid,
              showLogs: this.opts.showIOSLog
            });
            context$2$0.prev = 4;
            context$2$0.next = 7;
            return _regeneratorRuntime.awrap(this.logs.syslog.startCapture());

          case 7:
            context$2$0.next = 13;
            break;

          case 9:
            context$2$0.prev = 9;
            context$2$0.t0 = context$2$0['catch'](4);

            _logger2['default'].warn("Could not capture logs from device. Continuing without capturing logs.");
            return context$2$0.abrupt('return');

          case 13:
            context$2$0.next = 15;
            return _regeneratorRuntime.awrap(this.logs.crashlog.startCapture());

          case 15:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[4, 9]]);
    }
  }, {
    key: 'prelaunchSimulator',
    value: function prelaunchSimulator() {
      return _regeneratorRuntime.async(function prelaunchSimulator$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (this.shouldPrelaunchSimulator) {
              context$2$0.next = 3;
              break;
            }

            _logger2['default'].debug("Not pre-launching simulator");
            return context$2$0.abrupt('return');

          case 3:
            context$2$0.next = 5;
            return _regeneratorRuntime.awrap(this.endSimulator());

          case 5:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'onInstrumentsLaunch',

    // TODO: implement prelaunch sim in simulator package
    value: function onInstrumentsLaunch() {
      return _regeneratorRuntime.async(function onInstrumentsLaunch$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug('Instruments launched. Starting poll loop for new commands.');

            if (!this.opts.origAppPath) {
              context$2$0.next = 6;
              break;
            }

            _logger2['default'].debug("Copying app back to its original place");
            context$2$0.next = 5;
            return _regeneratorRuntime.awrap(_appiumSupport.fs.ncp(this.opts.app, this.opts.origAppPath));

          case 5:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 6:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'setBundleId',
    value: function setBundleId() {
      var bId;
      return _regeneratorRuntime.async(function setBundleId$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!this.opts.bundleId) {
              context$2$0.next = 4;
              break;
            }

            return context$2$0.abrupt('return');

          case 4:
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(this.uiAutoClient.sendCommand('au.bundleId()'));

          case 6:
            bId = context$2$0.sent;

            _logger2['default'].debug('Bundle ID for open app is ' + bId.value);
            this.opts.bundleId = bId.value;

          case 9:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'setInitialOrientation',
    value: function setInitialOrientation() {
      var command;
      return _regeneratorRuntime.async(function setInitialOrientation$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!(typeof this.opts.initialOrientation === "string" && _lodash2['default'].includes(["LANDSCAPE", "PORTRAIT"], this.opts.initialOrientation.toUpperCase()))) {
              context$2$0.next = 12;
              break;
            }

            _logger2['default'].debug('Setting initial orientation to ' + this.opts.initialOrientation);
            command = 'au.setScreenOrientation(\'' + this.opts.initialOrientation.toUpperCase() + '\')';
            context$2$0.prev = 3;
            context$2$0.next = 6;
            return _regeneratorRuntime.awrap(this.uiAutoClient.sendCommand(command));

          case 6:
            this.opts.curOrientation = this.opts.initialOrientation;
            context$2$0.next = 12;
            break;

          case 9:
            context$2$0.prev = 9;
            context$2$0.t0 = context$2$0['catch'](3);

            _logger2['default'].warn('Setting initial orientation failed with: ' + context$2$0.t0);

          case 12:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[3, 9]]);
    }
  }, {
    key: 'isRealDevice',
    value: function isRealDevice() {
      return !!this.opts.udid;
    }
  }, {
    key: 'isSafari',
    value: function isSafari() {
      return this.opts.safari;
    }
  }, {
    key: 'waitForAppLaunched',
    value: function waitForAppLaunched() {
      var condFn;
      return _regeneratorRuntime.async(function waitForAppLaunched$(context$2$0) {
        var _this = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            condFn = undefined;

            if (!this.opts.waitForAppScript) {
              context$2$0.next = 6;
              break;
            }

            // the default getSourceForElementForXML does not fit some use case, so making this customizable.
            // TODO: collect script from customer and propose several options, please comment in issue #4190.
            _logger2['default'].debug('Using custom script to wait for app start: ' + this.opts.waitForAppScript);
            condFn = function callee$2$0() {
              var res;
              return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    res = undefined;
                    context$3$0.prev = 1;
                    context$3$0.next = 4;
                    return _regeneratorRuntime.awrap(this.uiAutoClient.sendCommand('try{\n' + this.opts.waitForAppScript + '\n} catch(err) { $.log("waitForAppScript err: " + error); false; };'));

                  case 4:
                    res = context$3$0.sent;
                    context$3$0.next = 11;
                    break;

                  case 7:
                    context$3$0.prev = 7;
                    context$3$0.t0 = context$3$0['catch'](1);

                    _logger2['default'].debug('Cannot eval waitForAppScript script, err: ' + context$3$0.t0);
                    return context$3$0.abrupt('return', false);

                  case 11:
                    if (!(typeof res !== 'boolean')) {
                      context$3$0.next = 14;
                      break;
                    }

                    _logger2['default'].debug('Unexpected return type in waitForAppScript script');
                    return context$3$0.abrupt('return', false);

                  case 14:
                    return context$3$0.abrupt('return', res);

                  case 15:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this, [[1, 7]]);
            };
            context$2$0.next = 18;
            break;

          case 6:
            if (!this.isSafari()) {
              context$2$0.next = 16;
              break;
            }

            if (!this.isRealDevice()) {
              context$2$0.next = 10;
              break;
            }

            context$2$0.next = 10;
            return _regeneratorRuntime.awrap(this.clickButtonToLaunchSafari());

          case 10:
            _logger2['default'].debug('Waiting for initial webview');
            context$2$0.next = 13;
            return _regeneratorRuntime.awrap(this.navToInitialWebview());

          case 13:
            condFn = function callee$2$0() {
              return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    return context$3$0.abrupt('return', true);

                  case 1:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this);
            };
            context$2$0.next = 18;
            break;

          case 16:
            _logger2['default'].debug("Waiting for app source to contain elements");
            condFn = function callee$2$0() {
              var source, appEls;
              return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    context$3$0.prev = 0;
                    context$3$0.next = 3;
                    return _regeneratorRuntime.awrap(this.getSourceForElementForXML());

                  case 3:
                    source = context$3$0.sent;

                    source = JSON.parse(source || "{}");
                    appEls = (source.UIAApplication || {})['>'];
                    return context$3$0.abrupt('return', appEls && appEls.length > 0 && !IosDriver.isSpringBoard(source.UIAApplication));

                  case 9:
                    context$3$0.prev = 9;
                    context$3$0.t0 = context$3$0['catch'](0);

                    _logger2['default'].warn('Couldn\'t extract app element from source, error was: ' + context$3$0.t0);
                    return context$3$0.abrupt('return', false);

                  case 13:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this, [[0, 9]]);
            };

          case 18:
            context$2$0.prev = 18;
            context$2$0.next = 21;
            return _regeneratorRuntime.awrap((0, _asyncbox.waitForCondition)(condFn, { waitMs: 10000, intervalMs: 500, logger: _logger2['default'] }));

          case 21:
            context$2$0.next = 31;
            break;

          case 23:
            context$2$0.prev = 23;
            context$2$0.t0 = context$2$0['catch'](18);

            if (!(context$2$0.t0.message && context$2$0.t0.message.match(/Condition unmet/))) {
              context$2$0.next = 30;
              break;
            }

            _logger2['default'].warn('Initial spin timed out, continuing but the app might not be ready.');
            _logger2['default'].debug('Initial spin error was: ' + context$2$0.t0);
            context$2$0.next = 31;
            break;

          case 30:
            throw context$2$0.t0;

          case 31:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[18, 23]]);
    }
  }, {
    key: 'createInstruments',
    value: function createInstruments() {
      return _regeneratorRuntime.async(function createInstruments$(context$2$0) {
        var _this2 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug("Creating instruments");
            this.uiAutoClient = new _appiumUiauto.UIAutoClient(this.sock);
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.makeInstruments());

          case 4:
            this.instruments = context$2$0.sent;

            this.instruments.onShutdown['catch'](function callee$2$0() {
              return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    context$3$0.next = 2;
                    return _regeneratorRuntime.awrap(this.startUnexpectedShutdown(new _mobileJsonWireProtocol.errors.UnknownError('Abnornal Instruments termination!')));

                  case 2:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this2);
            }).done();

          case 6:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'shouldIgnoreInstrumentsExit',
    value: function shouldIgnoreInstrumentsExit() {
      return this.safari && this.isRealDevice();
    }
  }, {
    key: 'makeInstruments',
    value: function makeInstruments() {
      var bootstrapPath, instruments;
      return _regeneratorRuntime.async(function makeInstruments$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap((0, _appiumUiauto.prepareBootstrap)({
              sock: this.sock,
              interKeyDelay: this.opts.interKeyDelay,
              justLoopInfinitely: false,
              autoAcceptAlerts: this.opts.autoAcceptAlerts,
              autoDismissAlerts: this.opts.autoDismissAlerts,
              sendKeyStrategy: this.opts.sendKeyStrategy || (this.isRealDevice() ? 'grouped' : 'oneByOne')
            }));

          case 2:
            bootstrapPath = context$2$0.sent;
            context$2$0.t0 = _appiumInstruments.Instruments;
            context$2$0.t1 = (!this.isRealDevice() ? this.opts.app : null) || this.opts.bundleId;
            context$2$0.t2 = this.opts.udid;
            context$2$0.t3 = this.opts.processArguments;
            context$2$0.t4 = this.shouldIgnoreInstrumentsExit();
            context$2$0.t5 = bootstrapPath;
            context$2$0.t6 = this.opts.automationTraceTemplatePath;
            context$2$0.t7 = this.opts.instrumentsPath;
            context$2$0.t8 = this.opts.withoutDelay;
            context$2$0.t9 = this.opts.platformVersion;
            context$2$0.t10 = this.opts.webSocket;
            context$2$0.t11 = this.opts.launchTimeout;
            context$2$0.t12 = this.opts.backendRetries;

            if (!(this.iosSdkVersion >= 7.1)) {
              context$2$0.next = 22;
              break;
            }

            context$2$0.next = 19;
            return _regeneratorRuntime.awrap(this.adjustedDeviceName());

          case 19:
            context$2$0.t13 = context$2$0.sent;
            context$2$0.next = 23;
            break;

          case 22:
            context$2$0.t13 = null;

          case 23:
            context$2$0.t14 = context$2$0.t13;
            context$2$0.t15 = _path2['default'].resolve(this.opts.tmpDir || '/tmp', 'appium-instruments');
            context$2$0.t16 = this.opts.traceDir;
            context$2$0.t17 = {
              app: context$2$0.t1,
              udid: context$2$0.t2,
              processArguments: context$2$0.t3,
              ignoreStartupExit: context$2$0.t4,
              bootstrap: context$2$0.t5,
              template: context$2$0.t6,
              instrumentsPath: context$2$0.t7,
              withoutDelay: context$2$0.t8,
              platformVersion: context$2$0.t9,
              webSocket: context$2$0.t10,
              launchTimeout: context$2$0.t11,
              flakeyRetries: context$2$0.t12,
              simulatorSdkAndDevice: context$2$0.t14,
              tmpDir: context$2$0.t15,
              traceDir: context$2$0.t16
            };
            instruments = new context$2$0.t0(context$2$0.t17);
            return context$2$0.abrupt('return', instruments);

          case 29:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'startInstruments',
    value: function startInstruments() {
      return _regeneratorRuntime.async(function startInstruments$(context$2$0) {
        var _this3 = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug("Starting UIAutoClient, and launching Instruments.");

            context$2$0.next = 3;
            return _regeneratorRuntime.awrap(_bluebird2['default'].all([this.uiAutoClient.start().then(function () {
              _this3.instruments.registerLaunch();
            }), this.instruments.launch()]));

          case 3:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'configureBootstrap',
    value: function configureBootstrap() {
      var isVerbose, cmd;
      return _regeneratorRuntime.async(function configureBootstrap$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            _logger2['default'].debug("Setting bootstrap config keys/values");
            isVerbose = true;
            cmd = 'target = $.target();\n';

            cmd += 'au = $;\n';
            cmd += '$.isVerbose = ' + isVerbose + ';\n';
            // Not using uiauto grace period because of bug.
            // cmd += '$.target().setTimeout(1);\n';
            context$2$0.next = 7;
            return _regeneratorRuntime.awrap(this.uiAutoClient.sendCommand(cmd));

          case 7:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'checkSimAvailable',
    value: function checkSimAvailable() {
      var availDevices, dString, noDevicesError, sim;
      return _regeneratorRuntime.async(function checkSimAvailable$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (!this.isRealDevice()) {
              context$2$0.next = 3;
              break;
            }

            _logger2['default'].debug("Not checking whether simulator is available since we're on " + "a real device");
            return context$2$0.abrupt('return');

          case 3:
            if (!(this.iosSdkVersion < 7.1)) {
              context$2$0.next = 6;
              break;
            }

            _logger2['default'].debug("Instruments v < 7.1, not checking device string support");
            return context$2$0.abrupt('return');

          case 6:

            _logger2['default'].debug("Checking whether instruments supports our device string");
            context$2$0.next = 9;
            return _regeneratorRuntime.awrap((0, _asyncbox.retry)(3, _appiumInstruments.utils.getAvailableDevices, this.xcodeVersion, this.iosSdkVersion, this.opts));

          case 9:
            availDevices = context$2$0.sent;
            context$2$0.next = 12;
            return _regeneratorRuntime.awrap(this.adjustedDeviceName());

          case 12:
            dString = context$2$0.sent;

            noDevicesError = function noDevicesError() {
              var msg = 'Could not find a device to launch. You requested ' + ('\'' + dString + '\', but the available devices were: ') + JSON.stringify(availDevices);
              _logger2['default'].errorAndThrow(msg);
            };

            if (this.iosSdkVersion >= 8) {
              sim = _utils2['default'].getSimForDeviceString(dString, availDevices);

              if (sim[0] === null || sim[1] === null) {
                noDevicesError();
              }
              this.iosSimUdid = sim[1];
              _logger2['default'].debug('iOS sim UDID is ' + this.iosSimUdid);
            } else if (!_lodash2['default'].includes(availDevices, dString)) {
              noDevicesError();
            }

          case 15:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'getSourceForElementForXML',
    value: function getSourceForElementForXML(ctx) {
      var source;
      return _regeneratorRuntime.async(function getSourceForElementForXML$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            source = undefined;

            if (ctx) {
              context$2$0.next = 7;
              break;
            }

            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this.uiAutoClient.sendCommand("au.mainApp().getTreeForXML()"));

          case 4:
            source = context$2$0.sent;
            context$2$0.next = 10;
            break;

          case 7:
            context$2$0.next = 9;
            return _regeneratorRuntime.awrap(this.uiAutoClient.sendCommand('au.getElement(\'' + ctx + '\').getTreeForXML()'));

          case 9:
            source = context$2$0.sent;

          case 10:
            if (!source) {
              context$2$0.next = 14;
              break;
            }

            return context$2$0.abrupt('return', JSON.stringify(source));

          case 14:
            throw new Error('Bad response from getTreeForXML. res was ' + JSON.stringify(source));

          case 15:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'adjustedDeviceName',
    value: function adjustedDeviceName() {
      return _regeneratorRuntime.async(function adjustedDeviceName$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.t0 = this.opts._adjustedDeviceName;

            if (context$2$0.t0) {
              context$2$0.next = 5;
              break;
            }

            context$2$0.next = 4;
            return _regeneratorRuntime.awrap((0, _appiumIosSimulator.getDeviceString)(this.opts));

          case 4:
            context$2$0.t0 = context$2$0.sent;

          case 5:
            this.opts._adjustedDeviceName = context$2$0.t0;
            return context$2$0.abrupt('return', this.opts._adjustedDeviceName);

          case 7:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }], [{
    key: 'isSpringBoard',
    value: function isSpringBoard(uiAppObj) {
      // TODO: move to helpers
      // Test for iOS homescreen (SpringBoard). AUT occassionally start the sim, but fails to load
      // the app. If that occurs, getSourceForElementFoXML will return a doc object that meets our
      // app-check conditions, resulting in a false positive. This function tests the UiApplication
      // property's meta data to ensure that the Appium doesn't confuse SpringBoard with the app
      // under test.
      return _lodash2['default'].propertyOf(uiAppObj['@'])('name') === 'SpringBoard';
    }
  }]);

  return IosDriver;
})(_appiumBaseDriver.BaseDriver);

var _iteratorNormalCompletion2 = true;
var _didIteratorError2 = false;
var _iteratorError2 = undefined;

try {

  for (var _iterator2 = _getIterator(_lodash2['default'].toPairs(_commandsIndex2['default'])), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
    var _step2$value = _slicedToArray(_step2.value, 2);

    var cmd = _step2$value[0];
    var fn = _step2$value[1];

    IosDriver.prototype[cmd] = fn;
  }
} catch (err) {
  _didIteratorError2 = true;
  _iteratorError2 = err;
} finally {
  try {
    if (!_iteratorNormalCompletion2 && _iterator2['return']) {
      _iterator2['return']();
    }
  } finally {
    if (_didIteratorError2) {
      throw _iteratorError2;
    }
  }
}

exports.IosDriver = IosDriver;
exports['default'] = IosDriver;

// on real device, need to check if safari launcher exists

// TODO: this need to be split in 2 helpers

// we need the simulator to have its directories in place

// We already have a bundle Id

// on iOS8 in particular, we can get a working session before the app
// is ready to respond to commands; in that case the source will be empty
// so we just spin until it's not

// unexpected exit

// at the moment all the logging in uiauto is at debug level

// on real devices bundleId is always used
// TODO: level was configured according to logger

// TODO: all this json/xml logic is very expensive, we need
// to use a SAX parser instead.

// this should never happen but we've received bug reports; this will help us track down
// what's wrong in getTreeForXML
//# sourceMappingURL=data:application/json;base64,