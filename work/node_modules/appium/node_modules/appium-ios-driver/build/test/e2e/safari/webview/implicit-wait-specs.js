'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _setupBase = require('../../setup-base');

var _setupBase2 = _interopRequireDefault(_setupBase);

var _desired = require('./desired');

var _desired2 = _interopRequireDefault(_desired);

describe('safari - webview implicit wait', function () {
  var _this = this;

  var driver = (0, _setupBase2['default'])(this, _desired2['default'], { 'no-reset': true }).driver;

  it('should set the implicit wait for finding web elements', function callee$1$0() {
    var before, hasThrown, after;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(driver.implicitWait(7 * 1000));

        case 2:
          before = new Date().getTime() / 1000;
          hasThrown = false;
          context$2$0.prev = 4;
          context$2$0.next = 7;
          return _regeneratorRuntime.awrap(driver.findElement('tag name', 'notgonnabethere'));

        case 7:
          context$2$0.next = 12;
          break;

        case 9:
          context$2$0.prev = 9;
          context$2$0.t0 = context$2$0['catch'](4);

          hasThrown = true;

        case 12:
          context$2$0.prev = 12;

          hasThrown.should.be.ok;
          return context$2$0.finish(12);

        case 15:
          after = new Date().getTime() / 1000;

          (after - before > 7).should.be.ok;
          context$2$0.next = 19;
          return _regeneratorRuntime.awrap(driver.implicitWait(0));

        case 19:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this, [[4, 9, 12, 15]]);
  });
});

/**
 * we have to use try catch to actually halt the process here
 */
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZTJlL3NhZmFyaS93ZWJ2aWV3L2ltcGxpY2l0LXdhaXQtc3BlY3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O3lCQUFrQixrQkFBa0I7Ozs7dUJBQ2hCLFdBQVc7Ozs7QUFFL0IsUUFBUSxDQUFDLGdDQUFnQyxFQUFFLFlBQVc7OztBQUNwRCxNQUFNLE1BQU0sR0FBRyw0QkFBTSxJQUFJLHdCQUFXLEVBQUMsVUFBVSxFQUFFLElBQUksRUFBQyxDQUFDLENBQUMsTUFBTSxDQUFDOztBQUUvRCxJQUFFLENBQUMsdURBQXVELEVBQUU7UUFHdEQsTUFBTSxFQUNOLFNBQVMsRUFhVCxLQUFLOzs7OzsyQ0FoQkgsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDOzs7QUFFL0IsZ0JBQU0sR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxHQUFHLElBQUk7QUFDcEMsbUJBQVMsR0FBRyxLQUFLOzs7MkNBTWIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxVQUFVLEVBQUUsaUJBQWlCLENBQUM7Ozs7Ozs7Ozs7QUFFdkQsbUJBQVMsR0FBRyxJQUFJLENBQUM7Ozs7O0FBRWpCLG1CQUFTLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7Ozs7QUFHckIsZUFBSyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLEdBQUcsSUFBSTs7QUFDdkMsV0FBQyxBQUFDLEtBQUssR0FBRyxNQUFNLEdBQUksQ0FBQyxDQUFBLENBQUUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7OzJDQUM5QixNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQzs7Ozs7OztHQUM3QixDQUFDLENBQUM7Q0FDSixDQUFDLENBQUMiLCJmaWxlIjoidGVzdC9lMmUvc2FmYXJpL3dlYnZpZXcvaW1wbGljaXQtd2FpdC1zcGVjcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzZXR1cCBmcm9tICcuLi8uLi9zZXR1cC1iYXNlJztcbmltcG9ydCBkZXNpcmVkIGZyb20gJy4vZGVzaXJlZCc7XG5cbmRlc2NyaWJlKCdzYWZhcmkgLSB3ZWJ2aWV3IGltcGxpY2l0IHdhaXQnLCBmdW5jdGlvbigpIHtcbiAgY29uc3QgZHJpdmVyID0gc2V0dXAodGhpcywgZGVzaXJlZCwgeyduby1yZXNldCc6IHRydWV9KS5kcml2ZXI7XG5cbiAgaXQoJ3Nob3VsZCBzZXQgdGhlIGltcGxpY2l0IHdhaXQgZm9yIGZpbmRpbmcgd2ViIGVsZW1lbnRzJywgYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IGRyaXZlci5pbXBsaWNpdFdhaXQoNyAqIDEwMDApO1xuXG4gICAgbGV0IGJlZm9yZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpIC8gMTAwMDtcbiAgICBsZXQgaGFzVGhyb3duID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiB3ZSBoYXZlIHRvIHVzZSB0cnkgY2F0Y2ggdG8gYWN0dWFsbHkgaGFsdCB0aGUgcHJvY2VzcyBoZXJlXG4gICAgICovXG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IGRyaXZlci5maW5kRWxlbWVudCgndGFnIG5hbWUnLCAnbm90Z29ubmFiZXRoZXJlJyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaGFzVGhyb3duID0gdHJ1ZTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaGFzVGhyb3duLnNob3VsZC5iZS5vaztcbiAgICB9XG5cbiAgICBsZXQgYWZ0ZXIgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSAvIDEwMDA7XG4gICAgKChhZnRlciAtIGJlZm9yZSkgPiA3KS5zaG91bGQuYmUub2s7XG4gICAgYXdhaXQgZHJpdmVyLmltcGxpY2l0V2FpdCgwKTtcbiAgfSk7XG59KTtcbiJdfQ==