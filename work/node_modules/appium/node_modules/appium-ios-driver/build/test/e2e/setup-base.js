'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _helpersEnv = require('./helpers/env');

var _helpersEnv2 = _interopRequireDefault(_helpersEnv);

var _helpersSession = require('./helpers/session');

var _helpersTitle = require('./helpers/title');

var _appiumExpress = require('appium-express');

var _appiumExpress2 = _interopRequireDefault(_appiumExpress);

var _mobileJsonWireProtocol = require('mobile-json-wire-protocol');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _libLogger = require('../../lib/logger');

var _libLogger2 = _interopRequireDefault(_libLogger);

require('./helpers/setup_testlibs');

var server = undefined;

function startServer(session) {
  var router;
  return _regeneratorRuntime.async(function startServer$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        router = (0, _mobileJsonWireProtocol.routeConfiguringFunction)(session.rawDriver);
        context$1$0.next = 3;
        return _regeneratorRuntime.awrap((0, _appiumExpress2['default'])(router, _helpersEnv2['default'].APPIUM_PORT, 'localhost'));

      case 3:
        server = context$1$0.sent;

        _libLogger2['default'].info('IosDriver server listening on http://localhost:' + _helpersEnv2['default'].APPIUM_PORT);

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function setup(context, desired) {
  var opts = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

  var _this = this;

  var envOverrides = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];
  var needsNewServer = arguments.length <= 4 || arguments[4] === undefined ? false : arguments[4];

  context.timeout(_helpersEnv2['default'].MOCHA_INIT_TIMEOUT);
  var newEnv = _lodash2['default'].clone(_helpersEnv2['default']);
  if (envOverrides) {
    _lodash2['default'].extend(newEnv, envOverrides);
  }

  if (!opts.port) {
    opts.port = _helpersEnv2['default'].APPIUM_PORT;
  }

  opts.callbackAddress = 'localhost';

  var session = new _helpersSession.Session(desired, opts);
  var allPassed = true;

  before(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          if (server) {
            context$2$0.next = 5;
            break;
          }

          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(startServer(session));

        case 3:
          context$2$0.next = 9;
          break;

        case 5:
          if (!needsNewServer) {
            context$2$0.next = 9;
            break;
          }

          server.close();
          context$2$0.next = 9;
          return _regeneratorRuntime.awrap(startServer(session));

        case 9:
          context$2$0.next = 11;
          return _regeneratorRuntime.awrap(session.setUp((0, _helpersTitle.getTitle)(context)));

        case 11:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  after(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(session.tearDown(allPassed));

        case 2:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  afterEach(function () {
    allPassed = allPassed && this.currentTest.state === 'passed';
  });

  return session;
}

exports['default'] = setup;
module.exports = exports['default'];

// start the server before start the session, so startup can use it if necessary
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZTJlL3NldHVwLWJhc2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OzswQkFDZ0IsZUFBZTs7Ozs4QkFDUCxtQkFBbUI7OzRCQUNsQixpQkFBaUI7OzZCQUNKLGdCQUFnQjs7OztzQ0FDYiwyQkFBMkI7O3NCQUN0RCxRQUFROzs7O3lCQUNOLGtCQUFrQjs7OztRQUMzQiwwQkFBMEI7O0FBR2pDLElBQUksTUFBTSxZQUFBLENBQUM7O0FBRVgsU0FBZSxXQUFXLENBQUUsT0FBTztNQUU3QixNQUFNOzs7O0FBQU4sY0FBTSxHQUFHLHNEQUF5QixPQUFPLENBQUMsU0FBUyxDQUFDOzt5Q0FDekMsZ0NBQVcsTUFBTSxFQUFFLHdCQUFJLFdBQVcsRUFBRSxXQUFXLENBQUM7OztBQUEvRCxjQUFNOztBQUNOLCtCQUFJLElBQUkscURBQW1ELHdCQUFJLFdBQVcsQ0FBRyxDQUFDOzs7Ozs7O0NBQy9FOztBQUVELFNBQVMsS0FBSyxDQUFFLE9BQU8sRUFBRSxPQUFPLEVBQTJEO01BQXpELElBQUkseURBQUcsRUFBRTs7OztNQUFFLFlBQVkseURBQUcsS0FBSztNQUFFLGNBQWMseURBQUcsS0FBSzs7QUFDdkYsU0FBTyxDQUFDLE9BQU8sQ0FBQyx3QkFBSSxrQkFBa0IsQ0FBQyxDQUFDO0FBQ3hDLE1BQUksTUFBTSxHQUFHLG9CQUFFLEtBQUsseUJBQUssQ0FBQztBQUMxQixNQUFJLFlBQVksRUFBRTtBQUNoQix3QkFBRSxNQUFNLENBQUMsTUFBTSxFQUFFLFlBQVksQ0FBQyxDQUFDO0dBQ2hDOztBQUVELE1BQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFO0FBQ2QsUUFBSSxDQUFDLElBQUksR0FBRyx3QkFBSSxXQUFXLENBQUM7R0FDN0I7O0FBRUQsTUFBSSxDQUFDLGVBQWUsR0FBRyxXQUFXLENBQUM7O0FBRW5DLE1BQUksT0FBTyxHQUFHLDRCQUFZLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQztBQUN6QyxNQUFJLFNBQVMsR0FBRyxJQUFJLENBQUM7O0FBRXJCLFFBQU0sQ0FBQzs7OztjQUNBLE1BQU07Ozs7OzsyQ0FDSCxXQUFXLENBQUMsT0FBTyxDQUFDOzs7Ozs7O2VBQ2pCLGNBQWM7Ozs7O0FBQ3ZCLGdCQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7OzJDQUNULFdBQVcsQ0FBQyxPQUFPLENBQUM7Ozs7MkNBRXRCLE9BQU8sQ0FBQyxLQUFLLENBQUMsNEJBQVMsT0FBTyxDQUFDLENBQUM7Ozs7Ozs7R0FDdkMsQ0FBQyxDQUFDOztBQUVILE9BQUssQ0FBQzs7Ozs7MkNBQ0UsT0FBTyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUM7Ozs7Ozs7R0FDbEMsQ0FBQyxDQUFDOztBQUVILFdBQVMsQ0FBQyxZQUFZO0FBQ3BCLGFBQVMsR0FBRyxTQUFTLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEtBQUssUUFBUSxDQUFDO0dBQzlELENBQUMsQ0FBQzs7QUFFSCxTQUFPLE9BQU8sQ0FBQztDQUNoQjs7cUJBRWMsS0FBSyIsImZpbGUiOiJ0ZXN0L2UyZS9zZXR1cC1iYXNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgZW52IGZyb20gJy4vaGVscGVycy9lbnYnO1xuaW1wb3J0IHsgU2Vzc2lvbiB9IGZyb20gJy4vaGVscGVycy9zZXNzaW9uJztcbmltcG9ydCB7IGdldFRpdGxlIH0gZnJvbSAnLi9oZWxwZXJzL3RpdGxlJztcbmltcG9ydCB7IGRlZmF1bHQgYXMgYmFzZVNlcnZlciB9IGZyb20gJ2FwcGl1bS1leHByZXNzJztcbmltcG9ydCB7IHJvdXRlQ29uZmlndXJpbmdGdW5jdGlvbiB9IGZyb20gJ21vYmlsZS1qc29uLXdpcmUtcHJvdG9jb2wnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBsb2cgZnJvbSAnLi4vLi4vbGliL2xvZ2dlcic7XG5pbXBvcnQgJy4vaGVscGVycy9zZXR1cF90ZXN0bGlicyc7XG5cblxubGV0IHNlcnZlcjtcblxuYXN5bmMgZnVuY3Rpb24gc3RhcnRTZXJ2ZXIgKHNlc3Npb24pIHtcbiAgLy8gc3RhcnQgdGhlIHNlcnZlciBiZWZvcmUgc3RhcnQgdGhlIHNlc3Npb24sIHNvIHN0YXJ0dXAgY2FuIHVzZSBpdCBpZiBuZWNlc3NhcnlcbiAgbGV0IHJvdXRlciA9IHJvdXRlQ29uZmlndXJpbmdGdW5jdGlvbihzZXNzaW9uLnJhd0RyaXZlcik7XG4gIHNlcnZlciA9IGF3YWl0IGJhc2VTZXJ2ZXIocm91dGVyLCBlbnYuQVBQSVVNX1BPUlQsICdsb2NhbGhvc3QnKTtcbiAgbG9nLmluZm8oYElvc0RyaXZlciBzZXJ2ZXIgbGlzdGVuaW5nIG9uIGh0dHA6Ly9sb2NhbGhvc3Q6JHtlbnYuQVBQSVVNX1BPUlR9YCk7XG59XG5cbmZ1bmN0aW9uIHNldHVwIChjb250ZXh0LCBkZXNpcmVkLCBvcHRzID0ge30sIGVudk92ZXJyaWRlcyA9IGZhbHNlLCBuZWVkc05ld1NlcnZlciA9IGZhbHNlKSB7XG4gIGNvbnRleHQudGltZW91dChlbnYuTU9DSEFfSU5JVF9USU1FT1VUKTtcbiAgbGV0IG5ld0VudiA9IF8uY2xvbmUoZW52KTtcbiAgaWYgKGVudk92ZXJyaWRlcykge1xuICAgIF8uZXh0ZW5kKG5ld0VudiwgZW52T3ZlcnJpZGVzKTtcbiAgfVxuXG4gIGlmICghb3B0cy5wb3J0KSB7XG4gICAgb3B0cy5wb3J0ID0gZW52LkFQUElVTV9QT1JUO1xuICB9XG5cbiAgb3B0cy5jYWxsYmFja0FkZHJlc3MgPSAnbG9jYWxob3N0JztcblxuICBsZXQgc2Vzc2lvbiA9IG5ldyBTZXNzaW9uKGRlc2lyZWQsIG9wdHMpO1xuICBsZXQgYWxsUGFzc2VkID0gdHJ1ZTtcblxuICBiZWZvcmUoYXN5bmMgKCkgPT4ge1xuICAgIGlmICghc2VydmVyKSB7XG4gICAgICBhd2FpdCBzdGFydFNlcnZlcihzZXNzaW9uKTtcbiAgICB9IGVsc2UgaWYgKG5lZWRzTmV3U2VydmVyKSB7XG4gICAgICBzZXJ2ZXIuY2xvc2UoKTtcbiAgICAgIGF3YWl0IHN0YXJ0U2VydmVyKHNlc3Npb24pO1xuICAgIH1cbiAgICBhd2FpdCBzZXNzaW9uLnNldFVwKGdldFRpdGxlKGNvbnRleHQpKTtcbiAgfSk7XG5cbiAgYWZ0ZXIoYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IHNlc3Npb24udGVhckRvd24oYWxsUGFzc2VkKTtcbiAgfSk7XG5cbiAgYWZ0ZXJFYWNoKGZ1bmN0aW9uICgpIHtcbiAgICBhbGxQYXNzZWQgPSBhbGxQYXNzZWQgJiYgdGhpcy5jdXJyZW50VGVzdC5zdGF0ZSA9PT0gJ3Bhc3NlZCc7XG4gIH0pO1xuXG4gIHJldHVybiBzZXNzaW9uO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzZXR1cDtcbiJdfQ==