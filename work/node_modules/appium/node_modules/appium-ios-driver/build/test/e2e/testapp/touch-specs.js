'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _setupBase = require("../setup-base");

var _setupBase2 = _interopRequireDefault(_setupBase);

var _desired = require('./desired');

var _desired2 = _interopRequireDefault(_desired);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _helpersRecipes = require('../helpers/recipes');

//let okIfAlert = require('../../../helpers/alert').okIfAlert,

describe('testapp - touch actions', function () {
  var session = (0, _setupBase2['default'])(this, _desired2['default']);
  var driver = session.driver;

  function goToMap() {
    var map, buttons, gestures;
    return _regeneratorRuntime.async(function goToMap$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          map = undefined;
          context$2$0.prev = 1;
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(driver.findElement('xpath', '//UIAMapView'));

        case 4:
          map = context$2$0.sent;
          context$2$0.next = 9;
          break;

        case 7:
          context$2$0.prev = 7;
          context$2$0.t0 = context$2$0['catch'](1);

        case 9:
          if (map) {
            context$2$0.next = 22;
            break;
          }

          context$2$0.next = 12;
          return _regeneratorRuntime.awrap(driver.findElements('class name', 'UIAButton'));

        case 12:
          buttons = context$2$0.sent;
          gestures = [{ action: 'tap', options: { element: buttons[5].ELEMENT } }];
          context$2$0.next = 16;
          return _regeneratorRuntime.awrap(driver.performTouch(gestures));

        case 16:
          context$2$0.next = 18;
          return _regeneratorRuntime.awrap(_bluebird2['default'].delay(500));

        case 18:
          context$2$0.next = 20;
          return _regeneratorRuntime.awrap((0, _helpersRecipes.okIfAlert)(driver));

        case 20:
          context$2$0.next = 22;
          return _regeneratorRuntime.awrap(_bluebird2['default'].delay(500));

        case 22:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this, [[1, 7]]);
  }

  describe('tap', function () {
    var _this = this;

    it('should tap on a specified element', function callee$2$0() {
      var buttons, gestures;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.findElements('class name', 'UIAButton'));

          case 2:
            buttons = context$3$0.sent;
            gestures = [{ action: 'tap', options: { element: buttons[1].ELEMENT } }];
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(driver.performTouch(gestures));

          case 6:
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap(_bluebird2['default'].delay(1000));

          case 8:
            context$3$0.next = 10;
            return _regeneratorRuntime.awrap((0, _helpersRecipes.okIfAlert)(driver));

          case 10:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  });

  describe('wait', function () {
    var _this2 = this;

    it('should move the page and wait a bit', function callee$2$0() {
      var map, gestures;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(goToMap());

          case 2:
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.findElement('xpath', '//UIAMapView'));

          case 4:
            map = context$3$0.sent;
            gestures = [{ action: 'press', options: { element: map.ELEMENT } }, { action: 'moveTo', options: { element: map.ELEMENT, x: 0, y: 100 } }, { action: 'wait', options: { ms: 5000 } }, { action: 'moveTo', options: { element: map.ELEMENT, x: 0, y: 0 } }, { action: 'release' }];
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap(driver.performTouch(gestures));

          case 8:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this2);
    });
  });

  describe('pinch', function () {
    var _this3 = this;

    it('should do some pinching', function callee$2$0() {
      var map, actions;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(goToMap());

          case 2:
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.findElement('xpath', '//UIAMapView'));

          case 4:
            map = context$3$0.sent;
            actions = [[{ action: 'press', options: { element: map.ELEMENT } }, { action: 'moveTo', options: { element: map.ELEMENT, x: 0, y: 0 } }, { action: 'release' }], [{ action: 'press', options: { element: map.ELEMENT } }, { action: 'moveTo', options: { element: map.ELEMENT, x: 100, y: 100 } }, { action: 'release' }]];
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap(driver.performMultiAction(actions));

          case 8:
            context$3$0.next = 10;
            return _regeneratorRuntime.awrap(_bluebird2['default'].delay(1000));

          case 10:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this3);
    });

    it('should do more involved pinching in and out', function callee$2$0() {
      var map, actions;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(goToMap());

          case 2:
            context$3$0.next = 4;
            return _regeneratorRuntime.awrap(driver.findElement('xpath', '//UIAMapView'));

          case 4:
            map = context$3$0.sent;
            actions = [[{ action: 'press', options: { element: map.ELEMENT } }, { action: 'moveTo', options: { element: map.ELEMENT, x: 25, y: 25 } }, { action: 'wait', options: { ms: 3000 } }, { action: 'moveTo', options: { element: map.ELEMENT, x: 100, y: 100 } }, { action: 'release' }], [{ action: 'press', options: { element: map.ELEMENT } }, { action: 'moveTo', options: { element: map.ELEMENT, x: 100, y: 0 } }, { action: 'wait', options: { ms: 3000 } }, { action: 'moveTo', options: { element: map.ELEMENT, x: 0, y: 0 } }, { action: 'release' }]];
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap(driver.performMultiAction(actions));

          case 8:
            context$3$0.next = 10;
            return _regeneratorRuntime.awrap(_bluebird2['default'].delay(1000));

          case 10:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this3);
    });
  });
});

describe('testapp - swipe actions', function () {
  var session = (0, _setupBase2['default'])(this, _desired2['default']);
  var driver = session.driver;

  describe('swipe', function () {
    var _this4 = this;

    var slider = undefined,
        target = undefined,
        loc = undefined;
    var leftPos = { x: 0, y: 0 },
        rightPos = { x: 0, y: 0 },
        centerPos = { x: 0, y: 0 };

    var getNumericValue = function getNumericValue(pctVal) {
      pctVal = pctVal.replace("%", "");
      pctVal = parseInt(pctVal, 10);
      return pctVal;
    };

    var testSliderValueNot0or100 = function testSliderValueNot0or100(value) {
      value = getNumericValue(value);
      // should be ~50
      value.should.be.above(15);
      value.should.be.below(85);
    };

    var getSliderValue = function getSliderValue() {
      return _regeneratorRuntime.async(function getSliderValue$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.getAttribute('value', slider));

          case 2:
            return context$3$0.abrupt('return', context$3$0.sent);

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    };

    before(function callee$2$0() {
      var size;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(driver.findElement('class name', "UIASlider"));

          case 2:
            slider = context$3$0.sent;
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(driver.getLocation(slider));

          case 5:
            loc = context$3$0.sent;
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap(driver.getSize(slider));

          case 8:
            size = context$3$0.sent;

            leftPos.x = loc.x - 5;
            centerPos.x = loc.x + size.width * 0.5;
            rightPos.x = loc.x + size.width + 5;
            leftPos.y = rightPos.y = centerPos.y = loc.y + size.height * 0.5;
            target = driver.findElement('Accessibility id', "Access'ibility");
            context$3$0.next = 16;
            return _regeneratorRuntime.awrap(getSliderValue());

          case 16:
            context$3$0.t0 = context$3$0.sent;
            testSliderValueNot0or100(context$3$0.t0);

          case 18:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this4);
    });

    // TODO: For some reason it does not swipe to 100% in ci env, investigate
    it('should work with: press {element}, moveTo {destEl} @skip-ci', function callee$2$0() {
      var origValue, gestures;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(getSliderValue());

          case 2:
            origValue = context$3$0.sent;
            gestures = [{ action: 'press', options: { element: slider.ELEMENT } }, { action: 'wait', options: { ms: 500 } }, { action: 'moveTo', options: { element: target.ELEMENT } }, { action: 'release' }];
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(driver.performTouch(gestures));

          case 6:
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap(getSliderValue());

          case 8:
            context$3$0.t0 = origValue;
            context$3$0.sent.should.not.equal(context$3$0.t0);
            context$3$0.next = 12;
            return _regeneratorRuntime.awrap(_bluebird2['default'].delay(1000));

          case 12:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this4);
    });

    // TODO: in ios84 the destEl is in a weird place, so we don't test value
    //(await getSliderValue()).should.equal("100%")
    it('should work with: press {element, x, y}, moveTo {element, x, y}', function callee$2$0() {
      var gestures;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            gestures = [{ action: 'press', options: { element: slider.ELEMENT, x: 0.8665, y: 0.5 } }, { action: 'wait', options: { ms: 500 } }, { action: 'moveTo', options: { element: slider.ELEMENT, x: 0.5, y: 0.5 } }, { action: 'release' }];
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.performTouch(gestures));

          case 3:
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(getSliderValue());

          case 5:
            context$3$0.t0 = context$3$0.sent;
            testSliderValueNot0or100(context$3$0.t0);
            context$3$0.next = 9;
            return _regeneratorRuntime.awrap(_bluebird2['default'].delay(1000));

          case 9:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this4);
    });

    it('should work with: press {x, y}, moveTo {x, y}', function callee$2$0() {
      var gestures;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            gestures = [{ action: 'press', options: { x: centerPos.x, y: centerPos.y } }, { action: 'wait', options: { ms: 500 } }, { action: 'moveTo', options: { x: leftPos.x - centerPos.x, y: leftPos.y - centerPos.y } }, { action: 'release' }];
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.performTouch(gestures));

          case 3:
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(getSliderValue());

          case 5:
            context$3$0.sent.should.equal("0%");

          case 6:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this4);
    });

    it('should work with: {element, x, y}, moveTo {destEl, x, y} @skip-ci', function callee$2$0() {
      var gestures;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            gestures = [{ action: 'press', options: { element: slider.ELEMENT, x: 0, y: 0.5 } }, { action: 'wait', options: { ms: 500 } }, { action: 'moveTo', options: { element: target.ELEMENT, x: 50, y: 0.5 } }, { action: 'release' }];
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.performTouch(gestures));

          case 3:
            context$3$0.next = 5;
            return _regeneratorRuntime.awrap(getSliderValue());

          case 5:
            context$3$0.t0 = context$3$0.sent;
            testSliderValueNot0or100(context$3$0.t0);

          case 7:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this4);
    });

    // TODO: Crashes in ci env, investigate
    // TODO: For some reason it does not swipe to 100% in ci env, investigate
    it("should work with press {x, y}, moveTo {destEl} @skip-ci", function callee$2$0() {
      var origValue, gestures;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap(getSliderValue());

          case 2:
            origValue = context$3$0.sent;
            gestures = [{ action: 'press', options: { x: centerPos.x, y: centerPos.y } }, { action: 'wait', options: { ms: 500 } }, { action: 'moveTo', options: { element: target.ELEMENT } }, { action: 'release' }];
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(driver.performTouch(gestures));

          case 6:
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap(getSliderValue());

          case 8:
            context$3$0.t0 = origValue;
            context$3$0.sent.should.not.equal(context$3$0.t0);

          case 10:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this4);
    });
  });
});

// TODO: weird element position in iOS 8.4 so not checking exact value.
//.then(getSliderValue).should.become("100%")
//# sourceMappingURL=data:application/json;base64,