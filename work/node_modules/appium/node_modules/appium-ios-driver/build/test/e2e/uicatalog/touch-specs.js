'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _setupBase = require("../setup-base");

var _setupBase2 = _interopRequireDefault(_setupBase);

var _desired = require('./desired');

var _desired2 = _interopRequireDefault(_desired);

describe('uicatalog - touch', function () {
  var _this = this;

  var session = (0, _setupBase2['default'])(this, _desired2['default']);
  var driver = session.driver;

  before(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(driver.execute("mobile: scroll", { direction: 'down' }));

        case 2:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  afterEach(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.prev = 0;
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(driver.back());

        case 3:
          context$2$0.next = 7;
          break;

        case 5:
          context$2$0.prev = 5;
          context$2$0.t0 = context$2$0['catch'](0);

        case 7:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this, [[0, 5]]);
  });

  it('should tap element with count', function callee$1$0() {
    var el1, el2, gestures, els;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(driver.findElement('xpath', '//UIAStaticText[contains(@label, \'Steppers\')]'));

        case 2:
          el1 = context$2$0.sent;
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(driver.click(el1));

        case 5:
          context$2$0.next = 7;
          return _regeneratorRuntime.awrap(driver.findElement('accessibility id', 'Increment'));

        case 7:
          el2 = context$2$0.sent;
          gestures = [{ action: 'tap', options: { count: 10, element: el2.ELEMENT } }];
          context$2$0.next = 11;
          return _regeneratorRuntime.awrap(driver.performTouch(gestures));

        case 11:
          context$2$0.next = 13;
          return _regeneratorRuntime.awrap(driver.findElements('accessibility id', '10'));

        case 13:
          els = context$2$0.sent;

          els.should.have.length(2);

        case 15:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should tap element with offset and count', function callee$1$0() {
    var el1, el2, gestures, els;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(driver.findElement('xpath', '//UIAStaticText[contains(@label, \'Steppers\')]'));

        case 2:
          el1 = context$2$0.sent;
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(driver.click(el1));

        case 5:
          context$2$0.next = 7;
          return _regeneratorRuntime.awrap(driver.findElement('accessibility id', 'Increment'));

        case 7:
          el2 = context$2$0.sent;
          gestures = [{ action: 'tap', options: { x: 10, y: 10, count: 7, element: el2.ELEMENT } }];
          context$2$0.next = 11;
          return _regeneratorRuntime.awrap(driver.performTouch(gestures));

        case 11:
          context$2$0.next = 13;
          return _regeneratorRuntime.awrap(driver.findElements('accessibility id', '7'));

        case 13:
          els = context$2$0.sent;

          els.should.have.length(2);

        case 15:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should tap offset with count', function callee$1$0() {
    var el1, el2, loc, gestures, els;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(driver.findElement('xpath', '//UIAStaticText[contains(@label, \'Steppers\')]'));

        case 2:
          el1 = context$2$0.sent;
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(driver.click(el1));

        case 5:
          context$2$0.next = 7;
          return _regeneratorRuntime.awrap(driver.findElement('accessibility id', 'Increment'));

        case 7:
          el2 = context$2$0.sent;
          context$2$0.next = 10;
          return _regeneratorRuntime.awrap(driver.getLocation(el2));

        case 10:
          loc = context$2$0.sent;
          gestures = [{ action: 'tap', options: { x: loc.x, y: loc.y, count: 3 } }];
          context$2$0.next = 14;
          return _regeneratorRuntime.awrap(driver.performTouch(gestures));

        case 14:
          context$2$0.next = 16;
          return _regeneratorRuntime.awrap(driver.findElements('accessibility id', '3'));

        case 16:
          els = context$2$0.sent;

          els.should.have.length(2);

        case 18:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZTJlL3VpY2F0YWxvZy90b3VjaC1zcGVjcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7eUJBQWtCLGVBQWU7Ozs7dUJBQ2IsV0FBVzs7OztBQUUvQixRQUFRLENBQUMsbUJBQW1CLEVBQUUsWUFBWTs7O0FBQ3hDLE1BQUksT0FBTyxHQUFHLDRCQUFNLElBQUksdUJBQVUsQ0FBQztBQUNuQyxNQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDOztBQUU1QixRQUFNLENBQUM7Ozs7OzJDQUNDLE1BQU0sQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLEVBQUUsRUFBQyxTQUFTLEVBQUUsTUFBTSxFQUFDLENBQUM7Ozs7Ozs7R0FDNUQsQ0FBQyxDQUFDOztBQUVILFdBQVMsQ0FBQzs7Ozs7OzJDQUVBLE1BQU0sQ0FBQyxJQUFJLEVBQUU7Ozs7Ozs7Ozs7Ozs7OztHQUV0QixDQUFDLENBQUM7O0FBR0gsSUFBRSxDQUFDLCtCQUErQixFQUFFO1FBQzlCLEdBQUcsRUFFSCxHQUFHLEVBQ0gsUUFBUSxFQUVSLEdBQUc7Ozs7OzJDQUxTLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLGlEQUFpRCxDQUFDOzs7QUFBMUYsYUFBRzs7MkNBQ0QsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7Ozs7MkNBQ1AsTUFBTSxDQUFDLFdBQVcsQ0FBQyxrQkFBa0IsRUFBRSxXQUFXLENBQUM7OztBQUEvRCxhQUFHO0FBQ0gsa0JBQVEsR0FBRyxDQUFDLEVBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsRUFBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLE9BQU8sRUFBRSxHQUFHLENBQUMsT0FBTyxFQUFDLEVBQUMsQ0FBQzs7MkNBQ3RFLE1BQU0sQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDOzs7OzJDQUNuQixNQUFNLENBQUMsWUFBWSxDQUFDLGtCQUFrQixFQUFFLElBQUksQ0FBQzs7O0FBQXpELGFBQUc7O0FBQ1AsYUFBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDOzs7Ozs7O0dBQzNCLENBQUMsQ0FBQzs7QUFFSCxJQUFFLENBQUMsMENBQTBDLEVBQUU7UUFDekMsR0FBRyxFQUVILEdBQUcsRUFDSCxRQUFRLEVBRVIsR0FBRzs7Ozs7MkNBTFMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsaURBQWlELENBQUM7OztBQUExRixhQUFHOzsyQ0FDRCxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQzs7OzsyQ0FDUCxNQUFNLENBQUMsV0FBVyxDQUFDLGtCQUFrQixFQUFFLFdBQVcsQ0FBQzs7O0FBQS9ELGFBQUc7QUFDSCxrQkFBUSxHQUFHLENBQUMsRUFBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxFQUFDLENBQUMsRUFBQyxFQUFFLEVBQUUsQ0FBQyxFQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxHQUFHLENBQUMsT0FBTyxFQUFDLEVBQUMsQ0FBQzs7MkNBQ2pGLE1BQU0sQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDOzs7OzJDQUNuQixNQUFNLENBQUMsWUFBWSxDQUFDLGtCQUFrQixFQUFFLEdBQUcsQ0FBQzs7O0FBQXhELGFBQUc7O0FBQ1AsYUFBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDOzs7Ozs7O0dBQzNCLENBQUMsQ0FBQzs7QUFFSCxJQUFFLENBQUMsOEJBQThCLEVBQUU7UUFDN0IsR0FBRyxFQUVILEdBQUcsRUFDSCxHQUFHLEVBQ0gsUUFBUSxFQUVSLEdBQUc7Ozs7OzJDQU5TLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLGlEQUFpRCxDQUFDOzs7QUFBMUYsYUFBRzs7MkNBQ0QsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7Ozs7MkNBQ1AsTUFBTSxDQUFDLFdBQVcsQ0FBQyxrQkFBa0IsRUFBRSxXQUFXLENBQUM7OztBQUEvRCxhQUFHOzsyQ0FDUyxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQzs7O0FBQW5DLGFBQUc7QUFDSCxrQkFBUSxHQUFHLENBQUMsRUFBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxFQUFDLENBQUMsRUFBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUMsRUFBQyxDQUFDOzsyQ0FDakUsTUFBTSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUM7Ozs7MkNBQ25CLE1BQU0sQ0FBQyxZQUFZLENBQUMsa0JBQWtCLEVBQUUsR0FBRyxDQUFDOzs7QUFBeEQsYUFBRzs7QUFDUCxhQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7Ozs7Ozs7R0FDM0IsQ0FBQyxDQUFDO0NBRUosQ0FBQyxDQUFDIiwiZmlsZSI6InRlc3QvZTJlL3VpY2F0YWxvZy90b3VjaC1zcGVjcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzZXR1cCBmcm9tIFwiLi4vc2V0dXAtYmFzZVwiO1xuaW1wb3J0IGRlc2lyZWQgZnJvbSAnLi9kZXNpcmVkJztcblxuZGVzY3JpYmUoJ3VpY2F0YWxvZyAtIHRvdWNoJywgZnVuY3Rpb24gKCkge1xuICBsZXQgc2Vzc2lvbiA9IHNldHVwKHRoaXMsIGRlc2lyZWQpO1xuICBsZXQgZHJpdmVyID0gc2Vzc2lvbi5kcml2ZXI7XG5cbiAgYmVmb3JlKGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBkcml2ZXIuZXhlY3V0ZShcIm1vYmlsZTogc2Nyb2xsXCIsIHtkaXJlY3Rpb246ICdkb3duJ30pO1xuICB9KTtcblxuICBhZnRlckVhY2goYXN5bmMgKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBhd2FpdCBkcml2ZXIuYmFjaygpO1xuICAgIH0gY2F0Y2ggKGlnbikge31cbiAgfSk7XG5cblxuICBpdCgnc2hvdWxkIHRhcCBlbGVtZW50IHdpdGggY291bnQnLCBhc3luYyAoKSA9PiB7XG4gICAgbGV0IGVsMSA9IGF3YWl0IGRyaXZlci5maW5kRWxlbWVudCgneHBhdGgnLCAnLy9VSUFTdGF0aWNUZXh0W2NvbnRhaW5zKEBsYWJlbCwgXFwnU3RlcHBlcnNcXCcpXScpO1xuICAgIGF3YWl0IGRyaXZlci5jbGljayhlbDEpO1xuICAgIGxldCBlbDIgPSBhd2FpdCBkcml2ZXIuZmluZEVsZW1lbnQoJ2FjY2Vzc2liaWxpdHkgaWQnLCAnSW5jcmVtZW50Jyk7XG4gICAgbGV0IGdlc3R1cmVzID0gW3thY3Rpb246ICd0YXAnLCBvcHRpb25zOiB7Y291bnQ6IDEwLCBlbGVtZW50OiBlbDIuRUxFTUVOVH19XTtcbiAgICBhd2FpdCBkcml2ZXIucGVyZm9ybVRvdWNoKGdlc3R1cmVzKTtcbiAgICBsZXQgZWxzID0gYXdhaXQgZHJpdmVyLmZpbmRFbGVtZW50cygnYWNjZXNzaWJpbGl0eSBpZCcsICcxMCcpO1xuICAgIGVscy5zaG91bGQuaGF2ZS5sZW5ndGgoMik7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgdGFwIGVsZW1lbnQgd2l0aCBvZmZzZXQgYW5kIGNvdW50JywgYXN5bmMgKCkgPT4ge1xuICAgIGxldCBlbDEgPSBhd2FpdCBkcml2ZXIuZmluZEVsZW1lbnQoJ3hwYXRoJywgJy8vVUlBU3RhdGljVGV4dFtjb250YWlucyhAbGFiZWwsIFxcJ1N0ZXBwZXJzXFwnKV0nKTtcbiAgICBhd2FpdCBkcml2ZXIuY2xpY2soZWwxKTtcbiAgICBsZXQgZWwyID0gYXdhaXQgZHJpdmVyLmZpbmRFbGVtZW50KCdhY2Nlc3NpYmlsaXR5IGlkJywgJ0luY3JlbWVudCcpO1xuICAgIGxldCBnZXN0dXJlcyA9IFt7YWN0aW9uOiAndGFwJywgb3B0aW9uczoge3g6MTAsIHk6MTAsIGNvdW50OiA3LCBlbGVtZW50OiBlbDIuRUxFTUVOVH19XTtcbiAgICBhd2FpdCBkcml2ZXIucGVyZm9ybVRvdWNoKGdlc3R1cmVzKTtcbiAgICBsZXQgZWxzID0gYXdhaXQgZHJpdmVyLmZpbmRFbGVtZW50cygnYWNjZXNzaWJpbGl0eSBpZCcsICc3Jyk7XG4gICAgZWxzLnNob3VsZC5oYXZlLmxlbmd0aCgyKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCB0YXAgb2Zmc2V0IHdpdGggY291bnQnLCBhc3luYyAoKSA9PiB7XG4gICAgbGV0IGVsMSA9IGF3YWl0IGRyaXZlci5maW5kRWxlbWVudCgneHBhdGgnLCAnLy9VSUFTdGF0aWNUZXh0W2NvbnRhaW5zKEBsYWJlbCwgXFwnU3RlcHBlcnNcXCcpXScpO1xuICAgIGF3YWl0IGRyaXZlci5jbGljayhlbDEpO1xuICAgIGxldCBlbDIgPSBhd2FpdCBkcml2ZXIuZmluZEVsZW1lbnQoJ2FjY2Vzc2liaWxpdHkgaWQnLCAnSW5jcmVtZW50Jyk7XG4gICAgbGV0IGxvYyA9IGF3YWl0IGRyaXZlci5nZXRMb2NhdGlvbihlbDIpO1xuICAgIGxldCBnZXN0dXJlcyA9IFt7YWN0aW9uOiAndGFwJywgb3B0aW9uczoge3g6bG9jLngsIHk6bG9jLnksIGNvdW50OiAzfX1dO1xuICAgIGF3YWl0IGRyaXZlci5wZXJmb3JtVG91Y2goZ2VzdHVyZXMpO1xuICAgIGxldCBlbHMgPSBhd2FpdCBkcml2ZXIuZmluZEVsZW1lbnRzKCdhY2Nlc3NpYmlsaXR5IGlkJywgJzMnKTtcbiAgICBlbHMuc2hvdWxkLmhhdmUubGVuZ3RoKDIpO1xuICB9KTtcblxufSk7XG4iXX0=