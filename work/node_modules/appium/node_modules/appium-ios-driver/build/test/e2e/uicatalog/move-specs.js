'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _helpersEnv = require('../helpers/env');

var _helpersEnv2 = _interopRequireDefault(_helpersEnv);

var _setupBase = require("../setup-base");

var _setupBase2 = _interopRequireDefault(_setupBase);

var _desired = require('./desired');

var _desired2 = _interopRequireDefault(_desired);

describe('uicatalog - move', function () {

  describe('moveTo and click', function () {
    var _this = this;

    var session = (0, _setupBase2['default'])(this, _desired2['default']);
    var driver = session.driver;

    it('should be able to click on arbitrary x-y elements', function callee$2$0() {
      var axIdExt, el1, el2;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            axIdExt = _helpersEnv2['default'].IOS8 || _helpersEnv2['default'].IOS9 ? "" : ", AAPLButtonViewController";
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.findElement('accessibility id', 'Buttons' + axIdExt));

          case 3:
            el1 = context$3$0.sent;
            context$3$0.next = 6;
            return _regeneratorRuntime.awrap(driver.moveTo(el1, 10, 10));

          case 6:
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap(driver.clickCurrent());

          case 8:
            context$3$0.next = 10;
            return _regeneratorRuntime.awrap(driver.findElement('xpath', "//UIAElement['SYSTEM (CONTACT ADD)']"));

          case 10:
            el2 = context$3$0.sent;

            el2.should.exist;

          case 12:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZTJlL3VpY2F0YWxvZy9tb3ZlLXNwZWNzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OzswQkFBZ0IsZ0JBQWdCOzs7O3lCQUNkLGVBQWU7Ozs7dUJBQ2IsV0FBVzs7OztBQUUvQixRQUFRLENBQUMsa0JBQWtCLEVBQUUsWUFBWTs7QUFFdkMsVUFBUSxDQUFDLGtCQUFrQixFQUFFLFlBQVk7OztBQUN2QyxRQUFJLE9BQU8sR0FBRyw0QkFBTSxJQUFJLHVCQUFVLENBQUM7QUFDbkMsUUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQzs7QUFFNUIsTUFBRSxDQUFDLG1EQUFtRCxFQUFFO1VBQ2xELE9BQU8sRUFDUCxHQUFHLEVBR0gsR0FBRzs7OztBQUpILG1CQUFPLEdBQUcsd0JBQUksSUFBSSxJQUFJLHdCQUFJLElBQUksR0FBRyxFQUFFLEdBQUcsNEJBQTRCOzs2Q0FDdEQsTUFBTSxDQUFDLFdBQVcsQ0FBQyxrQkFBa0IsY0FBWSxPQUFPLENBQUc7OztBQUF2RSxlQUFHOzs2Q0FDRCxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDOzs7OzZDQUMxQixNQUFNLENBQUMsWUFBWSxFQUFFOzs7OzZDQUNYLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLHNDQUFzQyxDQUFDOzs7QUFBL0UsZUFBRzs7QUFDUCxlQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQzs7Ozs7OztLQUNsQixDQUFDLENBQUM7R0FDSixDQUFDLENBQUM7Q0FDSixDQUFDLENBQUMiLCJmaWxlIjoidGVzdC9lMmUvdWljYXRhbG9nL21vdmUtc3BlY3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZW52IGZyb20gJy4uL2hlbHBlcnMvZW52JztcbmltcG9ydCBzZXR1cCBmcm9tIFwiLi4vc2V0dXAtYmFzZVwiO1xuaW1wb3J0IGRlc2lyZWQgZnJvbSAnLi9kZXNpcmVkJztcblxuZGVzY3JpYmUoJ3VpY2F0YWxvZyAtIG1vdmUnLCBmdW5jdGlvbiAoKSB7XG5cbiAgZGVzY3JpYmUoJ21vdmVUbyBhbmQgY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IHNlc3Npb24gPSBzZXR1cCh0aGlzLCBkZXNpcmVkKTtcbiAgICBsZXQgZHJpdmVyID0gc2Vzc2lvbi5kcml2ZXI7XG5cbiAgICBpdCgnc2hvdWxkIGJlIGFibGUgdG8gY2xpY2sgb24gYXJiaXRyYXJ5IHgteSBlbGVtZW50cycsIGFzeW5jICgpID0+IHtcbiAgICAgIGxldCBheElkRXh0ID0gZW52LklPUzggfHwgZW52LklPUzkgPyBcIlwiIDogXCIsIEFBUExCdXR0b25WaWV3Q29udHJvbGxlclwiO1xuICAgICAgbGV0IGVsMSA9IGF3YWl0IGRyaXZlci5maW5kRWxlbWVudCgnYWNjZXNzaWJpbGl0eSBpZCcsIGBCdXR0b25zJHtheElkRXh0fWApO1xuICAgICAgYXdhaXQgZHJpdmVyLm1vdmVUbyhlbDEsIDEwLCAxMCk7XG4gICAgICBhd2FpdCBkcml2ZXIuY2xpY2tDdXJyZW50KCk7XG4gICAgICBsZXQgZWwyID0gYXdhaXQgZHJpdmVyLmZpbmRFbGVtZW50KCd4cGF0aCcsIFwiLy9VSUFFbGVtZW50WydTWVNURU0gKENPTlRBQ1QgQUREKSddXCIpO1xuICAgICAgZWwyLnNob3VsZC5leGlzdDtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdfQ==