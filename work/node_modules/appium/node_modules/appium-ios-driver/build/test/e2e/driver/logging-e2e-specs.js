require('source-map-support').install();

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _helpersEnv = require('../helpers/env');

var _helpersEnv2 = _interopRequireDefault(_helpersEnv);

var _libUtils = require('../../../lib/utils');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _2 = require('../../..');

var _libCommandsLoggingJs = require('../../../lib/commands/logging.js');

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('commands - logging', function () {
  var _this = this;

  this.timeout(120000);
  var driver = undefined;

  before(function () {
    driver = new _2.IosDriver();
  });

  describe('getLogTypes', function () {
    it('should get the list of available logs', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            driver.getLogTypes.should.be.a.Function;
            context$3$0.next = 3;
            return _regeneratorRuntime.awrap(driver.getLogTypes());

          case 3:
            context$3$0.t0 = _lodash2['default'].keys(_libCommandsLoggingJs.SUPPORTED_LOG_TYPES);
            context$3$0.sent.should.eql(context$3$0.t0);

          case 5:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  });

  describe('getLog', function () {
    var caps = {
      app: _path2['default'].resolve(_libUtils.rootDir, 'test', 'assets', 'TestApp.zip'),
      platformName: 'iOS',
      showIOSLog: true,
      noReset: true,
      newCommandTimeout: 120
    };
    caps = _lodash2['default'].merge({}, _helpersEnv2['default'].CAPS, caps);

    describe('errors', function () {
      it('should throw an error when an invalid type is given', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          var _this2 = this;

          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              (function callee$4$0() {
                return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
                  while (1) switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      context$5$0.next = 2;
                      return _regeneratorRuntime.awrap(driver.getLog('something-random'));

                    case 2:
                      return context$5$0.abrupt('return', context$5$0.sent);

                    case 3:
                    case 'end':
                      return context$5$0.stop();
                  }
                }, null, _this2);
              }).should['throw'];

            case 1:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it('should throw an error when driver is not started', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          var _this3 = this;

          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              (function callee$4$0() {
                return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
                  while (1) switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      context$5$0.next = 2;
                      return _regeneratorRuntime.awrap(driver.getLog('syslog'));

                    case 2:
                      return context$5$0.abrupt('return', context$5$0.sent);

                    case 3:
                    case 'end':
                      return context$5$0.stop();
                  }
                }, null, _this3);
              }).should['throw'];

            case 1:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    });

    describe('success', function () {
      before(function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(driver.createSession(caps));

            case 2:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      after(function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(driver.deleteSession());

            case 2:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it('should get system logs', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(driver.getLog('syslog'));

            case 2:
              context$4$0.sent.should.be.an.Array;

            case 3:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it('should get crash logs', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(driver.getLog('crashlog'));

            case 2:
              context$4$0.sent.should.be.an.Array;

            case 3:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    });
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZTJlL2RyaXZlci9sb2dnaW5nLWUyZS1zcGVjcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OzswQkFFZ0IsZ0JBQWdCOzs7O3dCQUNSLG9CQUFvQjs7b0JBQzNCLE1BQU07Ozs7aUJBQ0csVUFBVTs7b0NBQ0Esa0NBQWtDOztvQkFDckQsTUFBTTs7Ozs4QkFDSSxrQkFBa0I7Ozs7c0JBQy9CLFFBQVE7Ozs7QUFHdEIsa0JBQUssTUFBTSxFQUFFLENBQUM7QUFDZCxrQkFBSyxHQUFHLDZCQUFnQixDQUFDOztBQUV6QixRQUFRLENBQUMsb0JBQW9CLEVBQUUsWUFBWTs7O0FBQ3pDLE1BQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDckIsTUFBSSxNQUFNLFlBQUEsQ0FBQzs7QUFFWCxRQUFNLENBQUMsWUFBTTtBQUNYLFVBQU0sR0FBRyxrQkFBZSxDQUFDO0dBQzFCLENBQUMsQ0FBQzs7QUFFSCxVQUFRLENBQUMsYUFBYSxFQUFFLFlBQU07QUFDNUIsTUFBRSxDQUFDLHVDQUF1QyxFQUFFOzs7O0FBQzFDLGtCQUFNLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQzs7NkNBQ2pDLE1BQU0sQ0FBQyxXQUFXLEVBQUU7Ozs2QkFBYSxvQkFBRSxJQUFJLDJDQUFxQjs2QkFBdEMsTUFBTSxDQUFDLEdBQUc7Ozs7Ozs7S0FDeEMsQ0FBQyxDQUFDO0dBQ0osQ0FBQyxDQUFDOztBQUVILFVBQVEsQ0FBQyxRQUFRLEVBQUUsWUFBTTtBQUN2QixRQUFJLElBQUksR0FBRztBQUNULFNBQUcsRUFBRSxrQkFBSyxPQUFPLG9CQUFVLE1BQU0sRUFBRSxRQUFRLEVBQUUsYUFBYSxDQUFDO0FBQzNELGtCQUFZLEVBQUUsS0FBSztBQUNuQixnQkFBVSxFQUFFLElBQUk7QUFDaEIsYUFBTyxFQUFFLElBQUk7QUFDYix1QkFBaUIsRUFBRSxHQUFHO0tBQ3ZCLENBQUM7QUFDRixRQUFJLEdBQUcsb0JBQUUsS0FBSyxDQUFDLEVBQUUsRUFBRSx3QkFBSSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7O0FBRW5DLFlBQVEsQ0FBQyxRQUFRLEVBQUUsWUFBTTtBQUN2QixRQUFFLENBQUMscURBQXFELEVBQUU7Ozs7OztBQUN4RCxlQUFDOzs7Ozt1REFBa0IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQzs7Ozs7Ozs7OztnQkFBQSxDQUFFLE1BQU0sU0FBTSxDQUFDOzs7Ozs7O09BQ3BFLENBQUMsQ0FBQztBQUNILFFBQUUsQ0FBQyxrREFBa0QsRUFBRTs7Ozs7O0FBQ3JELGVBQUM7Ozs7O3VEQUFrQixNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQzs7Ozs7Ozs7OztnQkFBQSxDQUFFLE1BQU0sU0FBTSxDQUFDOzs7Ozs7O09BQzFELENBQUMsQ0FBQztLQUNKLENBQUMsQ0FBQzs7QUFFSCxZQUFRLENBQUMsU0FBUyxFQUFFLFlBQU07QUFDeEIsWUFBTSxDQUFDOzs7OzsrQ0FDQyxNQUFNLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQzs7Ozs7OztPQUNqQyxDQUFDLENBQUM7QUFDSCxXQUFLLENBQUM7Ozs7OytDQUNFLE1BQU0sQ0FBQyxhQUFhLEVBQUU7Ozs7Ozs7T0FDN0IsQ0FBQyxDQUFDO0FBQ0gsUUFBRSxDQUFDLHdCQUF3QixFQUFFOzs7OzsrQ0FDcEIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUM7OzsrQkFBRSxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxLQUFLOzs7Ozs7O09BQ25ELENBQUMsQ0FBQztBQUNILFFBQUUsQ0FBQyx1QkFBdUIsRUFBRTs7Ozs7K0NBQ25CLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDOzs7K0JBQUUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsS0FBSzs7Ozs7OztPQUNyRCxDQUFDLENBQUM7S0FDSixDQUFDLENBQUM7R0FDSixDQUFDLENBQUM7Q0FDSixDQUFDLENBQUMiLCJmaWxlIjoidGVzdC9lMmUvZHJpdmVyL2xvZ2dpbmctZTJlLXNwZWNzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdHJhbnNwaWxlOm1vY2hhXG5cbmltcG9ydCBlbnYgZnJvbSAnLi4vaGVscGVycy9lbnYnO1xuaW1wb3J0IHsgcm9vdERpciB9IGZyb20gJy4uLy4uLy4uL2xpYi91dGlscyc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IElvc0RyaXZlciB9IGZyb20gJy4uLy4uLy4uJztcbmltcG9ydCB7IFNVUFBPUlRFRF9MT0dfVFlQRVMgfSBmcm9tICcuLi8uLi8uLi9saWIvY29tbWFuZHMvbG9nZ2luZy5qcyc7XG5pbXBvcnQgY2hhaSBmcm9tICdjaGFpJztcbmltcG9ydCBjaGFpQXNQcm9taXNlZCBmcm9tICdjaGFpLWFzLXByb21pc2VkJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5cblxuY2hhaS5zaG91bGQoKTtcbmNoYWkudXNlKGNoYWlBc1Byb21pc2VkKTtcblxuZGVzY3JpYmUoJ2NvbW1hbmRzIC0gbG9nZ2luZycsIGZ1bmN0aW9uICgpIHtcbiAgdGhpcy50aW1lb3V0KDEyMDAwMCk7XG4gIGxldCBkcml2ZXI7XG5cbiAgYmVmb3JlKCgpID0+IHtcbiAgICBkcml2ZXIgPSBuZXcgSW9zRHJpdmVyKCk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdnZXRMb2dUeXBlcycsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGdldCB0aGUgbGlzdCBvZiBhdmFpbGFibGUgbG9ncycsIGFzeW5jICgpID0+IHtcbiAgICAgIGRyaXZlci5nZXRMb2dUeXBlcy5zaG91bGQuYmUuYS5GdW5jdGlvbjtcbiAgICAgIChhd2FpdCBkcml2ZXIuZ2V0TG9nVHlwZXMoKSkuc2hvdWxkLmVxbChfLmtleXMoU1VQUE9SVEVEX0xPR19UWVBFUykpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnZ2V0TG9nJywgKCkgPT4ge1xuICAgIGxldCBjYXBzID0ge1xuICAgICAgYXBwOiBwYXRoLnJlc29sdmUocm9vdERpciwgJ3Rlc3QnLCAnYXNzZXRzJywgJ1Rlc3RBcHAuemlwJyksXG4gICAgICBwbGF0Zm9ybU5hbWU6ICdpT1MnLFxuICAgICAgc2hvd0lPU0xvZzogdHJ1ZSxcbiAgICAgIG5vUmVzZXQ6IHRydWUsXG4gICAgICBuZXdDb21tYW5kVGltZW91dDogMTIwXG4gICAgfTtcbiAgICBjYXBzID0gXy5tZXJnZSh7fSwgZW52LkNBUFMsIGNhcHMpO1xuXG4gICAgZGVzY3JpYmUoJ2Vycm9ycycsICgpID0+IHtcbiAgICAgIGl0KCdzaG91bGQgdGhyb3cgYW4gZXJyb3Igd2hlbiBhbiBpbnZhbGlkIHR5cGUgaXMgZ2l2ZW4nLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIChhc3luYyAoKSA9PiBhd2FpdCBkcml2ZXIuZ2V0TG9nKCdzb21ldGhpbmctcmFuZG9tJykpLnNob3VsZC50aHJvdztcbiAgICAgIH0pO1xuICAgICAgaXQoJ3Nob3VsZCB0aHJvdyBhbiBlcnJvciB3aGVuIGRyaXZlciBpcyBub3Qgc3RhcnRlZCcsIGFzeW5jICgpID0+IHtcbiAgICAgICAgKGFzeW5jICgpID0+IGF3YWl0IGRyaXZlci5nZXRMb2coJ3N5c2xvZycpKS5zaG91bGQudGhyb3c7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdzdWNjZXNzJywgKCkgPT4ge1xuICAgICAgYmVmb3JlKGFzeW5jICgpID0+IHtcbiAgICAgICAgYXdhaXQgZHJpdmVyLmNyZWF0ZVNlc3Npb24oY2Fwcyk7XG4gICAgICB9KTtcbiAgICAgIGFmdGVyKGFzeW5jICgpID0+IHtcbiAgICAgICAgYXdhaXQgZHJpdmVyLmRlbGV0ZVNlc3Npb24oKTtcbiAgICAgIH0pO1xuICAgICAgaXQoJ3Nob3VsZCBnZXQgc3lzdGVtIGxvZ3MnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIChhd2FpdCBkcml2ZXIuZ2V0TG9nKCdzeXNsb2cnKSkuc2hvdWxkLmJlLmFuLkFycmF5O1xuICAgICAgfSk7XG4gICAgICBpdCgnc2hvdWxkIGdldCBjcmFzaCBsb2dzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICAoYXdhaXQgZHJpdmVyLmdldExvZygnY3Jhc2hsb2cnKSkuc2hvdWxkLmJlLmFuLkFycmF5O1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXX0=