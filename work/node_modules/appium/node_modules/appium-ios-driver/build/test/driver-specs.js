require('source-map-support').install();

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

var _this = this;

var _ = require('../');

var _2 = _interopRequireDefault(_);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _appiumTestSupport = require('appium-test-support');

var _teen_process = require('teen_process');

var teen_process = _interopRequireWildcard(_teen_process);

var _appiumSupport = require('appium-support');

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('driver', function () {
  it('should instantiate class', function () {
    var driver = new _2['default']();
    driver.should.exist;
  });
});

describe('getDeviceTime', (0, _appiumTestSupport.withMocks)({ fs: _appiumSupport.fs, teen_process: teen_process }, function (mocks) {
  it('should call idevicedate on real device', function callee$1$0() {
    var udid, date, idevicedatePath, driver;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          udid = 'some-udid';
          date = new Date().toString();
          idevicedatePath = '/path/to/idevicedate';

          mocks.fs.expects('which').once().returns(idevicedatePath);
          mocks.teen_process.expects('exec').once().withExactArgs(idevicedatePath, ['-u', udid]).returns({ stdout: date });
          driver = new _2['default']();

          driver.opts = { udid: udid };

          context$2$0.next = 9;
          return _regeneratorRuntime.awrap(driver.getDeviceTime());

        case 9:
          context$2$0.t0 = date;
          context$2$0.sent.should.equal(context$2$0.t0);

          mocks.fs.verify();
          mocks.teen_process.verify();

        case 13:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should throw an error when idevicedate cannot be found', function callee$1$0() {
    var udid, driver;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          udid = 'some-udid';

          mocks.fs.expects('which').once().throws();
          driver = new _2['default']();

          driver.opts = { udid: udid };
          context$2$0.next = 6;
          return _regeneratorRuntime.awrap(driver.getDeviceTime().should.eventually.be.rejectedWith("Could not capture device date and time"));

        case 6:

          mocks.fs.verify();

        case 7:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should throw an error when idevicedate fails', function callee$1$0() {
    var udid, idevicedatePath, driver;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          udid = 'some-udid';
          idevicedatePath = '/path/to/idevicedate';

          mocks.fs.expects('which').once().returns(idevicedatePath);
          mocks.teen_process.expects("exec").once().withExactArgs(idevicedatePath, ['-u', udid]).throws("ENOENT");
          driver = new _2['default']();

          driver.opts = { udid: udid };
          context$2$0.next = 8;
          return _regeneratorRuntime.awrap(driver.getDeviceTime().should.eventually.be.rejectedWith("Could not capture device date and time"));

        case 8:

          mocks.fs.verify();
          mocks.teen_process.verify();

        case 10:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should return system date on simulator', function callee$1$0() {
    var driver;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          mocks.teen_process.expects("exec").never();
          driver = new _2['default']();
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(driver.getDeviceTime());

        case 4:
          context$2$0.t0 = context$2$0.sent.should.be.an;
          context$2$0.t1 = String;
          context$2$0.t0 instanceof context$2$0.t1;

          mocks.teen_process.verify();

        case 8:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
}));
//# sourceMappingURL=data:application/json;base64,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L0IsSUFBSSxFQUFFLENBQUMsYUFBYSxDQUFDLGVBQWUsRUFBRSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUNuRCxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDaEIsZ0JBQU0sR0FBRyxtQkFBZTs7QUFDNUIsZ0JBQU0sQ0FBQyxJQUFJLEdBQUcsRUFBQyxJQUFJLEVBQUosSUFBSSxFQUFDLENBQUM7OzJDQUNmLE1BQU0sQ0FBQyxhQUFhLEVBQUUsQ0FDekIsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLHdDQUF3QyxDQUFDOzs7O0FBRTlFLGVBQUssQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUM7QUFDbEIsZUFBSyxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsQ0FBQzs7Ozs7OztHQUM3QixDQUFDLENBQUM7O0FBRUgsSUFBRSxDQUFDLHdDQUF3QyxFQUFFO1FBR3ZDLE1BQU07Ozs7QUFGVixlQUFLLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FDL0IsS0FBSyxFQUFFLENBQUM7QUFDUCxnQkFBTSxHQUFHLG1CQUFlOzsyQ0FDckIsTUFBTSxDQUFDLGFBQWEsRUFBRTs7OzRDQUFFLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRTsyQkFBWSxNQUFNOzs7QUFFN0QsZUFBSyxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsQ0FBQzs7Ozs7OztHQUM3QixDQUFDLENBQUM7Q0FDSixDQUFDLENBQUMsQ0FBQyIsImZpbGUiOiJ0ZXN0L2RyaXZlci1zcGVjcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRyYW5zcGlsZTptb2NoYVxuXG5pbXBvcnQgSW9zRHJpdmVyIGZyb20gJy4uLyc7XG5pbXBvcnQgY2hhaSBmcm9tICdjaGFpJztcbmltcG9ydCBjaGFpQXNQcm9taXNlZCBmcm9tICdjaGFpLWFzLXByb21pc2VkJztcbmltcG9ydCB7IHdpdGhNb2NrcyB9IGZyb20gJ2FwcGl1bS10ZXN0LXN1cHBvcnQnO1xuaW1wb3J0ICogYXMgdGVlbl9wcm9jZXNzIGZyb20gJ3RlZW5fcHJvY2Vzcyc7XG5pbXBvcnQgeyBmcyB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcblxuY2hhaS5zaG91bGQoKTtcbmNoYWkudXNlKGNoYWlBc1Byb21pc2VkKTtcblxuZGVzY3JpYmUoJ2RyaXZlcicsICgpID0+IHtcbiAgaXQoJ3Nob3VsZCBpbnN0YW50aWF0ZSBjbGFzcycsICgpID0+IHtcbiAgICBsZXQgZHJpdmVyID0gbmV3IElvc0RyaXZlcigpO1xuICAgIGRyaXZlci5zaG91bGQuZXhpc3Q7XG4gIH0pO1xufSk7XG5cbmRlc2NyaWJlKCdnZXREZXZpY2VUaW1lJywgd2l0aE1vY2tzKHtmcywgdGVlbl9wcm9jZXNzfSwgKG1vY2tzKSA9PiB7XG4gIGl0KCdzaG91bGQgY2FsbCBpZGV2aWNlZGF0ZSBvbiByZWFsIGRldmljZScsIGFzeW5jICgpID0+IHtcbiAgICBsZXQgdWRpZCA9ICdzb21lLXVkaWQnO1xuICAgIGxldCBkYXRlID0gbmV3IERhdGUoKS50b1N0cmluZygpO1xuICAgIGxldCBpZGV2aWNlZGF0ZVBhdGggPSAnL3BhdGgvdG8vaWRldmljZWRhdGUnO1xuICAgIG1vY2tzLmZzLmV4cGVjdHMoJ3doaWNoJylcbiAgICAgIC5vbmNlKCkucmV0dXJucyhpZGV2aWNlZGF0ZVBhdGgpO1xuICAgIG1vY2tzLnRlZW5fcHJvY2Vzcy5leHBlY3RzKCdleGVjJylcbiAgICAgIC5vbmNlKCkud2l0aEV4YWN0QXJncyhpZGV2aWNlZGF0ZVBhdGgsIFsnLXUnLCB1ZGlkXSlcbiAgICAgIC5yZXR1cm5zKHtzdGRvdXQ6IGRhdGV9KTtcbiAgICBsZXQgZHJpdmVyID0gbmV3IElvc0RyaXZlcigpO1xuICAgIGRyaXZlci5vcHRzID0ge3VkaWR9O1xuXG4gICAgKGF3YWl0IGRyaXZlci5nZXREZXZpY2VUaW1lKCkpLnNob3VsZC5lcXVhbChkYXRlKTtcblxuICAgIG1vY2tzLmZzLnZlcmlmeSgpO1xuICAgIG1vY2tzLnRlZW5fcHJvY2Vzcy52ZXJpZnkoKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCB0aHJvdyBhbiBlcnJvciB3aGVuIGlkZXZpY2VkYXRlIGNhbm5vdCBiZSBmb3VuZCcsIGFzeW5jICgpID0+IHtcbiAgICBsZXQgdWRpZCA9ICdzb21lLXVkaWQnO1xuICAgIG1vY2tzLmZzLmV4cGVjdHMoJ3doaWNoJylcbiAgICAgIC5vbmNlKCkudGhyb3dzKCk7XG4gICAgbGV0IGRyaXZlciA9IG5ldyBJb3NEcml2ZXIoKTtcbiAgICBkcml2ZXIub3B0cyA9IHt1ZGlkfTtcbiAgICBhd2FpdCBkcml2ZXIuZ2V0RGV2aWNlVGltZSgpXG4gICAgICAuc2hvdWxkLmV2ZW50dWFsbHkuYmUucmVqZWN0ZWRXaXRoKFwiQ291bGQgbm90IGNhcHR1cmUgZGV2aWNlIGRhdGUgYW5kIHRpbWVcIik7XG5cbiAgICBtb2Nrcy5mcy52ZXJpZnkoKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCB0aHJvdyBhbiBlcnJvciB3aGVuIGlkZXZpY2VkYXRlIGZhaWxzJywgYXN5bmMgKCkgPT4ge1xuICAgIGxldCB1ZGlkID0gJ3NvbWUtdWRpZCc7XG4gICAgbGV0IGlkZXZpY2VkYXRlUGF0aCA9ICcvcGF0aC90by9pZGV2aWNlZGF0ZSc7XG4gICAgbW9ja3MuZnMuZXhwZWN0cygnd2hpY2gnKVxuICAgICAgLm9uY2UoKS5yZXR1cm5zKGlkZXZpY2VkYXRlUGF0aCk7XG4gICAgbW9ja3MudGVlbl9wcm9jZXNzLmV4cGVjdHMoXCJleGVjXCIpXG4gICAgICAub25jZSgpLndpdGhFeGFjdEFyZ3MoaWRldmljZWRhdGVQYXRoLCBbJy11JywgdWRpZF0pXG4gICAgICAudGhyb3dzKFwiRU5PRU5UXCIpO1xuICAgIGxldCBkcml2ZXIgPSBuZXcgSW9zRHJpdmVyKCk7XG4gICAgZHJpdmVyLm9wdHMgPSB7dWRpZH07XG4gICAgYXdhaXQgZHJpdmVyLmdldERldmljZVRpbWUoKVxuICAgICAgLnNob3VsZC5ldmVudHVhbGx5LmJlLnJlamVjdGVkV2l0aChcIkNvdWxkIG5vdCBjYXB0dXJlIGRldmljZSBkYXRlIGFuZCB0aW1lXCIpO1xuXG4gICAgbW9ja3MuZnMudmVyaWZ5KCk7XG4gICAgbW9ja3MudGVlbl9wcm9jZXNzLnZlcmlmeSgpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHJldHVybiBzeXN0ZW0gZGF0ZSBvbiBzaW11bGF0b3InLCBhc3luYyAoKSA9PiB7XG4gICAgbW9ja3MudGVlbl9wcm9jZXNzLmV4cGVjdHMoXCJleGVjXCIpXG4gICAgICAubmV2ZXIoKTtcbiAgICBsZXQgZHJpdmVyID0gbmV3IElvc0RyaXZlcigpO1xuICAgIChhd2FpdCBkcml2ZXIuZ2V0RGV2aWNlVGltZSgpKS5zaG91bGQuYmUuYW4gaW5zdGFuY2VvZihTdHJpbmcpO1xuXG4gICAgbW9ja3MudGVlbl9wcm9jZXNzLnZlcmlmeSgpO1xuICB9KTtcbn0pKTtcbiJdfQ==