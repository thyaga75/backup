'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

var _ = require('../');

var _libUtils = require('../lib/utils');

var _libUtils2 = _interopRequireDefault(_libUtils);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var sandbox = _sinon2['default'].sandbox.create();
var should = _chai2['default'].Should();

describe('Desired Capabilities', function () {
  var driver = undefined;
  before(function () {
    driver = new _.IosDriver();
  });

  function checkCaps(caps) {
    var throws = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

    if (throws) {
      should.Throw(function () {
        driver.validateDesiredCaps(caps);
      });
    } else {
      should.not.Throw(function () {
        driver.validateDesiredCaps(caps);
      });
    }
  }

  describe('app and bundleId', function () {
    it('should throw error if neither app nor bundleId are present', function () {
      var caps = {
        platformName: 'iOS',
        deviceName: 'iPhone 5'
      };
      checkCaps(caps, true);
    });
    it('should accept an app', function () {
      var caps = {
        platformName: 'iOS',
        deviceName: 'iPhone 5',
        app: 'some-app'
      };
      checkCaps(caps);
    });
    it('should accept a bundleId', function () {
      var caps = {
        platformName: 'iOS',
        deviceName: 'iPhone 5',
        bundleId: 'com.some-company.some-app'
      };
      checkCaps(caps);
    });
  });

  describe('launchTimeout', function () {
    it('should accept a number', function () {
      var caps = {
        platformName: 'iOS',
        deviceName: 'iPhone 5',
        app: 'some-app',
        launchTimeout: 1
      };
      checkCaps(caps);
    });
    it('should accept an object', function () {
      var caps = {
        platformName: 'iOS',
        deviceName: 'iPhone 5',
        app: 'some-app',
        launchTimeout: {
          global: 1
        }
      };
      checkCaps(caps);
    });
    it('should accept a stringified object', function () {
      var caps = {
        platformName: 'iOS',
        deviceName: 'iPhone 5',
        app: 'some-app',
        launchTimeout: JSON.stringify({
          global: 1
        })
      };
      checkCaps(caps);
    });
    it('should fail for non-JSON string', function () {
      var caps = {
        platformName: 'iOS',
        deviceName: 'iPhone 5',
        app: 'some-app',
        launchTimeout: 'launch timeout!'
      };
      checkCaps(caps, true);
    });
  });

  describe('server capabilities', function () {
    it('should collect server capabilities', function callee$2$0() {
      var caps;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            sandbox.stub(driver, 'configureApp');
            sandbox.stub(driver, 'validateDesiredCaps');
            sandbox.stub(driver, 'start');
            sandbox.stub(driver, 'startNewCommandTimeout');
            sandbox.stub(_libUtils2['default'], 'detectUdid');
            sandbox.stub(_libUtils2['default'], 'prepareIosOpts');
            caps = {
              platformName: 'iOS',
              deviceName: 'iPhone 5',
              app: 'some-app'
            };
            context$3$0.next = 9;
            return _regeneratorRuntime.awrap(driver.createSession(caps));

          case 9:
            driver.caps.takesScreenshot.should.exist;
            sandbox.restore();

          case 11:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
  });
});
//# sourceMappingURL=data:application/json;base64,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OztLQUNuQixDQUFDLENBQUM7R0FDSixDQUFDLENBQUM7Q0FDSixDQUFDLENBQUMiLCJmaWxlIjoidGVzdC9jYXBhYmlsaXR5LXNwZWNzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW9zRHJpdmVyIH0gZnJvbSAnLi4vJztcbmltcG9ydCB1dGlscyBmcm9tICcuLi9saWIvdXRpbHMnO1xuaW1wb3J0IGNoYWkgZnJvbSAnY2hhaSc7XG5pbXBvcnQgc2lub24gZnJvbSAnc2lub24nO1xuXG5sZXQgc2FuZGJveCA9IHNpbm9uLnNhbmRib3guY3JlYXRlKCk7XG5jb25zdCBzaG91bGQgPSBjaGFpLlNob3VsZCgpO1xuXG5kZXNjcmliZSgnRGVzaXJlZCBDYXBhYmlsaXRpZXMnLCAoKSA9PiB7XG4gIGxldCBkcml2ZXI7XG4gIGJlZm9yZSgoKSA9PiB7XG4gICAgZHJpdmVyID0gbmV3IElvc0RyaXZlcigpO1xuICB9KTtcblxuICBmdW5jdGlvbiBjaGVja0NhcHMgKGNhcHMsIHRocm93cyA9IGZhbHNlKSB7XG4gICAgaWYgKHRocm93cykge1xuICAgICAgc2hvdWxkLlRocm93KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZHJpdmVyLnZhbGlkYXRlRGVzaXJlZENhcHMoY2Fwcyk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2hvdWxkLm5vdC5UaHJvdyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGRyaXZlci52YWxpZGF0ZURlc2lyZWRDYXBzKGNhcHMpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZGVzY3JpYmUoJ2FwcCBhbmQgYnVuZGxlSWQnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCB0aHJvdyBlcnJvciBpZiBuZWl0aGVyIGFwcCBub3IgYnVuZGxlSWQgYXJlIHByZXNlbnQnLCAoKSA9PiB7XG4gICAgICBsZXQgY2FwcyA9IHtcbiAgICAgICAgcGxhdGZvcm1OYW1lOiAnaU9TJyxcbiAgICAgICAgZGV2aWNlTmFtZTogJ2lQaG9uZSA1J1xuICAgICAgfTtcbiAgICAgIGNoZWNrQ2FwcyhjYXBzLCB0cnVlKTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIGFjY2VwdCBhbiBhcHAnLCAoKSA9PiB7XG4gICAgICBsZXQgY2FwcyA9IHtcbiAgICAgICAgcGxhdGZvcm1OYW1lOiAnaU9TJyxcbiAgICAgICAgZGV2aWNlTmFtZTogJ2lQaG9uZSA1JyxcbiAgICAgICAgYXBwOiAnc29tZS1hcHAnXG4gICAgICB9O1xuICAgICAgY2hlY2tDYXBzKGNhcHMpO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgYWNjZXB0IGEgYnVuZGxlSWQnLCAoKSA9PiB7XG4gICAgICBsZXQgY2FwcyA9IHtcbiAgICAgICAgcGxhdGZvcm1OYW1lOiAnaU9TJyxcbiAgICAgICAgZGV2aWNlTmFtZTogJ2lQaG9uZSA1JyxcbiAgICAgICAgYnVuZGxlSWQ6ICdjb20uc29tZS1jb21wYW55LnNvbWUtYXBwJ1xuICAgICAgfTtcbiAgICAgIGNoZWNrQ2FwcyhjYXBzKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2xhdW5jaFRpbWVvdXQnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBhY2NlcHQgYSBudW1iZXInLCAoKSA9PiB7XG4gICAgICBsZXQgY2FwcyA9IHtcbiAgICAgICAgcGxhdGZvcm1OYW1lOiAnaU9TJyxcbiAgICAgICAgZGV2aWNlTmFtZTogJ2lQaG9uZSA1JyxcbiAgICAgICAgYXBwOiAnc29tZS1hcHAnLFxuICAgICAgICBsYXVuY2hUaW1lb3V0OiAxXG4gICAgICB9O1xuICAgICAgY2hlY2tDYXBzKGNhcHMpO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgYWNjZXB0IGFuIG9iamVjdCcsICgpID0+IHtcbiAgICAgIGxldCBjYXBzID0ge1xuICAgICAgICBwbGF0Zm9ybU5hbWU6ICdpT1MnLFxuICAgICAgICBkZXZpY2VOYW1lOiAnaVBob25lIDUnLFxuICAgICAgICBhcHA6ICdzb21lLWFwcCcsXG4gICAgICAgIGxhdW5jaFRpbWVvdXQ6IHtcbiAgICAgICAgICBnbG9iYWw6IDFcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGNoZWNrQ2FwcyhjYXBzKTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIGFjY2VwdCBhIHN0cmluZ2lmaWVkIG9iamVjdCcsICgpID0+IHtcbiAgICAgIGxldCBjYXBzID0ge1xuICAgICAgICBwbGF0Zm9ybU5hbWU6ICdpT1MnLFxuICAgICAgICBkZXZpY2VOYW1lOiAnaVBob25lIDUnLFxuICAgICAgICBhcHA6ICdzb21lLWFwcCcsXG4gICAgICAgIGxhdW5jaFRpbWVvdXQ6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICBnbG9iYWw6IDFcbiAgICAgICAgfSlcbiAgICAgIH07XG4gICAgICBjaGVja0NhcHMoY2Fwcyk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCBmYWlsIGZvciBub24tSlNPTiBzdHJpbmcnLCAoKSA9PiB7XG4gICAgICBsZXQgY2FwcyA9IHtcbiAgICAgICAgcGxhdGZvcm1OYW1lOiAnaU9TJyxcbiAgICAgICAgZGV2aWNlTmFtZTogJ2lQaG9uZSA1JyxcbiAgICAgICAgYXBwOiAnc29tZS1hcHAnLFxuICAgICAgICBsYXVuY2hUaW1lb3V0OiAnbGF1bmNoIHRpbWVvdXQhJ1xuICAgICAgfTtcbiAgICAgIGNoZWNrQ2FwcyhjYXBzLCB0cnVlKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3NlcnZlciBjYXBhYmlsaXRpZXMnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBjb2xsZWN0IHNlcnZlciBjYXBhYmlsaXRpZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBzYW5kYm94LnN0dWIoZHJpdmVyLCAnY29uZmlndXJlQXBwJyk7XG4gICAgICBzYW5kYm94LnN0dWIoZHJpdmVyLCAndmFsaWRhdGVEZXNpcmVkQ2FwcycpO1xuICAgICAgc2FuZGJveC5zdHViKGRyaXZlciwgJ3N0YXJ0Jyk7XG4gICAgICBzYW5kYm94LnN0dWIoZHJpdmVyLCAnc3RhcnROZXdDb21tYW5kVGltZW91dCcpO1xuICAgICAgc2FuZGJveC5zdHViKHV0aWxzLCAnZGV0ZWN0VWRpZCcpO1xuICAgICAgc2FuZGJveC5zdHViKHV0aWxzLCAncHJlcGFyZUlvc09wdHMnKTtcbiAgICAgIGxldCBjYXBzID0ge1xuICAgICAgICBwbGF0Zm9ybU5hbWU6ICdpT1MnLFxuICAgICAgICBkZXZpY2VOYW1lOiAnaVBob25lIDUnLFxuICAgICAgICBhcHA6ICdzb21lLWFwcCdcbiAgICAgIH07XG4gICAgICBhd2FpdCBkcml2ZXIuY3JlYXRlU2Vzc2lvbihjYXBzKTtcbiAgICAgIGRyaXZlci5jYXBzLnRha2VzU2NyZWVuc2hvdC5zaG91bGQuZXhpc3Q7XG4gICAgICBzYW5kYm94LnJlc3RvcmUoKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdfQ==