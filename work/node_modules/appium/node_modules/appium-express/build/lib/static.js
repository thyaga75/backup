'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _appiumSupport = require('appium-support');

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var STATIC_DIR = _path2['default'].resolve(__dirname, '..', '..', 'static');
if (_lodash2['default'].isNull(_path2['default'].resolve(__dirname).match(/build[\/\\]lib$/))) {
  // in some contexts we are not in the build directory,
  // so we don't want to go back the extra level
  exports.STATIC_DIR = STATIC_DIR = _path2['default'].resolve(__dirname, '..', 'static');
}

/*
 * Dynamic page mapped to /test/guinea-pig
 */
function guineaPig(req, res) {
  var delay, params;
  return _regeneratorRuntime.async(function guineaPig$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        delay = req.params.delay ? parseInt(req.params.delay, 10) : 0;
        params = {
          serverTime: parseInt(Date.now() / 1000, 10),
          userAgent: req.headers['user-agent'],
          comment: 'None'
        };

        if (req.method === 'POST') {
          params.comment = req.body.comments || params.comment;
        }
        _logger2['default'].debug('Sending guinea pig response with params: ' + JSON.stringify(params));
        context$1$0.next = 6;
        return _regeneratorRuntime.awrap(_bluebird2['default'].delay(delay));

      case 6:
        res.set('Content-Type', 'text/html');
        res.cookie('guineacookie1', 'i am a cookie value', { path: '/' });
        res.cookie('guineacookie2', 'cooki√©2', { path: '/' });
        res.cookie('guineacookie3', 'cant access this', {
          domain: '.blargimarg.com',
          path: '/'
        });
        context$1$0.t0 = res;
        context$1$0.next = 13;
        return _regeneratorRuntime.awrap(getTemplate('guinea-pig.html'));

      case 13:
        context$1$0.t1 = params;
        context$1$0.t2 = (0, context$1$0.sent)(context$1$0.t1);
        context$1$0.t0.send.call(context$1$0.t0, context$1$0.t2);

      case 16:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

/*
 * Dynamic page mapped to /welcome
 */
function welcome(req, res) {
  var params;
  return _regeneratorRuntime.async(function welcome$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        params = { message: 'Let\'s browse!' };

        _logger2['default'].debug('Sending welcome response with params: ' + JSON.stringify(params));
        context$1$0.t0 = res;
        context$1$0.next = 5;
        return _regeneratorRuntime.awrap(getTemplate('welcome.html'));

      case 5:
        context$1$0.t1 = params;
        context$1$0.t2 = (0, context$1$0.sent)(context$1$0.t1);
        context$1$0.t0.send.call(context$1$0.t0, context$1$0.t2);

      case 8:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function getTemplate(templateName) {
  var content;
  return _regeneratorRuntime.async(function getTemplate$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        context$1$0.next = 2;
        return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(_path2['default'].resolve(STATIC_DIR, 'test', templateName)));

      case 2:
        content = context$1$0.sent;
        return context$1$0.abrupt('return', _lodash2['default'].template(content.toString()));

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

exports.guineaPig = guineaPig;
exports.welcome = welcome;
exports.STATIC_DIR = STATIC_DIR;
//# sourceMappingURL=data:application/json;base64,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QVQsU0FBUztRQUFFLE9BQU8sR0FBUCxPQUFPO1FBQUUsVUFBVSxHQUFWLFVBQVUiLCJmaWxlIjoibGliL3N0YXRpYy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IGxvZyBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgZnMgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgQiBmcm9tICdibHVlYmlyZCc7XG5cblxubGV0IFNUQVRJQ19ESVIgPSBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLi4nLCAnLi4nLCAnc3RhdGljJyk7XG5pZiAoXy5pc051bGwocGF0aC5yZXNvbHZlKF9fZGlybmFtZSkubWF0Y2goL2J1aWxkW1xcL1xcXFxdbGliJC8pKSkge1xuICAvLyBpbiBzb21lIGNvbnRleHRzIHdlIGFyZSBub3QgaW4gdGhlIGJ1aWxkIGRpcmVjdG9yeSxcbiAgLy8gc28gd2UgZG9uJ3Qgd2FudCB0byBnbyBiYWNrIHRoZSBleHRyYSBsZXZlbFxuICBTVEFUSUNfRElSID0gcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4uJywgJ3N0YXRpYycpO1xufVxuXG4vKlxuICogRHluYW1pYyBwYWdlIG1hcHBlZCB0byAvdGVzdC9ndWluZWEtcGlnXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGd1aW5lYVBpZyAocmVxLCByZXMpIHtcbiAgbGV0IGRlbGF5ID0gcmVxLnBhcmFtcy5kZWxheSA/IHBhcnNlSW50KHJlcS5wYXJhbXMuZGVsYXksIDEwKSA6IDA7XG4gIGxldCBwYXJhbXMgPSB7XG4gICAgc2VydmVyVGltZTogcGFyc2VJbnQoRGF0ZS5ub3coKSAvIDEwMDAsIDEwKSxcbiAgICB1c2VyQWdlbnQ6IHJlcS5oZWFkZXJzWyd1c2VyLWFnZW50J10sXG4gICAgY29tbWVudDogJ05vbmUnXG4gIH07XG4gIGlmIChyZXEubWV0aG9kID09PSAnUE9TVCcpIHtcbiAgICBwYXJhbXMuY29tbWVudCA9IHJlcS5ib2R5LmNvbW1lbnRzIHx8IHBhcmFtcy5jb21tZW50O1xuICB9XG4gIGxvZy5kZWJ1ZyhgU2VuZGluZyBndWluZWEgcGlnIHJlc3BvbnNlIHdpdGggcGFyYW1zOiAke0pTT04uc3RyaW5naWZ5KHBhcmFtcyl9YCk7XG4gIGF3YWl0IEIuZGVsYXkoZGVsYXkpO1xuICByZXMuc2V0KCdDb250ZW50LVR5cGUnLCAndGV4dC9odG1sJyk7XG4gIHJlcy5jb29raWUoJ2d1aW5lYWNvb2tpZTEnLCAnaSBhbSBhIGNvb2tpZSB2YWx1ZScsIHtwYXRoOiAnLyd9KTtcbiAgcmVzLmNvb2tpZSgnZ3VpbmVhY29va2llMicsICdjb29racOpMicsIHtwYXRoOiAnLyd9KTtcbiAgcmVzLmNvb2tpZSgnZ3VpbmVhY29va2llMycsICdjYW50IGFjY2VzcyB0aGlzJywge1xuICAgIGRvbWFpbjogJy5ibGFyZ2ltYXJnLmNvbScsXG4gICAgcGF0aDogJy8nXG4gIH0pO1xuICByZXMuc2VuZCgoYXdhaXQgZ2V0VGVtcGxhdGUoJ2d1aW5lYS1waWcuaHRtbCcpKShwYXJhbXMpKTtcbn1cblxuLypcbiAqIER5bmFtaWMgcGFnZSBtYXBwZWQgdG8gL3dlbGNvbWVcbiAqL1xuYXN5bmMgZnVuY3Rpb24gd2VsY29tZSAocmVxLCByZXMpIHtcbiAgbGV0IHBhcmFtcyA9IHttZXNzYWdlOiAnTGV0XFwncyBicm93c2UhJ307XG4gIGxvZy5kZWJ1ZyhgU2VuZGluZyB3ZWxjb21lIHJlc3BvbnNlIHdpdGggcGFyYW1zOiAke0pTT04uc3RyaW5naWZ5KHBhcmFtcyl9YCk7XG4gIHJlcy5zZW5kKChhd2FpdCBnZXRUZW1wbGF0ZSgnd2VsY29tZS5odG1sJykpKHBhcmFtcykpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRUZW1wbGF0ZSAodGVtcGxhdGVOYW1lKSB7XG4gIGxldCBjb250ZW50ID0gYXdhaXQgZnMucmVhZEZpbGUocGF0aC5yZXNvbHZlKFNUQVRJQ19ESVIsICd0ZXN0JywgdGVtcGxhdGVOYW1lKSk7XG4gIHJldHVybiBfLnRlbXBsYXRlKGNvbnRlbnQudG9TdHJpbmcoKSk7XG59XG5cbmV4cG9ydCB7IGd1aW5lYVBpZywgd2VsY29tZSwgU1RBVElDX0RJUiB9O1xuIl19