'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

require('colors');

var _morgan = require('morgan');

var _morgan2 = _interopRequireDefault(_morgan);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

// Copied the morgan compile function over so that cooler formats
// may be configured
function compile(fmt) {
  // escape quotes
  fmt = fmt.replace(/"/g, '\\"');
  fmt = fmt.replace(/:([-\w]{2,})(?:\[([^\]]+)\])?/g, function (_, name, arg) {
    return '"\n    + (tokens["' + name + '"](req, res, "' + arg + '") || "-") + "';
  });
  var js = '  return "' + fmt + '";';
  // jshint evil:true
  return new Function('tokens, req, res', js);
}

function requestEndLoggingFormat(tokens, req, res) {
  var status = res.statusCode;
  var statusStr = ':status';
  if (status >= 500) {
    statusStr = statusStr.red;
  } else if (status >= 400) {
    statusStr = statusStr.yellow;
  } else if (status >= 300) {
    statusStr = statusStr.cyan;
  } else {
    statusStr = statusStr.green;
  }
  var fn = compile('' + '<-- :method :url '.white + statusStr + ' ' + ':response-time ms - :res[content-length]'.grey);
  return fn(tokens, req, res);
}

var endLogFormatter = (0, _morgan2['default'])(function (tokens, req, res) {
  _logger2['default'].info(requestEndLoggingFormat(tokens, req, res), (res.jsonResp || '').grey);
});

var requestStartLoggingFormat = compile('-->'.white + ' ' + ':method'.white + ' ' + ':url'.white);

var startLogFormatter = (0, _morgan2['default'])(function (tokens, req, res) {
  // morgan output is redirected straight to winston
  var data = '';
  try {
    if (req.body) {
      data = JSON.stringify(req.body).substring(0, 1000);
    }
  } catch (ign) {}
  _logger2['default'].info(requestStartLoggingFormat(tokens, req, res), data.grey);
}, { immediate: true });

exports.endLogFormatter = endLogFormatter;
exports.startLogFormatter = startLogFormatter;
//# sourceMappingURL=data:application/json;base64,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dCAnY29sb3JzJztcbmltcG9ydCBtb3JnYW4gZnJvbSAnbW9yZ2FuJztcbmltcG9ydCBsb2cgZnJvbSAnLi9sb2dnZXInO1xuXG5cbi8vIENvcGllZCB0aGUgbW9yZ2FuIGNvbXBpbGUgZnVuY3Rpb24gb3ZlciBzbyB0aGF0IGNvb2xlciBmb3JtYXRzXG4vLyBtYXkgYmUgY29uZmlndXJlZFxuZnVuY3Rpb24gY29tcGlsZSAoZm10KSB7XG4gIC8vIGVzY2FwZSBxdW90ZXNcbiAgZm10ID0gZm10LnJlcGxhY2UoL1wiL2csICdcXFxcXCInKTtcbiAgZm10ID0gZm10LnJlcGxhY2UoLzooWy1cXHddezIsfSkoPzpcXFsoW15cXF1dKylcXF0pPy9nLFxuICAgIGZ1bmN0aW9uIChfLCBuYW1lLCBhcmcpIHtcbiAgICAgIHJldHVybiBgXCJcXG4gICAgKyAodG9rZW5zW1wiJHtuYW1lfVwiXShyZXEsIHJlcywgXCIke2FyZ31cIikgfHwgXCItXCIpICsgXCJgO1xuICAgIH0pO1xuICBsZXQganMgPSBgICByZXR1cm4gXCIke2ZtdH1cIjtgO1xuICAvLyBqc2hpbnQgZXZpbDp0cnVlXG4gIHJldHVybiBuZXcgRnVuY3Rpb24oJ3Rva2VucywgcmVxLCByZXMnLCBqcyk7XG59XG5cbmZ1bmN0aW9uIHJlcXVlc3RFbmRMb2dnaW5nRm9ybWF0ICh0b2tlbnMsIHJlcSwgcmVzKSB7XG4gIGxldCBzdGF0dXMgPSByZXMuc3RhdHVzQ29kZTtcbiAgbGV0IHN0YXR1c1N0ciA9ICc6c3RhdHVzJztcbiAgaWYgKHN0YXR1cyA+PSA1MDApIHtcbiAgICBzdGF0dXNTdHIgPSBzdGF0dXNTdHIucmVkO1xuICB9IGVsc2UgaWYgKHN0YXR1cyA+PSA0MDApIHtcbiAgICBzdGF0dXNTdHIgPSBzdGF0dXNTdHIueWVsbG93O1xuICB9IGVsc2UgaWYgKHN0YXR1cyA+PSAzMDApIHtcbiAgICBzdGF0dXNTdHIgPSBzdGF0dXNTdHIuY3lhbjtcbiAgfSBlbHNlIHtcbiAgICBzdGF0dXNTdHIgPSBzdGF0dXNTdHIuZ3JlZW47XG4gIH1cbiAgbGV0IGZuID0gY29tcGlsZShgJHsnPC0tIDptZXRob2QgOnVybCAnLndoaXRlfSR7c3RhdHVzU3RyfSAkeyc6cmVzcG9uc2UtdGltZSBtcyAtIDpyZXNbY29udGVudC1sZW5ndGhdJy5ncmV5fWApO1xuICByZXR1cm4gZm4odG9rZW5zLCByZXEsIHJlcyk7XG59XG5cbmNvbnN0IGVuZExvZ0Zvcm1hdHRlciA9IG1vcmdhbigodG9rZW5zLCByZXEsIHJlcykgPT4ge1xuICBsb2cuaW5mbyhyZXF1ZXN0RW5kTG9nZ2luZ0Zvcm1hdCh0b2tlbnMsIHJlcSwgcmVzKSxcbiAgICAocmVzLmpzb25SZXNwIHx8ICcnKS5ncmV5KTtcbn0pO1xuXG5jb25zdCByZXF1ZXN0U3RhcnRMb2dnaW5nRm9ybWF0ID0gY29tcGlsZShgJHsnLS0+Jy53aGl0ZX0gJHsnOm1ldGhvZCcud2hpdGV9ICR7Jzp1cmwnLndoaXRlfWApO1xuXG5jb25zdCBzdGFydExvZ0Zvcm1hdHRlciA9IG1vcmdhbigodG9rZW5zLCByZXEsIHJlcykgPT4ge1xuICAvLyBtb3JnYW4gb3V0cHV0IGlzIHJlZGlyZWN0ZWQgc3RyYWlnaHQgdG8gd2luc3RvblxuICBsZXQgZGF0YSA9ICcnO1xuICB0cnkge1xuICAgIGlmIChyZXEuYm9keSkge1xuICAgICAgZGF0YSA9IEpTT04uc3RyaW5naWZ5KHJlcS5ib2R5KS5zdWJzdHJpbmcoMCwgMTAwMCk7XG4gICAgfVxuICB9IGNhdGNoIChpZ24pIHt9XG4gIGxvZy5pbmZvKHJlcXVlc3RTdGFydExvZ2dpbmdGb3JtYXQodG9rZW5zLCByZXEsIHJlcyksIGRhdGEuZ3JleSk7XG59LCB7aW1tZWRpYXRlOiB0cnVlfSk7XG5cbmV4cG9ydCB7IGVuZExvZ0Zvcm1hdHRlciwgc3RhcnRMb2dGb3JtYXR0ZXIgfTtcbiJdfQ==