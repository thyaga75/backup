'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Promise = require('babel-runtime/core-js/promise')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _express = require('express');

var _express2 = _interopRequireDefault(_express);

var _http = require('http');

var _http2 = _interopRequireDefault(_http);

var _serveFavicon = require('serve-favicon');

var _serveFavicon2 = _interopRequireDefault(_serveFavicon);

var _bodyParser = require('body-parser');

var _bodyParser2 = _interopRequireDefault(_bodyParser);

var _methodOverride = require('method-override');

var _methodOverride2 = _interopRequireDefault(_methodOverride);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _expressLogging = require('./express-logging');

var _middleware = require('./middleware');

var _static = require('./static');

var _crash = require('./crash');

function server(configureRoutes, port) {
  var hostname = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];
  var app, httpServer;
  return _regeneratorRuntime.async(function server$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        app = (0, _express2['default'])();
        httpServer = _http2['default'].createServer(app);
        context$1$0.next = 4;
        return _regeneratorRuntime.awrap(new _Promise(function (resolve, reject) {
          httpServer.on('error', function (err) {
            if (err.code === 'EADDRNOTAVAIL') {
              _logger2['default'].error('Could not start REST http interface listener. ' + 'Requested address is not available.');
            } else {
              _logger2['default'].error('Could not start REST http interface listener. The requested ' + 'port may already be in use. Please make sure there is no ' + 'other instance of this server running already.');
            }
            reject(err);
          });
          httpServer.on('connection', function (socket) {
            socket.setTimeout(600 * 1000); // 10 minute timeout
          });
          configureServer(app, configureRoutes);

          var serverArgs = [port];
          if (hostname) {
            // If the hostname is omitted, the server will accept
            // connections on any IP address
            serverArgs.push(hostname);
          }
          httpServer.listen.apply(httpServer, serverArgs.concat([function (err) {
            if (err) {
              reject(err);
            }
            resolve(httpServer);
          }]));
        }));

      case 4:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
}

function configureServer(app, configureRoutes) {
  // set up logging
  app.use(_expressLogging.endLogFormatter);
  app.use(_expressLogging.startLogFormatter);

  // set up static assets
  app.use((0, _serveFavicon2['default'])(_path2['default'].resolve(_static.STATIC_DIR, 'favicon.ico')));
  app.use(_express2['default']['static'](_static.STATIC_DIR));

  // crash routes, for testing
  app.use('/wd/hub/produce_error', _crash.produceError);
  app.use('/wd/hub/crash', _crash.produceCrash);

  // add middlewares
  app.use(_middleware.allowCrossDomain);
  app.use(_middleware.fixPythonContentType);
  app.use(_bodyParser2['default'].urlencoded({ extended: true }));
  app.use((0, _methodOverride2['default'])());
  app.use(_middleware.catch4XXHandler);
  app.use(_middleware.catchAllHandler);

  // make sure appium never fails because of a file size upload limit
  app.use(_bodyParser2['default'].json({ limit: '1gb' }));

  configureRoutes(app);

  // dynamic routes for testing, etc.
  app.all('/welcome', _static.welcome);
  app.all('/test/guinea-pig', _static.guineaPig);

  // catch this last, so anything that falls through is 404ed
  app.use(_middleware.catch404Handler);
}

exports.server = server;
exports.configureServer = configureServer;

// create the actual http server
//# sourceMappingURL=data:application/json;base64,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QyxDQUFDLENBQUMsQ0FBQzs7QUFFekMsaUJBQWUsQ0FBQyxHQUFHLENBQUMsQ0FBQzs7O0FBR3JCLEtBQUcsQ0FBQyxHQUFHLENBQUMsVUFBVSxrQkFBVSxDQUFDO0FBQzdCLEtBQUcsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLG9CQUFZLENBQUM7OztBQUd2QyxLQUFHLENBQUMsR0FBRyw2QkFBaUIsQ0FBQztDQUMxQjs7UUFFUSxNQUFNLEdBQU4sTUFBTTtRQUFFLGVBQWUsR0FBZixlQUFlIiwiZmlsZSI6ImxpYi9zZXJ2ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBleHByZXNzIGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IGh0dHAgZnJvbSAnaHR0cCc7XG5pbXBvcnQgZmF2aWNvbiBmcm9tICdzZXJ2ZS1mYXZpY29uJztcbmltcG9ydCBib2R5UGFyc2VyIGZyb20gJ2JvZHktcGFyc2VyJztcbmltcG9ydCBtZXRob2RPdmVycmlkZSBmcm9tICdtZXRob2Qtb3ZlcnJpZGUnO1xuaW1wb3J0IGxvZyBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQgeyBzdGFydExvZ0Zvcm1hdHRlciwgZW5kTG9nRm9ybWF0dGVyIH0gZnJvbSAnLi9leHByZXNzLWxvZ2dpbmcnO1xuaW1wb3J0IHsgYWxsb3dDcm9zc0RvbWFpbiwgZml4UHl0aG9uQ29udGVudFR5cGUsIGNhdGNoQWxsSGFuZGxlcixcbiAgICAgICAgIGNhdGNoNDA0SGFuZGxlciwgY2F0Y2g0WFhIYW5kbGVyIH0gZnJvbSAnLi9taWRkbGV3YXJlJztcbmltcG9ydCB7IGd1aW5lYVBpZywgd2VsY29tZSwgU1RBVElDX0RJUiB9IGZyb20gJy4vc3RhdGljJztcbmltcG9ydCB7IHByb2R1Y2VFcnJvciwgcHJvZHVjZUNyYXNoIH0gZnJvbSAnLi9jcmFzaCc7XG5cblxuYXN5bmMgZnVuY3Rpb24gc2VydmVyIChjb25maWd1cmVSb3V0ZXMsIHBvcnQsIGhvc3RuYW1lID0gbnVsbCkge1xuICAvLyBjcmVhdGUgdGhlIGFjdHVhbCBodHRwIHNlcnZlclxuICBsZXQgYXBwID0gZXhwcmVzcygpO1xuICBsZXQgaHR0cFNlcnZlciA9IGh0dHAuY3JlYXRlU2VydmVyKGFwcCk7XG5cbiAgcmV0dXJuIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBodHRwU2VydmVyLm9uKCdlcnJvcicsIChlcnIpID0+IHtcbiAgICAgIGlmIChlcnIuY29kZSA9PT0gJ0VBRERSTk9UQVZBSUwnKSB7XG4gICAgICAgIGxvZy5lcnJvcignQ291bGQgbm90IHN0YXJ0IFJFU1QgaHR0cCBpbnRlcmZhY2UgbGlzdGVuZXIuICcgK1xuICAgICAgICAgICAgICAgICAgJ1JlcXVlc3RlZCBhZGRyZXNzIGlzIG5vdCBhdmFpbGFibGUuJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsb2cuZXJyb3IoJ0NvdWxkIG5vdCBzdGFydCBSRVNUIGh0dHAgaW50ZXJmYWNlIGxpc3RlbmVyLiBUaGUgcmVxdWVzdGVkICcgK1xuICAgICAgICAgICAgICAgICAgJ3BvcnQgbWF5IGFscmVhZHkgYmUgaW4gdXNlLiBQbGVhc2UgbWFrZSBzdXJlIHRoZXJlIGlzIG5vICcgK1xuICAgICAgICAgICAgICAgICAgJ290aGVyIGluc3RhbmNlIG9mIHRoaXMgc2VydmVyIHJ1bm5pbmcgYWxyZWFkeS4nKTtcbiAgICAgIH1cbiAgICAgIHJlamVjdChlcnIpO1xuICAgIH0pO1xuICAgIGh0dHBTZXJ2ZXIub24oJ2Nvbm5lY3Rpb24nLCAoc29ja2V0KSA9PiB7XG4gICAgICBzb2NrZXQuc2V0VGltZW91dCg2MDAgKiAxMDAwKTsgLy8gMTAgbWludXRlIHRpbWVvdXRcbiAgICB9KTtcbiAgICBjb25maWd1cmVTZXJ2ZXIoYXBwLCBjb25maWd1cmVSb3V0ZXMpO1xuICAgIFxuICAgIGxldCBzZXJ2ZXJBcmdzID0gW3BvcnRdO1xuICAgIGlmIChob3N0bmFtZSkge1xuICAgICAgLy8gSWYgdGhlIGhvc3RuYW1lIGlzIG9taXR0ZWQsIHRoZSBzZXJ2ZXIgd2lsbCBhY2NlcHRcbiAgICAgIC8vIGNvbm5lY3Rpb25zIG9uIGFueSBJUCBhZGRyZXNzXG4gICAgICBzZXJ2ZXJBcmdzLnB1c2goaG9zdG5hbWUpO1xuICAgIH1cbiAgICBodHRwU2VydmVyLmxpc3RlbiguLi5zZXJ2ZXJBcmdzLCAoZXJyKSA9PiB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgfVxuICAgICAgcmVzb2x2ZShodHRwU2VydmVyKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNvbmZpZ3VyZVNlcnZlciAoYXBwLCBjb25maWd1cmVSb3V0ZXMpIHtcbiAgLy8gc2V0IHVwIGxvZ2dpbmdcbiAgYXBwLnVzZShlbmRMb2dGb3JtYXR0ZXIpO1xuICBhcHAudXNlKHN0YXJ0TG9nRm9ybWF0dGVyKTtcblxuICAvLyBzZXQgdXAgc3RhdGljIGFzc2V0c1xuICBhcHAudXNlKGZhdmljb24ocGF0aC5yZXNvbHZlKFNUQVRJQ19ESVIsICdmYXZpY29uLmljbycpKSk7XG4gIGFwcC51c2UoZXhwcmVzcy5zdGF0aWMoU1RBVElDX0RJUikpO1xuXG4gIC8vIGNyYXNoIHJvdXRlcywgZm9yIHRlc3RpbmdcbiAgYXBwLnVzZSgnL3dkL2h1Yi9wcm9kdWNlX2Vycm9yJywgcHJvZHVjZUVycm9yKTtcbiAgYXBwLnVzZSgnL3dkL2h1Yi9jcmFzaCcsIHByb2R1Y2VDcmFzaCk7XG5cbiAgLy8gYWRkIG1pZGRsZXdhcmVzXG4gIGFwcC51c2UoYWxsb3dDcm9zc0RvbWFpbik7XG4gIGFwcC51c2UoZml4UHl0aG9uQ29udGVudFR5cGUpO1xuICBhcHAudXNlKGJvZHlQYXJzZXIudXJsZW5jb2RlZCh7ZXh0ZW5kZWQ6IHRydWV9KSk7XG4gIGFwcC51c2UobWV0aG9kT3ZlcnJpZGUoKSk7XG4gIGFwcC51c2UoY2F0Y2g0WFhIYW5kbGVyKTtcbiAgYXBwLnVzZShjYXRjaEFsbEhhbmRsZXIpO1xuXG4gIC8vIG1ha2Ugc3VyZSBhcHBpdW0gbmV2ZXIgZmFpbHMgYmVjYXVzZSBvZiBhIGZpbGUgc2l6ZSB1cGxvYWQgbGltaXRcbiAgYXBwLnVzZShib2R5UGFyc2VyLmpzb24oe2xpbWl0OiAnMWdiJ30pKTtcblxuICBjb25maWd1cmVSb3V0ZXMoYXBwKTtcblxuICAvLyBkeW5hbWljIHJvdXRlcyBmb3IgdGVzdGluZywgZXRjLlxuICBhcHAuYWxsKCcvd2VsY29tZScsIHdlbGNvbWUpO1xuICBhcHAuYWxsKCcvdGVzdC9ndWluZWEtcGlnJywgZ3VpbmVhUGlnKTtcblxuICAvLyBjYXRjaCB0aGlzIGxhc3QsIHNvIGFueXRoaW5nIHRoYXQgZmFsbHMgdGhyb3VnaCBpcyA0MDRlZFxuICBhcHAudXNlKGNhdGNoNDA0SGFuZGxlcik7XG59XG5cbmV4cG9ydCB7IHNlcnZlciwgY29uZmlndXJlU2VydmVyIH07XG4iXX0=