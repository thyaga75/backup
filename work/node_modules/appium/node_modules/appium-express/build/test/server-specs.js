require('source-map-support').install();

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

var _ = require('..');

var _2 = _interopRequireDefault(_);

var _libServer = require('../lib/server');

var _requestPromise = require('request-promise');

var _requestPromise2 = _interopRequireDefault(_requestPromise);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('server configuration', function () {
  it('should actually use the middleware', function () {
    var app = { use: _sinon2['default'].spy(), all: _sinon2['default'].spy() };
    var configureRoutes = function configureRoutes() {};
    (0, _libServer.configureServer)(app, configureRoutes);
    app.use.callCount.should.equal(14);
    app.all.callCount.should.equal(2);
  });

  it('should reject if error thrown in configureRoutes parameter', function callee$1$0() {
    var configureRoutes;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          configureRoutes = function configureRoutes() {
            throw new Error('I am Mr. MeeSeeks look at me!');
          };

          context$2$0.next = 3;
          return _regeneratorRuntime.awrap((0, _2['default'])(configureRoutes, 8181).should.be.rejectedWith('MeeSeeks'));

        case 3:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
});
describe('server', function () {
  var hwServer = undefined;
  var errorStub = undefined;
  before(function callee$1$0() {
    var configureRoutes;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          configureRoutes = function configureRoutes(app) {
            app.get('/', function (req, res) {
              res.header['content-type'] = 'text/html';
              res.status(200).send('Hello World!');
            });
            app.get('/wd/hub/python', function (req, res) {
              res.status(200).send(req.headers['content-type']);
            });
            app.get('/error', function () {
              throw new Error('hahaha');
            });
          };

          errorStub = _sinon2['default'].stub(console, 'error');
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap((0, _2['default'])(configureRoutes, 8181));

        case 4:
          hwServer = context$2$0.sent;

        case 5:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  after(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          hwServer.close();
          errorStub.restore();

        case 2:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should start up with our middleware', function callee$1$0() {
    var body;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _requestPromise2['default'])('http://localhost:8181/'));

        case 2:
          body = context$2$0.sent;

          body.should.eql('Hello World!');

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should fix broken context type', function callee$1$0() {
    var body;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
            url: 'http://localhost:8181/wd/hub/python',
            headers: {
              'user-agent': 'Python',
              'content-type': 'application/x-www-form-urlencoded'
            }
          }));

        case 2:
          body = context$2$0.sent;

          body.should.eql('application/json');

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should catch errors in the catchall', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _requestPromise2['default'])('http://localhost:8181/error').should.be.rejectedWith(/hahaha/));

        case 2:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should error if we try to start again on a port that is used', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _2['default'])(function () {}, 8181).should.be.rejectedWith(/EADDRINUSE/));

        case 2:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  it('should error if we try to start on a bad hostname', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap((0, _2['default'])(function () {}, 8181, 'lolcathost').should.be.rejectedWith(/ENOTFOUND/));

        case 2:
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap((0, _2['default'])(function () {}, 8181, '1.1.1.1').should.be.rejectedWith(/EADDRNOTAVAIL/));

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
});
//# sourceMappingURL=data:application/json;base64,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QUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQzs7Ozs7OztHQUNqQyxDQUFDLENBQUM7QUFDSCxJQUFFLENBQUMsZ0NBQWdDLEVBQUU7UUFDL0IsSUFBSTs7Ozs7MkNBQVMsaUNBQVE7QUFDdkIsZUFBRyxFQUFFLHFDQUFxQztBQUMxQyxtQkFBTyxFQUFFO0FBQ1AsMEJBQVksRUFBRSxRQUFRO0FBQ3RCLDRCQUFjLEVBQUUsbUNBQW1DO2FBQ3BEO1dBQ0YsQ0FBQzs7O0FBTkUsY0FBSTs7QUFPUixjQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDOzs7Ozs7O0dBQ3JDLENBQUMsQ0FBQztBQUNILElBQUUsQ0FBQyxxQ0FBcUMsRUFBRTs7Ozs7MkNBQ2xDLGlDQUFRLDZCQUE2QixDQUFDLENBQ3pDLE1BQU0sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQzs7Ozs7OztHQUNwQyxDQUFDLENBQUM7QUFDSCxJQUFFLENBQUMsOERBQThELEVBQUU7Ozs7OzJDQUMzRCxtQkFBTyxZQUFNLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUM7Ozs7Ozs7R0FDbEUsQ0FBQyxDQUFDO0FBQ0gsSUFBRSxDQUFDLG1EQUFtRCxFQUFFOzs7OzsyQ0FDaEQsbUJBQU8sWUFBTSxFQUFFLEVBQUUsSUFBSSxFQUFFLFlBQVksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLFdBQVcsQ0FBQzs7OzsyQ0FDeEUsbUJBQU8sWUFBTSxFQUFFLEVBQUUsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLGVBQWUsQ0FBQzs7Ozs7OztHQUNoRixDQUFDLENBQUM7Q0FDSixDQUFDLENBQUMiLCJmaWxlIjoidGVzdC9zZXJ2ZXItc3BlY3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0cmFuc3BpbGU6bW9jaGFcblxuaW1wb3J0IHNlcnZlciBmcm9tICcuLic7XG5pbXBvcnQgeyBjb25maWd1cmVTZXJ2ZXIgfSBmcm9tICcuLi9saWIvc2VydmVyJztcbmltcG9ydCByZXF1ZXN0IGZyb20gJ3JlcXVlc3QtcHJvbWlzZSc7XG5pbXBvcnQgY2hhaSBmcm9tICdjaGFpJztcbmltcG9ydCBjaGFpQXNQcm9taXNlZCBmcm9tICdjaGFpLWFzLXByb21pc2VkJztcbmltcG9ydCBzaW5vbiBmcm9tICdzaW5vbic7XG5cblxuY2hhaS5zaG91bGQoKTtcbmNoYWkudXNlKGNoYWlBc1Byb21pc2VkKTtcblxuZGVzY3JpYmUoJ3NlcnZlciBjb25maWd1cmF0aW9uJywgKCkgPT4ge1xuICBpdCgnc2hvdWxkIGFjdHVhbGx5IHVzZSB0aGUgbWlkZGxld2FyZScsICgpID0+IHtcbiAgICBsZXQgYXBwID0ge3VzZTogc2lub24uc3B5KCksIGFsbDogc2lub24uc3B5KCl9O1xuICAgIGxldCBjb25maWd1cmVSb3V0ZXMgPSAoKSA9PiB7fTtcbiAgICBjb25maWd1cmVTZXJ2ZXIoYXBwLCBjb25maWd1cmVSb3V0ZXMpO1xuICAgIGFwcC51c2UuY2FsbENvdW50LnNob3VsZC5lcXVhbCgxNCk7XG4gICAgYXBwLmFsbC5jYWxsQ291bnQuc2hvdWxkLmVxdWFsKDIpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHJlamVjdCBpZiBlcnJvciB0aHJvd24gaW4gY29uZmlndXJlUm91dGVzIHBhcmFtZXRlcicsIGFzeW5jICgpID0+IHtcbiAgICBsZXQgY29uZmlndXJlUm91dGVzID0gKCkgPT4ge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJIGFtIE1yLiBNZWVTZWVrcyBsb29rIGF0IG1lIScpO1xuICAgIH07XG4gICAgYXdhaXQgc2VydmVyKGNvbmZpZ3VyZVJvdXRlcywgODE4MSkuc2hvdWxkLmJlLnJlamVjdGVkV2l0aCgnTWVlU2Vla3MnKTtcbiAgfSk7XG59KTtcbmRlc2NyaWJlKCdzZXJ2ZXInLCAoKSA9PiB7XG4gIGxldCBod1NlcnZlcjtcbiAgbGV0IGVycm9yU3R1YjtcbiAgYmVmb3JlKGFzeW5jICgpID0+IHtcbiAgICBlcnJvclN0dWIgPSBzaW5vbi5zdHViKGNvbnNvbGUsICdlcnJvcicpO1xuICAgIGZ1bmN0aW9uIGNvbmZpZ3VyZVJvdXRlcyAoYXBwKSB7XG4gICAgICBhcHAuZ2V0KCcvJywgKHJlcSwgcmVzKSA9PiB7XG4gICAgICAgIHJlcy5oZWFkZXJbJ2NvbnRlbnQtdHlwZSddID0gJ3RleHQvaHRtbCc7XG4gICAgICAgIHJlcy5zdGF0dXMoMjAwKS5zZW5kKCdIZWxsbyBXb3JsZCEnKTtcbiAgICAgIH0pO1xuICAgICAgYXBwLmdldCgnL3dkL2h1Yi9weXRob24nLCAocmVxLCByZXMpID0+IHtcbiAgICAgICAgcmVzLnN0YXR1cygyMDApLnNlbmQocmVxLmhlYWRlcnNbJ2NvbnRlbnQtdHlwZSddKTtcbiAgICAgIH0pO1xuICAgICAgYXBwLmdldCgnL2Vycm9yJywgKCkgPT4ge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2hhaGFoYScpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGh3U2VydmVyID0gYXdhaXQgc2VydmVyKGNvbmZpZ3VyZVJvdXRlcywgODE4MSk7XG4gIH0pO1xuICBhZnRlcihhc3luYyAoKSA9PiB7XG4gICAgaHdTZXJ2ZXIuY2xvc2UoKTtcbiAgICBlcnJvclN0dWIucmVzdG9yZSgpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHN0YXJ0IHVwIHdpdGggb3VyIG1pZGRsZXdhcmUnLCBhc3luYyAoKSA9PiB7XG4gICAgbGV0IGJvZHkgPSBhd2FpdCByZXF1ZXN0KCdodHRwOi8vbG9jYWxob3N0OjgxODEvJyk7XG4gICAgYm9keS5zaG91bGQuZXFsKCdIZWxsbyBXb3JsZCEnKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgZml4IGJyb2tlbiBjb250ZXh0IHR5cGUnLCBhc3luYyAoKSA9PiB7XG4gICAgbGV0IGJvZHkgPSBhd2FpdCByZXF1ZXN0KHtcbiAgICAgIHVybDogJ2h0dHA6Ly9sb2NhbGhvc3Q6ODE4MS93ZC9odWIvcHl0aG9uJyxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ3VzZXItYWdlbnQnOiAnUHl0aG9uJyxcbiAgICAgICAgJ2NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG4gICAgICB9XG4gICAgfSk7XG4gICAgYm9keS5zaG91bGQuZXFsKCdhcHBsaWNhdGlvbi9qc29uJyk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIGNhdGNoIGVycm9ycyBpbiB0aGUgY2F0Y2hhbGwnLCBhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgcmVxdWVzdCgnaHR0cDovL2xvY2FsaG9zdDo4MTgxL2Vycm9yJylcbiAgICAgIC5zaG91bGQuYmUucmVqZWN0ZWRXaXRoKC9oYWhhaGEvKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgZXJyb3IgaWYgd2UgdHJ5IHRvIHN0YXJ0IGFnYWluIG9uIGEgcG9ydCB0aGF0IGlzIHVzZWQnLCBhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgc2VydmVyKCgpID0+IHt9LCA4MTgxKS5zaG91bGQuYmUucmVqZWN0ZWRXaXRoKC9FQUREUklOVVNFLyk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIGVycm9yIGlmIHdlIHRyeSB0byBzdGFydCBvbiBhIGJhZCBob3N0bmFtZScsIGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBzZXJ2ZXIoKCkgPT4ge30sIDgxODEsICdsb2xjYXRob3N0Jykuc2hvdWxkLmJlLnJlamVjdGVkV2l0aCgvRU5PVEZPVU5ELyk7XG4gICAgYXdhaXQgc2VydmVyKCgpID0+IHt9LCA4MTgxLCAnMS4xLjEuMScpLnNob3VsZC5iZS5yZWplY3RlZFdpdGgoL0VBRERSTk9UQVZBSUwvKTtcbiAgfSk7XG59KTtcbiJdfQ==