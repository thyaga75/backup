// transpile :mocha

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _interopRequireWildcard = require('babel-runtime/helpers/interop-require-wildcard')['default'];

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _ = require('../..');

var _2 = _interopRequireDefault(_);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _appiumAdb = require('appium-adb');

var _appiumAdb2 = _interopRequireDefault(_appiumAdb);

var _appiumTestSupport = require('appium-test-support');

var _teen_process = require('teen_process');

var teen_process = _interopRequireWildcard(_teen_process);

var _events = require('events');

var _events2 = _interopRequireDefault(_events);

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('UiAutomator', function () {
  var _this = this;

  var uiAutomator = undefined,
      adb = new _appiumAdb2['default']();
  var rootDir = _path2['default'].resolve(__dirname, process.env.NO_PRECOMPILE ? '../..' : '../../..');
  var bootstrapJar = _path2['default'].resolve(rootDir, 'test', 'fixtures', 'AppiumBootstrap.jar'),
      bootstrapClassName = 'io.appium.android.bootstrap.Bootstrap';
  before(function () {
    uiAutomator = new _2['default'](adb);
  });

  it('should throw an error if adb is not passed', function () {
    (function () {
      new _2['default']();
    }).should['throw'](/adb is required/);
  });
  it("parseJarNameFromPath should parse jarName from path and windows path", function () {
    uiAutomator.parseJarNameFromPath(bootstrapJar).should.equal('AppiumBootstrap.jar');
    var windowsJarName = 'C:\\\\appium\\bar.jar';
    uiAutomator.parseJarNameFromPath(windowsJarName).should.equal('bar.jar');
  });
  it("parseJarNameFromPath should throw error for invalid path", function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          (function () {
            uiAutomator.parseJarNameFromPath('foo/bar');
          }).should['throw'](/Unable to parse/);

        case 1:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  describe("start", (0, _appiumTestSupport.withSandbox)({ mocks: { adb: adb, teen_process: teen_process } }, function (S) {
    it("should return a subProcess", function callee$2$0() {
      var conn, args;
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            conn = new _events2['default'].EventEmitter();

            conn.start = function () {};
            args = ["shell", "uiautomator", "runtest", 'AppiumBootstrap.jar', "-c", bootstrapClassName];

            S.mocks.adb.expects('push').once().withExactArgs(bootstrapJar, "/data/local/tmp/").returns('');
            S.mocks.adb.expects('getAdbPath').once().returns('adbPath');
            S.mocks.teen_process.expects("SubProcess").once().withExactArgs('adbPath', args).returns(conn);
            context$3$0.next = 8;
            return _regeneratorRuntime.awrap(uiAutomator.start(bootstrapJar, bootstrapClassName));

          case 8:
            uiAutomator.state.should.equal('online');
            S.verify();

          case 10:
          case 'end':
            return context$3$0.stop();
        }
      }, null, this);
    });
  }));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvdW5pdC91aWF1dG9tYXRvci1zcGVjcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O29CQUVpQixNQUFNOzs7OzhCQUNJLGtCQUFrQjs7OztnQkFDckIsT0FBTzs7OztvQkFDZCxNQUFNOzs7O3lCQUNQLFlBQVk7Ozs7aUNBQ0EscUJBQXFCOzs0QkFDbkIsY0FBYzs7SUFBaEMsWUFBWTs7c0JBQ0wsUUFBUTs7OztBQUczQixrQkFBSyxNQUFNLEVBQUUsQ0FBQztBQUNkLGtCQUFLLEdBQUcsNkJBQWdCLENBQUM7O0FBRXpCLFFBQVEsQ0FBQyxhQUFhLEVBQUUsWUFBWTs7O0FBQ2xDLE1BQUksV0FBVyxZQUFBO01BQUUsR0FBRyxHQUFFLDRCQUFTLENBQUM7QUFDaEMsTUFBSSxPQUFPLEdBQUcsa0JBQUssT0FBTyxDQUFDLFNBQVMsRUFDVCxPQUFPLENBQUMsR0FBRyxDQUFDLGFBQWEsR0FBRyxPQUFPLEdBQUcsVUFBVSxDQUFDLENBQUM7QUFDN0UsTUFBTSxZQUFZLEdBQUcsa0JBQUssT0FBTyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLHFCQUFxQixDQUFDO01BQy9FLGtCQUFrQixHQUFHLHVDQUF1QyxDQUFDO0FBQ25FLFFBQU0sQ0FBQyxZQUFNO0FBQ1gsZUFBVyxHQUFHLGtCQUFnQixHQUFHLENBQUMsQ0FBQztHQUNwQyxDQUFDLENBQUM7O0FBRUgsSUFBRSxDQUFDLDRDQUE0QyxFQUFFLFlBQU07QUFDckQsS0FBQSxZQUFNO0FBQUUseUJBQWlCLENBQUM7S0FBRSxDQUFBLENBQUMsTUFBTSxTQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQztHQUM5RCxDQUFDLENBQUM7QUFDSCxJQUFFLENBQUMsc0VBQXNFLEVBQUUsWUFBTTtBQUMvRSxlQUFXLENBQUMsb0JBQW9CLENBQUMsWUFBWSxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0FBQ25GLFFBQUksY0FBYywwQkFBMEIsQ0FBQztBQUM3QyxlQUFXLENBQUMsb0JBQW9CLENBQUMsY0FBYyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQztHQUMxRSxDQUFDLENBQUM7QUFDSCxJQUFFLENBQUMsMERBQTBELEVBQUU7Ozs7QUFDN0QsV0FBQSxZQUFNO0FBQUUsdUJBQVcsQ0FBQyxvQkFBb0IsQ0FBQyxTQUFTLENBQUMsQ0FBQztXQUFFLENBQUEsQ0FBQyxNQUFNLFNBQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDOzs7Ozs7O0dBQ3hGLENBQUMsQ0FBQztBQUNILFVBQVEsQ0FBQyxPQUFPLEVBQUUsb0NBQVksRUFBQyxLQUFLLEVBQUUsRUFBQyxHQUFHLEVBQUgsR0FBRyxFQUFFLFlBQVksRUFBWixZQUFZLEVBQUMsRUFBQyxFQUFFLFVBQUMsQ0FBQyxFQUFLO0FBQ2pFLE1BQUUsQ0FBQyw0QkFBNEIsRUFBRTtVQUMzQixJQUFJLEVBRUosSUFBSTs7OztBQUZKLGdCQUFJLEdBQUcsSUFBSSxvQkFBTyxZQUFZLEVBQUU7O0FBQ3BDLGdCQUFJLENBQUMsS0FBSyxHQUFHLFlBQU0sRUFBRyxDQUFDO0FBQ25CLGdCQUFJLEdBQUcsQ0FBQyxPQUFPLEVBQUUsYUFBYSxFQUFFLFNBQVMsRUFBRSxxQkFBcUIsRUFDeEQsSUFBSSxFQUFFLGtCQUFrQixDQUFDOztBQUNyQyxhQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQy9CLGFBQWEsQ0FBQyxZQUFZLEVBQUMsa0JBQWtCLENBQUMsQ0FDOUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2YsYUFBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksRUFBRSxDQUNyQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDdEIsYUFBQyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUN2QyxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUNyQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7OzZDQUNYLFdBQVcsQ0FBQyxLQUFLLENBQUMsWUFBWSxFQUFFLGtCQUFrQixDQUFDOzs7QUFDekQsdUJBQVcsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUN6QyxhQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7Ozs7Ozs7S0FDWixDQUFDLENBQUM7R0FDSixDQUFDLENBQUMsQ0FBQztDQUNMLENBQUMsQ0FBQyIsImZpbGUiOiJ0ZXN0L3VuaXQvdWlhdXRvbWF0b3Itc3BlY3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0cmFuc3BpbGUgOm1vY2hhXG5cbmltcG9ydCBjaGFpIGZyb20gJ2NoYWknO1xuaW1wb3J0IGNoYWlBc1Byb21pc2VkIGZyb20gJ2NoYWktYXMtcHJvbWlzZWQnO1xuaW1wb3J0IFVpQXV0b21hdG9yIGZyb20gJy4uLy4uJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IEFEQiBmcm9tICdhcHBpdW0tYWRiJztcbmltcG9ydCB7IHdpdGhTYW5kYm94IH0gZnJvbSAnYXBwaXVtLXRlc3Qtc3VwcG9ydCc7XG5pbXBvcnQgKiBhcyB0ZWVuX3Byb2Nlc3MgZnJvbSAndGVlbl9wcm9jZXNzJztcbmltcG9ydCBldmVudHMgZnJvbSAnZXZlbnRzJztcblxuXG5jaGFpLnNob3VsZCgpO1xuY2hhaS51c2UoY2hhaUFzUHJvbWlzZWQpO1xuXG5kZXNjcmliZSgnVWlBdXRvbWF0b3InLCBmdW5jdGlvbiAoKSB7XG4gIGxldCB1aUF1dG9tYXRvciwgYWRiPSBuZXcgQURCKCk7XG4gIGxldCByb290RGlyID0gcGF0aC5yZXNvbHZlKF9fZGlybmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzcy5lbnYuTk9fUFJFQ09NUElMRSA/ICcuLi8uLicgOiAnLi4vLi4vLi4nKTtcbiAgY29uc3QgYm9vdHN0cmFwSmFyID0gcGF0aC5yZXNvbHZlKHJvb3REaXIsICd0ZXN0JywgJ2ZpeHR1cmVzJywgJ0FwcGl1bUJvb3RzdHJhcC5qYXInKSxcbiAgICAgICAgYm9vdHN0cmFwQ2xhc3NOYW1lID0gJ2lvLmFwcGl1bS5hbmRyb2lkLmJvb3RzdHJhcC5Cb290c3RyYXAnO1xuICBiZWZvcmUoKCkgPT4ge1xuICAgIHVpQXV0b21hdG9yID0gbmV3IFVpQXV0b21hdG9yKGFkYik7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgdGhyb3cgYW4gZXJyb3IgaWYgYWRiIGlzIG5vdCBwYXNzZWQnLCAoKSA9PiB7XG4gICAgKCkgPT4geyBuZXcgVWlBdXRvbWF0b3IoKTsgfS5zaG91bGQudGhyb3coL2FkYiBpcyByZXF1aXJlZC8pO1xuICB9KTtcbiAgaXQoXCJwYXJzZUphck5hbWVGcm9tUGF0aCBzaG91bGQgcGFyc2UgamFyTmFtZSBmcm9tIHBhdGggYW5kIHdpbmRvd3MgcGF0aFwiLCAoKSA9PiB7XG4gICAgdWlBdXRvbWF0b3IucGFyc2VKYXJOYW1lRnJvbVBhdGgoYm9vdHN0cmFwSmFyKS5zaG91bGQuZXF1YWwoJ0FwcGl1bUJvb3RzdHJhcC5qYXInKTtcbiAgICBsZXQgd2luZG93c0phck5hbWUgPSBgQzpcXFxcXFxcXGFwcGl1bVxcXFxiYXIuamFyYDtcbiAgICB1aUF1dG9tYXRvci5wYXJzZUphck5hbWVGcm9tUGF0aCh3aW5kb3dzSmFyTmFtZSkuc2hvdWxkLmVxdWFsKCdiYXIuamFyJyk7XG4gIH0pO1xuICBpdChcInBhcnNlSmFyTmFtZUZyb21QYXRoIHNob3VsZCB0aHJvdyBlcnJvciBmb3IgaW52YWxpZCBwYXRoXCIsIGFzeW5jICgpID0+IHtcbiAgICAoKSA9PiB7IHVpQXV0b21hdG9yLnBhcnNlSmFyTmFtZUZyb21QYXRoKCdmb28vYmFyJyk7IH0uc2hvdWxkLnRocm93KC9VbmFibGUgdG8gcGFyc2UvKTtcbiAgfSk7XG4gIGRlc2NyaWJlKFwic3RhcnRcIiwgd2l0aFNhbmRib3goe21vY2tzOiB7YWRiLCB0ZWVuX3Byb2Nlc3N9fSwgKFMpID0+IHtcbiAgICBpdChcInNob3VsZCByZXR1cm4gYSBzdWJQcm9jZXNzXCIsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGxldCBjb25uID0gbmV3IGV2ZW50cy5FdmVudEVtaXR0ZXIoKTtcbiAgICAgIGNvbm4uc3RhcnQgPSAoKSA9PiB7IH07XG4gICAgICBsZXQgYXJncyA9IFtcInNoZWxsXCIsIFwidWlhdXRvbWF0b3JcIiwgXCJydW50ZXN0XCIsICdBcHBpdW1Cb290c3RyYXAuamFyJyxcbiAgICAgICAgICAgICAgICAgIFwiLWNcIiwgYm9vdHN0cmFwQ2xhc3NOYW1lXTtcbiAgICAgIFMubW9ja3MuYWRiLmV4cGVjdHMoJ3B1c2gnKS5vbmNlKClcbiAgICAgICAgLndpdGhFeGFjdEFyZ3MoYm9vdHN0cmFwSmFyLFwiL2RhdGEvbG9jYWwvdG1wL1wiKVxuICAgICAgICAucmV0dXJucygnJyk7XG4gICAgICBTLm1vY2tzLmFkYi5leHBlY3RzKCdnZXRBZGJQYXRoJykub25jZSgpXG4gICAgICAgIC5yZXR1cm5zKCdhZGJQYXRoJyk7XG4gICAgICBTLm1vY2tzLnRlZW5fcHJvY2Vzcy5leHBlY3RzKFwiU3ViUHJvY2Vzc1wiKVxuICAgICAgICAub25jZSgpLndpdGhFeGFjdEFyZ3MoJ2FkYlBhdGgnLCBhcmdzKVxuICAgICAgICAucmV0dXJucyhjb25uKTtcbiAgICAgIGF3YWl0IHVpQXV0b21hdG9yLnN0YXJ0KGJvb3RzdHJhcEphciwgYm9vdHN0cmFwQ2xhc3NOYW1lKTtcbiAgICAgIHVpQXV0b21hdG9yLnN0YXRlLnNob3VsZC5lcXVhbCgnb25saW5lJyk7XG4gICAgICBTLnZlcmlmeSgpO1xuICAgIH0pO1xuICB9KSk7XG59KTtcbiJdfQ==