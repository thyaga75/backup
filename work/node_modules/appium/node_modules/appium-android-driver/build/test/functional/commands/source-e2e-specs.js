'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _ = require('../../..');

var _sampleApps = require('sample-apps');

var _sampleApps2 = _interopRequireDefault(_sampleApps);

var _xmldom = require('xmldom');

var _xpath = require('xpath');

var _xpath2 = _interopRequireDefault(_xpath);

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

var driver = undefined;
var defaultCaps = {
  app: (0, _sampleApps2['default'])('ApiDemos-debug'),
  deviceName: 'Android',
  platformName: 'Android'
};
var assertSource = function assertSource(source) {
  var dom, nodes;
  return _regeneratorRuntime.async(function assertSource$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        source.should.exist;
        dom = new _xmldom.DOMParser().parseFromString(source);
        nodes = _xpath2['default'].select('//android.widget.TextView[@content-desc="App"]', dom);

        nodes.length.should.equal(1);

      case 4:
      case 'end':
        return context$1$0.stop();
    }
  }, null, _this);
};

describe('apidemo - source', function () {
  var _this2 = this;

  before(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          driver = new _.AndroidDriver();
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(driver.createSession(defaultCaps));

        case 3:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this2);
  });
  after(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(driver.deleteSession());

        case 2:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this2);
  });
  it('should return the page source', function callee$1$0() {
    var source;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(driver.getPageSource());

        case 2:
          source = context$2$0.sent;
          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(assertSource(source));

        case 5:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this2);
  });
  it('should get less source when compression is enabled', function callee$1$0() {
    var getSourceWithoutCompression, getSourceWithCompression, sourceWithoutCompression, sourceWithCompression;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      var _this3 = this;

      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          getSourceWithoutCompression = function getSourceWithoutCompression() {
            return _regeneratorRuntime.async(function getSourceWithoutCompression$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap(driver.updateSettings({ 'ignoreUnimportantViews': false }));

                case 2:
                  context$3$0.next = 4;
                  return _regeneratorRuntime.awrap(driver.getPageSource());

                case 4:
                  return context$3$0.abrupt('return', context$3$0.sent);

                case 5:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this3);
          };

          getSourceWithCompression = function getSourceWithCompression() {
            return _regeneratorRuntime.async(function getSourceWithCompression$(context$3$0) {
              while (1) switch (context$3$0.prev = context$3$0.next) {
                case 0:
                  context$3$0.next = 2;
                  return _regeneratorRuntime.awrap(driver.updateSettings({ "ignoreUnimportantViews": true }));

                case 2:
                  context$3$0.next = 4;
                  return _regeneratorRuntime.awrap(driver.getPageSource());

                case 4:
                  return context$3$0.abrupt('return', context$3$0.sent);

                case 5:
                case 'end':
                  return context$3$0.stop();
              }
            }, null, _this3);
          };

          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(getSourceWithoutCompression());

        case 4:
          sourceWithoutCompression = context$2$0.sent;
          context$2$0.next = 7;
          return _regeneratorRuntime.awrap(getSourceWithCompression());

        case 7:
          sourceWithCompression = context$2$0.sent;

          sourceWithoutCompression.length.should.be.greaterThan(sourceWithCompression.length);

        case 9:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this2);
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZnVuY3Rpb25hbC9jb21tYW5kcy9zb3VyY2UtZTJlLXNwZWNzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O29CQUFpQixNQUFNOzs7OzhCQUNJLGtCQUFrQjs7OztnQkFDZixVQUFVOzswQkFDakIsYUFBYTs7OztzQkFDVixRQUFROztxQkFDaEIsT0FBTzs7OztBQUV6QixrQkFBSyxNQUFNLEVBQUUsQ0FBQztBQUNkLGtCQUFLLEdBQUcsNkJBQWdCLENBQUM7O0FBRXpCLElBQUksTUFBTSxZQUFBLENBQUM7QUFDWCxJQUFJLFdBQVcsR0FBRztBQUNoQixLQUFHLEVBQUUsNkJBQVcsZ0JBQWdCLENBQUM7QUFDakMsWUFBVSxFQUFFLFNBQVM7QUFDckIsY0FBWSxFQUFFLFNBQVM7Q0FDeEIsQ0FBQztBQUNGLElBQUksWUFBWSxHQUFHLFNBQWYsWUFBWSxDQUFVLE1BQU07TUFFMUIsR0FBRyxFQUNILEtBQUs7Ozs7QUFGVCxjQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztBQUNoQixXQUFHLEdBQUcsdUJBQWUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDO0FBQzdDLGFBQUssR0FBRyxtQkFBTSxNQUFNLENBQUMsZ0RBQWdELEVBQUUsR0FBRyxDQUFDOztBQUMvRSxhQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7Ozs7Ozs7Q0FDOUIsQ0FBQzs7QUFFRixRQUFRLENBQUMsa0JBQWtCLEVBQUUsWUFBWTs7O0FBQ3ZDLFFBQU0sQ0FBQzs7OztBQUNMLGdCQUFNLEdBQUcscUJBQW1CLENBQUM7OzJDQUN2QixNQUFNLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQzs7Ozs7OztHQUN4QyxDQUFDLENBQUM7QUFDSCxPQUFLLENBQUM7Ozs7OzJDQUNFLE1BQU0sQ0FBQyxhQUFhLEVBQUU7Ozs7Ozs7R0FDN0IsQ0FBQyxDQUFDO0FBQ0gsSUFBRSxDQUFDLCtCQUErQixFQUFFO1FBQzlCLE1BQU07Ozs7OzJDQUFTLE1BQU0sQ0FBQyxhQUFhLEVBQUU7OztBQUFyQyxnQkFBTTs7MkNBQ0osWUFBWSxDQUFDLE1BQU0sQ0FBQzs7Ozs7OztHQUMzQixDQUFDLENBQUM7QUFDSCxJQUFFLENBQUMsb0RBQW9ELEVBQUU7UUFDbkQsMkJBQTJCLEVBSTNCLHdCQUF3QixFQUl4Qix3QkFBd0IsRUFDeEIscUJBQXFCOzs7Ozs7QUFUckIscUNBQTJCLEdBQUcsU0FBOUIsMkJBQTJCOzs7OzttREFDdkIsTUFBTSxDQUFDLGNBQWMsQ0FBQyxFQUFDLHdCQUF3QixFQUFFLEtBQUssRUFBQyxDQUFDOzs7O21EQUNqRCxNQUFNLENBQUMsYUFBYSxFQUFFOzs7Ozs7Ozs7O1dBQ3BDOztBQUNHLGtDQUF3QixHQUFHLFNBQTNCLHdCQUF3Qjs7Ozs7bURBQ3BCLE1BQU0sQ0FBQyxjQUFjLENBQUMsRUFBQyx3QkFBd0IsRUFBRSxJQUFJLEVBQUMsQ0FBQzs7OzttREFDaEQsTUFBTSxDQUFDLGFBQWEsRUFBRTs7Ozs7Ozs7OztXQUNwQzs7OzJDQUNvQywyQkFBMkIsRUFBRTs7O0FBQTlELGtDQUF3Qjs7MkNBQ00sd0JBQXdCLEVBQUU7OztBQUF4RCwrQkFBcUI7O0FBQ3pCLGtDQUF3QixDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsQ0FBQzs7Ozs7OztHQUNyRixDQUFDLENBQUM7Q0FDSixDQUFDLENBQUMiLCJmaWxlIjoidGVzdC9mdW5jdGlvbmFsL2NvbW1hbmRzL3NvdXJjZS1lMmUtc3BlY3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY2hhaSBmcm9tICdjaGFpJztcbmltcG9ydCBjaGFpQXNQcm9taXNlZCBmcm9tICdjaGFpLWFzLXByb21pc2VkJztcbmltcG9ydCB7IEFuZHJvaWREcml2ZXIgfSBmcm9tICcuLi8uLi8uLic7XG5pbXBvcnQgc2FtcGxlQXBwcyBmcm9tICdzYW1wbGUtYXBwcyc7XG5pbXBvcnQgeyBET01QYXJzZXIgfSBmcm9tICd4bWxkb20nO1xuaW1wb3J0IHhwYXRoIGZyb20gJ3hwYXRoJztcblxuY2hhaS5zaG91bGQoKTtcbmNoYWkudXNlKGNoYWlBc1Byb21pc2VkKTtcblxubGV0IGRyaXZlcjtcbmxldCBkZWZhdWx0Q2FwcyA9IHtcbiAgYXBwOiBzYW1wbGVBcHBzKCdBcGlEZW1vcy1kZWJ1ZycpLFxuICBkZXZpY2VOYW1lOiAnQW5kcm9pZCcsXG4gIHBsYXRmb3JtTmFtZTogJ0FuZHJvaWQnXG59O1xubGV0IGFzc2VydFNvdXJjZSA9IGFzeW5jIChzb3VyY2UpID0+IHtcbiAgc291cmNlLnNob3VsZC5leGlzdDtcbiAgbGV0IGRvbSA9IG5ldyBET01QYXJzZXIoKS5wYXJzZUZyb21TdHJpbmcoc291cmNlKTtcbiAgbGV0IG5vZGVzID0geHBhdGguc2VsZWN0KCcvL2FuZHJvaWQud2lkZ2V0LlRleHRWaWV3W0Bjb250ZW50LWRlc2M9XCJBcHBcIl0nLCBkb20pO1xuICBub2Rlcy5sZW5ndGguc2hvdWxkLmVxdWFsKDEpO1xufTtcblxuZGVzY3JpYmUoJ2FwaWRlbW8gLSBzb3VyY2UnLCBmdW5jdGlvbiAoKSB7XG4gIGJlZm9yZShhc3luYyAoKSA9PiB7XG4gICAgZHJpdmVyID0gbmV3IEFuZHJvaWREcml2ZXIoKTtcbiAgICBhd2FpdCBkcml2ZXIuY3JlYXRlU2Vzc2lvbihkZWZhdWx0Q2Fwcyk7XG4gIH0pO1xuICBhZnRlcihhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgZHJpdmVyLmRlbGV0ZVNlc3Npb24oKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgcmV0dXJuIHRoZSBwYWdlIHNvdXJjZScsIGFzeW5jICgpID0+IHtcbiAgICBsZXQgc291cmNlID0gYXdhaXQgZHJpdmVyLmdldFBhZ2VTb3VyY2UoKTtcbiAgICBhd2FpdCBhc3NlcnRTb3VyY2Uoc291cmNlKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgZ2V0IGxlc3Mgc291cmNlIHdoZW4gY29tcHJlc3Npb24gaXMgZW5hYmxlZCcsIGFzeW5jICgpID0+IHtcbiAgICBsZXQgZ2V0U291cmNlV2l0aG91dENvbXByZXNzaW9uID0gYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgZHJpdmVyLnVwZGF0ZVNldHRpbmdzKHsnaWdub3JlVW5pbXBvcnRhbnRWaWV3cyc6IGZhbHNlfSk7XG4gICAgICByZXR1cm4gYXdhaXQgZHJpdmVyLmdldFBhZ2VTb3VyY2UoKTtcbiAgICB9O1xuICAgIGxldCBnZXRTb3VyY2VXaXRoQ29tcHJlc3Npb24gPSBhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCBkcml2ZXIudXBkYXRlU2V0dGluZ3Moe1wiaWdub3JlVW5pbXBvcnRhbnRWaWV3c1wiOiB0cnVlfSk7XG4gICAgICByZXR1cm4gYXdhaXQgZHJpdmVyLmdldFBhZ2VTb3VyY2UoKTtcbiAgICB9O1xuICAgIGxldCBzb3VyY2VXaXRob3V0Q29tcHJlc3Npb24gPSBhd2FpdCBnZXRTb3VyY2VXaXRob3V0Q29tcHJlc3Npb24oKTtcbiAgICBsZXQgc291cmNlV2l0aENvbXByZXNzaW9uID0gYXdhaXQgZ2V0U291cmNlV2l0aENvbXByZXNzaW9uKCk7XG4gICAgc291cmNlV2l0aG91dENvbXByZXNzaW9uLmxlbmd0aC5zaG91bGQuYmUuZ3JlYXRlclRoYW4oc291cmNlV2l0aENvbXByZXNzaW9uLmxlbmd0aCk7XG4gIH0pO1xufSk7XG4iXX0=