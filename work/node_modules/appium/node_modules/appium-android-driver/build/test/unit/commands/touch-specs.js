'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

// import sinon from 'sinon';
// import Bootstrap from 'appium-android-bootstrap';

var _ = require('../../..');

var _appiumTestSupport = require('appium-test-support');

var _appiumAdb = require('appium-adb');

var _appiumAdb2 = _interopRequireDefault(_appiumAdb);

// let driver;
// let sandbox = sinon.sandbox.create();
_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

describe('Touch', function () {
  var adb = new _appiumAdb2['default']();
  var driver = new _.AndroidDriver();
  driver.adb = adb;

  describe('#parseTouch', function () {
    describe('given a touch sequence with absolute coordinates', function () {
      it('should use offsets for moveTo', function callee$3$0() {
        var actions, touchStates, parsedActions, index, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, state;

        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              actions = [{ action: 'press', options: { x: 100, y: 101 } }, { action: 'moveTo', options: { x: 50, y: 51 } }, { action: 'wait', options: { ms: 5000 } }, { action: 'moveTo', options: { x: -40, y: -41 } }, { action: 'release', options: {} }];
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(driver.parseTouch(actions, false));

            case 3:
              touchStates = context$4$0.sent;

              touchStates.length.should.equal(5);
              parsedActions = [{ action: 'press', x: 100, y: 101 }, { action: 'moveTo', x: 150, y: 152 }, { action: 'wait', x: 150, y: 152 }, { action: 'moveTo', x: 110, y: 111 }, { action: 'release' }];
              index = 0;
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              context$4$0.prev = 10;

              for (_iterator = _getIterator(touchStates); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                state = _step.value;

                state.action.should.equal(parsedActions[index].action);
                if (actions[index].action !== 'release') {
                  state.options.x.should.equal(parsedActions[index].x);
                  state.options.y.should.equal(parsedActions[index].y);
                }
                index++;
              }
              context$4$0.next = 18;
              break;

            case 14:
              context$4$0.prev = 14;
              context$4$0.t0 = context$4$0['catch'](10);
              _didIteratorError = true;
              _iteratorError = context$4$0.t0;

            case 18:
              context$4$0.prev = 18;
              context$4$0.prev = 19;

              if (!_iteratorNormalCompletion && _iterator['return']) {
                _iterator['return']();
              }

            case 21:
              context$4$0.prev = 21;

              if (!_didIteratorError) {
                context$4$0.next = 24;
                break;
              }

              throw _iteratorError;

            case 24:
              return context$4$0.finish(21);

            case 25:
              return context$4$0.finish(18);

            case 26:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this, [[10, 14, 18, 26], [19,, 21, 25]]);
      });
    });
  });

  describe.only('doTouchDrag', (0, _appiumTestSupport.withMocks)({ driver: driver, adb: adb }, function (mocks) {
    var tests = function tests(apiLevel, defaultDuration) {
      return _regeneratorRuntime.async(function tests$(context$3$0) {
        var _this2 = this;

        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            it('should handle longPress not having duration', function callee$3$0() {
              var expectedDuration, actions;
              return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    expectedDuration = defaultDuration;
                    actions = [{ action: 'longPress', options: { x: 100, y: 101 } }, { action: 'moveTo', options: { x: 50, y: 51 } }, { action: 'release', options: {} }];

                    mocks.driver.expects('drag').withExactArgs(actions[0].options.x, actions[0].options.y, actions[1].options.x, actions[1].options.y, expectedDuration, 1, undefined, undefined).returns('');
                    context$4$0.next = 5;
                    return _regeneratorRuntime.awrap(driver.doTouchDrag(actions));

                  case 5:

                    mocks.driver.verify();

                  case 6:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, _this2);
            });
            it('should handle longPress having duration', function callee$3$0() {
              var expectedDuration, actions;
              return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    expectedDuration = 4;
                    actions = [{ action: 'longPress', options: { x: 100, y: 101, duration: expectedDuration * 1000 } }, { action: 'moveTo', options: { x: 50, y: 51 } }, { action: 'release', options: {} }];

                    mocks.driver.expects('drag').withExactArgs(actions[0].options.x, actions[0].options.y, actions[1].options.x, actions[1].options.y, expectedDuration, 1, undefined, undefined).returns('');
                    context$4$0.next = 5;
                    return _regeneratorRuntime.awrap(driver.doTouchDrag(actions));

                  case 5:

                    mocks.driver.verify();

                  case 6:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, _this2);
            });
            it('should handle longPress having duration less than minimum', function callee$3$0() {
              var expectedDuration, actions;
              return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
                while (1) switch (context$4$0.prev = context$4$0.next) {
                  case 0:
                    expectedDuration = defaultDuration;
                    actions = [{ action: 'longPress', options: { x: 100, y: 101, duration: 500 } }, { action: 'moveTo', options: { x: 50, y: 51 } }, { action: 'release', options: {} }];

                    mocks.driver.expects('drag').withExactArgs(actions[0].options.x, actions[0].options.y, actions[1].options.x, actions[1].options.y, expectedDuration, 1, undefined, undefined).returns('');
                    context$4$0.next = 5;
                    return _regeneratorRuntime.awrap(driver.doTouchDrag(actions));

                  case 5:

                    mocks.driver.verify();

                  case 6:
                  case 'end':
                    return context$4$0.stop();
                }
              }, null, _this2);
            });

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    };

    describe('android >5', function () {
      beforeEach(function () {
        mocks.adb.expects('getApiLevel').returns(5);
      });
      afterEach(function () {
        mocks.adb.verify();
        mocks.adb.restore();
      });
      tests(5, 2);
    });
    describe('android <5', function () {
      beforeEach(function () {
        mocks.adb.expects('getApiLevel').returns(4.4);
      });
      afterEach(function () {
        mocks.adb.verify();
        mocks.adb.restore();
      });
      tests(4.4, 1);
    });
  }));
});

// let driver = new AndroidDriver({foo: 'bar'});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvdW5pdC9jb21tYW5kcy90b3VjaC1zcGVjcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O29CQUFpQixNQUFNOzs7OzhCQUNJLGtCQUFrQjs7Ozs7OztnQkFHZixVQUFVOztpQ0FDZCxxQkFBcUI7O3lCQUMvQixZQUFZOzs7Ozs7QUFLNUIsa0JBQUssTUFBTSxFQUFFLENBQUM7QUFDZCxrQkFBSyxHQUFHLDZCQUFnQixDQUFDOztBQUV6QixRQUFRLENBQUMsT0FBTyxFQUFFLFlBQU07QUFDdEIsTUFBSSxHQUFHLEdBQUcsNEJBQVMsQ0FBQztBQUNwQixNQUFJLE1BQU0sR0FBRyxxQkFBbUIsQ0FBQztBQUNqQyxRQUFNLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQzs7QUFFakIsVUFBUSxDQUFDLGFBQWEsRUFBRSxZQUFNO0FBQzVCLFlBQVEsQ0FBQyxrREFBa0QsRUFBRSxZQUFNO0FBQ2pFLFFBQUUsQ0FBQywrQkFBK0IsRUFBRTtZQUU5QixPQUFPLEVBS1AsV0FBVyxFQUVYLGFBQWEsRUFLYixLQUFLLGtGQUNBLEtBQUs7Ozs7O0FBYlYscUJBQU8sR0FBRyxDQUFFLEVBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBQyxFQUM5QyxFQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUMsRUFDN0MsRUFBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBQyxFQUN2QyxFQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFDLEVBQy9DLEVBQUMsTUFBTSxFQUFFLFNB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QUFDLENBQzdCLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztPQUNmLENBQUMsQ0FBQztBQUNILGVBQVMsQ0FBQyxZQUFNO0FBQ2QsYUFBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQztBQUNuQixhQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDO09BQ3JCLENBQUMsQ0FBQztBQUNILFdBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDYixDQUFDLENBQUM7QUFDSCxZQUFRLENBQUMsWUFBWSxFQUFFLFlBQU07QUFDM0IsZ0JBQVUsQ0FBQyxZQUFNO0FBQ2YsYUFBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQzdCLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztPQUNqQixDQUFDLENBQUM7QUFDSCxlQUFTLENBQUMsWUFBTTtBQUNkLGFBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUM7QUFDbkIsYUFBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQztPQUNyQixDQUFDLENBQUM7QUFDSCxXQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQ2YsQ0FBQyxDQUFDO0dBQ0osQ0FBQyxDQUFDLENBQUM7Q0FDTCxDQUFDLENBQUMiLCJmaWxlIjoidGVzdC91bml0L2NvbW1hbmRzL3RvdWNoLXNwZWNzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGNoYWkgZnJvbSAnY2hhaSc7XG5pbXBvcnQgY2hhaUFzUHJvbWlzZWQgZnJvbSAnY2hhaS1hcy1wcm9taXNlZCc7XG4vLyBpbXBvcnQgc2lub24gZnJvbSAnc2lub24nO1xuLy8gaW1wb3J0IEJvb3RzdHJhcCBmcm9tICdhcHBpdW0tYW5kcm9pZC1ib290c3RyYXAnO1xuaW1wb3J0IHsgQW5kcm9pZERyaXZlciB9IGZyb20gJy4uLy4uLy4uJztcbmltcG9ydCB7IHdpdGhNb2NrcyB9IGZyb20gJ2FwcGl1bS10ZXN0LXN1cHBvcnQnO1xuaW1wb3J0IEFEQiBmcm9tICdhcHBpdW0tYWRiJztcblxuXG4vLyBsZXQgZHJpdmVyO1xuLy8gbGV0IHNhbmRib3ggPSBzaW5vbi5zYW5kYm94LmNyZWF0ZSgpO1xuY2hhaS5zaG91bGQoKTtcbmNoYWkudXNlKGNoYWlBc1Byb21pc2VkKTtcblxuZGVzY3JpYmUoJ1RvdWNoJywgKCkgPT4ge1xuICBsZXQgYWRiID0gbmV3IEFEQigpO1xuICBsZXQgZHJpdmVyID0gbmV3IEFuZHJvaWREcml2ZXIoKTtcbiAgZHJpdmVyLmFkYiA9IGFkYjtcblxuICBkZXNjcmliZSgnI3BhcnNlVG91Y2gnLCAoKSA9PiB7XG4gICAgZGVzY3JpYmUoJ2dpdmVuIGEgdG91Y2ggc2VxdWVuY2Ugd2l0aCBhYnNvbHV0ZSBjb29yZGluYXRlcycsICgpID0+IHtcbiAgICAgIGl0KCdzaG91bGQgdXNlIG9mZnNldHMgZm9yIG1vdmVUbycsIGFzeW5jICgpID0+IHtcbiAgICAgICAgLy8gbGV0IGRyaXZlciA9IG5ldyBBbmRyb2lkRHJpdmVyKHtmb286ICdiYXInfSk7XG4gICAgICAgIGxldCBhY3Rpb25zID0gWyB7YWN0aW9uOiAncHJlc3MnLCBvcHRpb25zOiB7IHg6IDEwMCwgeTogMTAxIH19LFxuICAgICAgICAgICAgICAgICAgICAgICAge2FjdGlvbjogJ21vdmVUbycsIG9wdGlvbnM6IHsgeDogNTAsIHk6IDUxIH19LFxuICAgICAgICAgICAgICAgICAgICAgICAge2FjdGlvbjogJ3dhaXQnLCBvcHRpb25zOiB7IG1zOiA1MDAwIH19LFxuICAgICAgICAgICAgICAgICAgICAgICAge2FjdGlvbjogJ21vdmVUbycsIG9wdGlvbnM6IHsgeDogLTQwLCB5OiAtNDEgfX0sXG4gICAgICAgICAgICAgICAgICAgICAgICB7YWN0aW9uOiAncmVsZWFzZScsIG9wdGlvbnM6IHt9fSBdO1xuICAgICAgICBsZXQgdG91Y2hTdGF0ZXMgPSBhd2FpdCBkcml2ZXIucGFyc2VUb3VjaChhY3Rpb25zLCBmYWxzZSk7XG4gICAgICAgIHRvdWNoU3RhdGVzLmxlbmd0aC5zaG91bGQuZXF1YWwoNSk7XG4gICAgICAgIGxldCBwYXJzZWRBY3Rpb25zID0gWyB7YWN0aW9uOiAncHJlc3MnLCB4OiAxMDAsIHk6IDEwMX0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7YWN0aW9uOiAnbW92ZVRvJywgeDogMTUwLCB5OiAxNTJ9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2FjdGlvbjogJ3dhaXQnLCB4OiAxNTAsIHk6IDE1Mn0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7YWN0aW9uOiAnbW92ZVRvJywgeDogMTEwLCB5OiAxMTF9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2FjdGlvbjogJ3JlbGVhc2UnfV07XG4gICAgICAgIGxldCBpbmRleCA9IDA7XG4gICAgICAgIGZvciAobGV0IHN0YXRlIG9mIHRvdWNoU3RhdGVzKSB7XG4gICAgICAgICAgc3RhdGUuYWN0aW9uLnNob3VsZC5lcXVhbChwYXJzZWRBY3Rpb25zW2luZGV4XS5hY3Rpb24pO1xuICAgICAgICAgIGlmIChhY3Rpb25zW2luZGV4XS5hY3Rpb24gIT09ICdyZWxlYXNlJykge1xuICAgICAgICAgICAgc3RhdGUub3B0aW9ucy54LnNob3VsZC5lcXVhbChwYXJzZWRBY3Rpb25zW2luZGV4XS54KTtcbiAgICAgICAgICAgIHN0YXRlLm9wdGlvbnMueS5zaG91bGQuZXF1YWwocGFyc2VkQWN0aW9uc1tpbmRleF0ueSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGluZGV4Kys7XG4gICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICBkZXNjcmliZS5vbmx5KCdkb1RvdWNoRHJhZycsIHdpdGhNb2Nrcyh7ZHJpdmVyLCBhZGJ9LCAobW9ja3MpID0+IHtcbiAgICBsZXQgdGVzdHMgPSBhc3luYyAoYXBpTGV2ZWwsIGRlZmF1bHREdXJhdGlvbikgPT4ge1xuICAgICAgaXQoJ3Nob3VsZCBoYW5kbGUgbG9uZ1ByZXNzIG5vdCBoYXZpbmcgZHVyYXRpb24nLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGxldCBleHBlY3RlZER1cmF0aW9uID0gZGVmYXVsdER1cmF0aW9uO1xuICAgICAgICBsZXQgYWN0aW9ucyA9IFsgeyBhY3Rpb246ICdsb25nUHJlc3MnLCBvcHRpb25zOiB7IHg6IDEwMCwgeTogMTAxIH0gfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgYWN0aW9uOiAnbW92ZVRvJywgb3B0aW9uczogeyB4OiA1MCwgeTogNTEgfSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgeyBhY3Rpb246ICdyZWxlYXNlJywgb3B0aW9uczoge30gfSBdO1xuXG4gICAgICAgIG1vY2tzLmRyaXZlci5leHBlY3RzKCdkcmFnJylcbiAgICAgICAgICAud2l0aEV4YWN0QXJncyhhY3Rpb25zWzBdLm9wdGlvbnMueCwgYWN0aW9uc1swXS5vcHRpb25zLnksXG4gICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uc1sxXS5vcHRpb25zLngsIGFjdGlvbnNbMV0ub3B0aW9ucy55LFxuICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGVjdGVkRHVyYXRpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgMSwgdW5kZWZpbmVkLCB1bmRlZmluZWQpXG4gICAgICAgICAgLnJldHVybnMoJycpO1xuICAgICAgICBhd2FpdCBkcml2ZXIuZG9Ub3VjaERyYWcoYWN0aW9ucyk7XG5cbiAgICAgICAgbW9ja3MuZHJpdmVyLnZlcmlmeSgpO1xuICAgICAgfSk7XG4gICAgICBpdCgnc2hvdWxkIGhhbmRsZSBsb25nUHJlc3MgaGF2aW5nIGR1cmF0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBsZXQgZXhwZWN0ZWREdXJhdGlvbiA9IDQ7XG4gICAgICAgIGxldCBhY3Rpb25zID0gWyB7IGFjdGlvbjogJ2xvbmdQcmVzcycsIG9wdGlvbnM6IHsgeDogMTAwLCB5OiAxMDEsIGR1cmF0aW9uOiBleHBlY3RlZER1cmF0aW9uICogMTAwMCB9IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB7IGFjdGlvbjogJ21vdmVUbycsIG9wdGlvbnM6IHsgeDogNTAsIHk6IDUxIH0gfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHsgYWN0aW9uOiAncmVsZWFzZScsIG9wdGlvbnM6IHt9IH0gXTtcblxuICAgICAgICBtb2Nrcy5kcml2ZXIuZXhwZWN0cygnZHJhZycpXG4gICAgICAgICAgLndpdGhFeGFjdEFyZ3MoYWN0aW9uc1swXS5vcHRpb25zLngsIGFjdGlvbnNbMF0ub3B0aW9ucy55LFxuICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbnNbMV0ub3B0aW9ucy54LCBhY3Rpb25zWzFdLm9wdGlvbnMueSxcbiAgICAgICAgICAgICAgICAgICAgICAgICBleHBlY3RlZER1cmF0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgIDEsIHVuZGVmaW5lZCwgdW5kZWZpbmVkKVxuICAgICAgICAgIC5yZXR1cm5zKCcnKTtcbiAgICAgICAgYXdhaXQgZHJpdmVyLmRvVG91Y2hEcmFnKGFjdGlvbnMpO1xuXG4gICAgICAgIG1vY2tzLmRyaXZlci52ZXJpZnkoKTtcbiAgICAgIH0pO1xuICAgICAgaXQoJ3Nob3VsZCBoYW5kbGUgbG9uZ1ByZXNzIGhhdmluZyBkdXJhdGlvbiBsZXNzIHRoYW4gbWluaW11bScsIGFzeW5jICgpID0+IHtcbiAgICAgICAgbGV0IGV4cGVjdGVkRHVyYXRpb24gPSBkZWZhdWx0RHVyYXRpb247XG4gICAgICAgIGxldCBhY3Rpb25zID0gWyB7IGFjdGlvbjogJ2xvbmdQcmVzcycsIG9wdGlvbnM6IHsgeDogMTAwLCB5OiAxMDEsIGR1cmF0aW9uOiA1MDAgfSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgeyBhY3Rpb246ICdtb3ZlVG8nLCBvcHRpb25zOiB7IHg6IDUwLCB5OiA1MSB9IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB7IGFjdGlvbjogJ3JlbGVhc2UnLCBvcHRpb25zOiB7fSB9IF07XG5cbiAgICAgICAgbW9ja3MuZHJpdmVyLmV4cGVjdHMoJ2RyYWcnKVxuICAgICAgICAgIC53aXRoRXhhY3RBcmdzKGFjdGlvbnNbMF0ub3B0aW9ucy54LCBhY3Rpb25zWzBdLm9wdGlvbnMueSxcbiAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb25zWzFdLm9wdGlvbnMueCwgYWN0aW9uc1sxXS5vcHRpb25zLnksXG4gICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0ZWREdXJhdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAxLCB1bmRlZmluZWQsIHVuZGVmaW5lZClcbiAgICAgICAgICAucmV0dXJucygnJyk7XG4gICAgICAgIGF3YWl0IGRyaXZlci5kb1RvdWNoRHJhZyhhY3Rpb25zKTtcblxuICAgICAgICBtb2Nrcy5kcml2ZXIudmVyaWZ5KCk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgZGVzY3JpYmUoJ2FuZHJvaWQgPjUnLCAoKSA9PiB7XG4gICAgICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICAgICAgbW9ja3MuYWRiLmV4cGVjdHMoJ2dldEFwaUxldmVsJylcbiAgICAgICAgICAucmV0dXJucyg1KTtcbiAgICAgIH0pO1xuICAgICAgYWZ0ZXJFYWNoKCgpID0+IHtcbiAgICAgICAgbW9ja3MuYWRiLnZlcmlmeSgpO1xuICAgICAgICBtb2Nrcy5hZGIucmVzdG9yZSgpO1xuICAgICAgfSk7XG4gICAgICB0ZXN0cyg1LCAyKTtcbiAgICB9KTtcbiAgICBkZXNjcmliZSgnYW5kcm9pZCA8NScsICgpID0+IHtcbiAgICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgICBtb2Nrcy5hZGIuZXhwZWN0cygnZ2V0QXBpTGV2ZWwnKVxuICAgICAgICAgIC5yZXR1cm5zKDQuNCk7XG4gICAgICB9KTtcbiAgICAgIGFmdGVyRWFjaCgoKSA9PiB7XG4gICAgICAgIG1vY2tzLmFkYi52ZXJpZnkoKTtcbiAgICAgICAgbW9ja3MuYWRiLnJlc3RvcmUoKTtcbiAgICAgIH0pO1xuICAgICAgdGVzdHMoNC40LCAxKTtcbiAgICB9KTtcbiAgfSkpO1xufSk7XG4iXX0=