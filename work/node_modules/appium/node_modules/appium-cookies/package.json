{
  "_args": [
    [
      "appium-cookies@https://registry.npmjs.org/appium-cookies/-/appium-cookies-1.1.0.tgz",
      "/Users/thyag/work/node_modules/appium"
    ]
  ],
  "_from": "appium-cookies@>=1.1.0 <2.0.0",
  "_id": "appium-cookies@1.1.0",
  "_inCache": true,
  "_location": "/appium/appium-cookies",
  "_phantomChildren": {
    "core-js": "1.2.6"
  },
  "_requested": {
    "name": "appium-cookies",
    "raw": "appium-cookies@https://registry.npmjs.org/appium-cookies/-/appium-cookies-1.1.0.tgz",
    "rawSpec": "https://registry.npmjs.org/appium-cookies/-/appium-cookies-1.1.0.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/appium-cookies/-/appium-cookies-1.1.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/appium/appium-ios-driver"
  ],
  "_resolved": "https://registry.npmjs.org/appium-cookies/-/appium-cookies-1.1.0.tgz",
  "_shasum": "726246ffc3fbf3c187db97bbd00f4bfb8044a9e1",
  "_shrinkwrap": null,
  "_spec": "appium-cookies@https://registry.npmjs.org/appium-cookies/-/appium-cookies-1.1.0.tgz",
  "_where": "/Users/thyag/work/node_modules/appium",
  "author": {
    "name": "appium"
  },
  "bin": {},
  "bugs": {
    "url": "https://github.com/appium/appium-cookies/issues"
  },
  "dependencies": {
    "appium-logger": "^2.1.0",
    "babel-runtime": "=5.8.20",
    "lodash": "^3.10.0",
    "source-map-support": "^0.3.1"
  },
  "description": "Description goes here.",
  "devDependencies": {
    "appium-gulp-plugins": "^1.3.12",
    "chai": "^3.0.0",
    "gulp": "^3.9.0"
  },
  "directories": {
    "lib": "lib"
  },
  "engines": [
    "node"
  ],
  "homepage": "https://github.com/appium/appium-cookies#readme",
  "keywords": [
    "appium"
  ],
  "license": "Apache-2.0",
  "main": "./build/index.js",
  "name": "appium-cookies",
  "optionalDependencies": {},
  "readme": "## appium-cookies\n\n[![npm Version](https://img.shields.io/npm/v/appium-cookies.svg)](https://www.npmjs.com/package/appium-cookies)\n[![Downloads](http://img.shields.io/npm/dm/appium-cookies.svg)](https://npmjs.org/package/appium-cookies)\n[![Dependency Status](https://david-dm.org/appium/appium-cookies/master.svg)](https://david-dm.org/appium/appium-cookies/)\n[![devDependency Status](https://david-dm.org/appium/appium-cookies/dev-status.svg)](https://david-dm.org/appium/appium-cookies#info=devDependencies)\n\n[![Build Status](https://api.travis-ci.org/appium/appium-cookies.png?branch=master)](https://travis-ci.org/appium/appium-cookies)\n[![Coverage Status](https://img.shields.io/coveralls/appium/appium-cookies/master.svg)](https://coveralls.io/github/appium/appium-cookies?branch=master)\n\nThis is an ES6 module for simple handling of cookies, for use in communicating and translating between [JSON Wire Protocol cookie objects](https://code.google.com/p/selenium/wiki/JsonWireProtocol#Cookie_JSON_Object) and regular [JavaScript cookies](https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie).\n\n### Usage\n\nInstall from [npm](https://www.npmjs.com/package/appium-cookies):\n\n```shell\nnpm install appium-cookies\n```\n\nImport/require:\n\n```js\n// ES6\nimport cookie from 'appium-cookies';\n\nlet c = cookie.createJSCookie('key', 'value', {expires: 'Thu, 01 Jan 2070 3:4:7 GMT', path: '/lib'});\n// c => 'key=value; expires=Thu, 01 Jan 2070 3:4:7 GMT; path=/lib'\n```\n\n```js\n// ES5\nvar cookie = require('appium-cookies');\n\nvar c = cookie.createJSCookie('key', 'value', {expires: 'Thu, 01 Jan 2070 3:4:7 GMT', path: '/lib'});\n// c => 'key=value; expires=Thu, 01 Jan 2070 3:4:7 GMT; path=/lib'\n```\n\n### API\n\n`createJSCookie (key, value, options)`\n\n- returns a regular JS formatted cookie with the arguments given. `options` can include `expires`, `path`, `domain`, `secure`. No attempt is made to enforce the suitability of any of those options.\n\n`createJWPCookie (key, cookieString, converter)`\n\n- returns a JSON Wire Protocol formatted cookie. It will convert the values if a converter is provided. `converter` is any method that takes a string and returns something.\n\n`getValue (key, cookieString, converter)`\n\n- parses the `cookieString` for a key and returns the value. It will convert the value if a converter is provided.\n\n`expireCookie(key, options)`\n\n- returns an expired cookie which can be assigned to a cookie that you wish to delete. `options` are the same as those for `createJSCookie`.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/appium/appium-cookies.git"
  },
  "scripts": {
    "prepublish": "gulp prepublish",
    "test": "gulp once",
    "watch": "gulp"
  },
  "version": "1.1.0"
}
