require('source-map-support').install();

'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _ = require('..');

var _2 = _interopRequireDefault(_);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

_chai2['default'].should();
_chai2['default'].expect();
var expect = _chai2['default'].expect;

describe('cookies.js', function () {
  it('should properly create a JS cookie', function () {
    var jsCookie = _2['default'].createJSCookie('k', 'v');
    jsCookie.should.equal('k=v');
  });

  it('should create JS cookie with options given', function () {
    var jsCookie = _2['default'].createJSCookie('k', 'v', { expires: 'Thu, 01 Jan 2070 3:4:7 GMT', path: '/lib' });
    jsCookie.should.equal('k=v; expires=Thu, 01 Jan 2070 3:4:7 GMT; path=/lib');
  });

  it('should create JSON cookie object with options given', function () {
    var jsCookie = _2['default'].createJWPCookie('k', 'k=v; expires=Thu, 01 Jan 2070 3:4:7 GMT; path=/lib');
    expect(jsCookie).to.deep.equal({ name: 'k', value: 'v', expires: 'Thu, 01 Jan 2070 3:4:7 GMT', path: '/lib' });
  });

  it('should return correct value given key', function () {
    var value = _2['default'].getValue('k', 'k=v; expires=Thu, 01 Jan 2070 3:4:7 GMT; path=/lib');
    value.should.equal('v');
  });

  it('should parse each element of string into an object', function () {
    var value = _2['default'].getValue(undefined, 'k=v; expires=Thu, 01 Jan 2070 3:4:7 GMT; path=/lib');
    value.should.eql({ k: 'v', expires: 'Thu, 01 Jan 2070 3:4:7 GMT', path: '/lib' });
  });

  it('should handle quoted cookie', function () {
    var value = _2['default'].getValue('k', 'k="v"; expires=Thu, 01 Jan 2070 3:4:7 GMT; path=/lib');
    value.should.equal('v');
  });

  it('should handle quoted cookie with internal quotes', function () {
    var value = _2['default'].getValue('k', 'k="v\"t\""; expires=Thu, 01 Jan 2070 3:4:7 GMT; path=/lib');
    value.should.equal('v"t"');
  });

  it('should properly decode an encoded key value pair', function () {
    var value = _2['default'].getValue(' c', encodeURIComponent(' c') + '=' + encodeURIComponent(' v'));
    value.should.equal(' v');
  });

  it('should return undefined for an undefined key value', function () {
    var value = _2['default'].getValue('someKey', 'k=v');
    expect(value).to.be.undefined;
  });

  it('should decode pluses in the cookie into spaces', function () {
    var value = _2['default'].getValue('c', 'c=foo+bar');
    value.should.equal('foo bar');
  });

  it('should return undefined and not throw an exception on an invalid URL encoding', function () {
    var value = _2['default'].getValue('bad', 'bad=foo%');
    expect(value).to.be.undefined;
  });

  it('should create empty object when it is called and there is an empty string', function () {
    _2['default'].createJWPCookie().should.deep.equal({});
  });

  it('should properly convert the value when a converter is supplied', function () {
    var val = _2['default'].getValue('c', 'c=' + 1, Number);
    val.should.equal(1);
  });

  it('should return a cookie that expires on 01 Jan 1970 when removeCookie is called', function () {
    _2['default'].expireCookie('c').should.include('expires=Thu, 01 Jan 1970 00:00:00 GMT');
  });
});
//# sourceMappingURL=data:application/json;base64,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QXVDLENBQUMsQ0FBQztHQUNuRixDQUFDLENBQUM7Q0FDSixDQUFDLENBQUMiLCJmaWxlIjoidGVzdC9jb29raWUtc3BlY3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0cmFuc3BpbGU6bW9jaGFcblxuaW1wb3J0IGNvb2tpZSBmcm9tICcuLic7XG5pbXBvcnQgY2hhaSBmcm9tICdjaGFpJztcblxuXG5jaGFpLnNob3VsZCgpO1xuY2hhaS5leHBlY3QoKTtcbmxldCBleHBlY3QgPSBjaGFpLmV4cGVjdDtcblxuZGVzY3JpYmUgKCdjb29raWVzLmpzJywgKCkgPT4ge1xuICBpdCgnc2hvdWxkIHByb3Blcmx5IGNyZWF0ZSBhIEpTIGNvb2tpZScsICgpID0+IHtcbiAgICBsZXQganNDb29raWUgPSBjb29raWUuY3JlYXRlSlNDb29raWUoJ2snLCAndicpO1xuICAgIGpzQ29va2llLnNob3VsZC5lcXVhbCgnaz12Jyk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgY3JlYXRlIEpTIGNvb2tpZSB3aXRoIG9wdGlvbnMgZ2l2ZW4nLCAoKSA9PiB7XG4gICAgbGV0IGpzQ29va2llID0gY29va2llLmNyZWF0ZUpTQ29va2llKCdrJywgJ3YnLCB7ZXhwaXJlczogJ1RodSwgMDEgSmFuIDIwNzAgMzo0OjcgR01UJywgcGF0aDogJy9saWInfSk7XG4gICAganNDb29raWUuc2hvdWxkLmVxdWFsKCdrPXY7IGV4cGlyZXM9VGh1LCAwMSBKYW4gMjA3MCAzOjQ6NyBHTVQ7IHBhdGg9L2xpYicpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGNyZWF0ZSBKU09OIGNvb2tpZSBvYmplY3Qgd2l0aCBvcHRpb25zIGdpdmVuJywgKCkgPT4ge1xuICAgIGxldCBqc0Nvb2tpZSA9IGNvb2tpZS5jcmVhdGVKV1BDb29raWUoJ2snLCAnaz12OyBleHBpcmVzPVRodSwgMDEgSmFuIDIwNzAgMzo0OjcgR01UOyBwYXRoPS9saWInKTtcbiAgICBleHBlY3QoanNDb29raWUpLnRvLmRlZXAuZXF1YWwoe25hbWU6ICdrJywgdmFsdWU6ICd2JywgZXhwaXJlczogJ1RodSwgMDEgSmFuIDIwNzAgMzo0OjcgR01UJywgcGF0aDogJy9saWInfSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcmV0dXJuIGNvcnJlY3QgdmFsdWUgZ2l2ZW4ga2V5JywgKCkgPT4ge1xuICAgIGxldCB2YWx1ZSA9IGNvb2tpZS5nZXRWYWx1ZSgnaycsICdrPXY7IGV4cGlyZXM9VGh1LCAwMSBKYW4gMjA3MCAzOjQ6NyBHTVQ7IHBhdGg9L2xpYicpO1xuICAgIHZhbHVlLnNob3VsZC5lcXVhbCgndicpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHBhcnNlIGVhY2ggZWxlbWVudCBvZiBzdHJpbmcgaW50byBhbiBvYmplY3QnLCAoKSA9PiB7XG4gICAgbGV0IHZhbHVlID0gY29va2llLmdldFZhbHVlKHVuZGVmaW5lZCwgJ2s9djsgZXhwaXJlcz1UaHUsIDAxIEphbiAyMDcwIDM6NDo3IEdNVDsgcGF0aD0vbGliJyk7XG4gICAgdmFsdWUuc2hvdWxkLmVxbCh7azogJ3YnLCBleHBpcmVzOiAnVGh1LCAwMSBKYW4gMjA3MCAzOjQ6NyBHTVQnLCBwYXRoOiAnL2xpYid9KTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBoYW5kbGUgcXVvdGVkIGNvb2tpZScsICgpID0+IHtcbiAgICBsZXQgdmFsdWUgPSBjb29raWUuZ2V0VmFsdWUoJ2snLCAnaz1cInZcIjsgZXhwaXJlcz1UaHUsIDAxIEphbiAyMDcwIDM6NDo3IEdNVDsgcGF0aD0vbGliJyk7XG4gICAgdmFsdWUuc2hvdWxkLmVxdWFsKCd2Jyk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgaGFuZGxlIHF1b3RlZCBjb29raWUgd2l0aCBpbnRlcm5hbCBxdW90ZXMnLCAoKSA9PiB7XG4gICAgbGV0IHZhbHVlID0gY29va2llLmdldFZhbHVlKCdrJywgJ2s9XCJ2XFxcInRcXFwiXCI7IGV4cGlyZXM9VGh1LCAwMSBKYW4gMjA3MCAzOjQ6NyBHTVQ7IHBhdGg9L2xpYicpO1xuICAgIHZhbHVlLnNob3VsZC5lcXVhbCgndlwidFwiJyk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcHJvcGVybHkgZGVjb2RlIGFuIGVuY29kZWQga2V5IHZhbHVlIHBhaXInLCAoKSA9PiB7XG4gICAgbGV0IHZhbHVlID0gY29va2llLmdldFZhbHVlKCcgYycsIGVuY29kZVVSSUNvbXBvbmVudCgnIGMnKSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCgnIHYnKSk7XG4gICAgdmFsdWUuc2hvdWxkLmVxdWFsKCcgdicpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHJldHVybiB1bmRlZmluZWQgZm9yIGFuIHVuZGVmaW5lZCBrZXkgdmFsdWUnLCAoKSA9PiB7XG4gICAgbGV0IHZhbHVlID0gY29va2llLmdldFZhbHVlKCdzb21lS2V5JywgJ2s9dicpO1xuICAgIGV4cGVjdCh2YWx1ZSkudG8uYmUudW5kZWZpbmVkO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGRlY29kZSBwbHVzZXMgaW4gdGhlIGNvb2tpZSBpbnRvIHNwYWNlcycsICgpID0+IHtcbiAgICBsZXQgdmFsdWUgPSBjb29raWUuZ2V0VmFsdWUoJ2MnLCAnYz1mb28rYmFyJyk7XG4gICAgdmFsdWUuc2hvdWxkLmVxdWFsKCdmb28gYmFyJyk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcmV0dXJuIHVuZGVmaW5lZCBhbmQgbm90IHRocm93IGFuIGV4Y2VwdGlvbiBvbiBhbiBpbnZhbGlkIFVSTCBlbmNvZGluZycsICgpID0+IHtcbiAgICBsZXQgdmFsdWUgPSBjb29raWUuZ2V0VmFsdWUoJ2JhZCcsICdiYWQ9Zm9vJScpO1xuICAgIGV4cGVjdCh2YWx1ZSkudG8uYmUudW5kZWZpbmVkO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGNyZWF0ZSBlbXB0eSBvYmplY3Qgd2hlbiBpdCBpcyBjYWxsZWQgYW5kIHRoZXJlIGlzIGFuIGVtcHR5IHN0cmluZycsICgpID0+IHtcbiAgICBjb29raWUuY3JlYXRlSldQQ29va2llKCkuc2hvdWxkLmRlZXAuZXF1YWwoe30pO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHByb3Blcmx5IGNvbnZlcnQgdGhlIHZhbHVlIHdoZW4gYSBjb252ZXJ0ZXIgaXMgc3VwcGxpZWQnLCAoKSA9PiB7XG4gICAgbGV0IHZhbCA9IGNvb2tpZS5nZXRWYWx1ZSgnYycsICdjPScgKyAxLCBOdW1iZXIpO1xuICAgIHZhbC5zaG91bGQuZXF1YWwoMSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcmV0dXJuIGEgY29va2llIHRoYXQgZXhwaXJlcyBvbiAwMSBKYW4gMTk3MCB3aGVuIHJlbW92ZUNvb2tpZSBpcyBjYWxsZWQnLCAoKSA9PiB7XG4gICAgIGNvb2tpZS5leHBpcmVDb29raWUoJ2MnKS5zaG91bGQuaW5jbHVkZSgnZXhwaXJlcz1UaHUsIDAxIEphbiAxOTcwIDAwOjAwOjAwIEdNVCcpO1xuICB9KTtcbn0pO1xuXG4iXX0=