/*
 * derived from jQuery Cookie Plugin v1.4.1
 * https://github.com/carhartl/jquery-cookie
 */

// needed to communicate/translate between JSONWire cookies and regular JavaScript cookies

'use strict';

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _appiumLogger = require('appium-logger');

var log = (0, _appiumLogger.getLogger)('Cookie');

// parses the value if needed and converts the value if a converter is provided
// internal function, not exported
function convertCookie(value, converter) {
  if (value.indexOf('"') === 0) {
    // this is a quoted cookied according to RFC2068
    // remove enclosing quotes and internal quotes and backslashes
    value = value.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, '\\');
  }

  var parsedValue = undefined;
  try {
    parsedValue = decodeURIComponent(value.replace(/\+/g, ' '));
  } catch (e) {
    // no need to fail if we can't decode
    log.warn(e);
  }

  return converter ? converter(parsedValue) : parsedValue;
}

// takes arguments given and creates a JavaScript Cookie
function createJSCookie(key, value) {
  var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

  return [encodeURIComponent(key), '=', value, options.expires ? '; expires=' + options.expires : '', options.path ? '; path=' + options.path : '', options.domain ? '; domain=' + options.domain : '', options.secure ? '; secure' : ''].join('');
}

// takes the JavaScript cookieString and translates it into a JSONWire formatted cookie
function createJWPCookie(key, cookieString) {
  var converter = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

  var result = {};
  var cookies = cookieString ? cookieString.split('; ') : [];
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = _getIterator(cookies), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var cookie = _step.value;

      var parts = cookie.split('=');

      // get the first and second element as name and value
      var _name = decodeURIComponent(parts.shift());
      var val = parts[0];

      // if name is key, this is the central element of the cookie, so add as `name`
      // otherwise it is an optional element
      if (key && key === _name) {
        result.name = key;
        result.value = convertCookie(val, converter);
      } else {
        result[_name] = convertCookie(val, converter);
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator['return']) {
        _iterator['return']();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return result;
}

// takes a JavaScript cookiestring and parses it for the value given the key
function getValue(key, cookieString) {
  var converter = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];

  var result = createJWPCookie(key, cookieString, converter);

  // if `key` is undefined we want the entire cookie
  return _lodash2['default'].isUndefined(key) ? result : result.value;
}

// returns a cookie that expires on 01 Jan 1970
// assign the returned cookie to an existing cookie to delete that cookie
function expireCookie(key, options) {
  // override `expires` in `options`, and then make the cookie
  return createJSCookie(key, '', _lodash2['default'].assign({}, options, {
    expires: 'Thu, 01 Jan 1970 00:00:00 GMT'
  }));
}

exports.createJSCookie = createJSCookie;
exports.createJWPCookie = createJWPCookie;
exports.getValue = getValue;
exports.expireCookie = expireCookie;
//# sourceMappingURL=data:application/json;base64,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QUUsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDO0NBQ25EOzs7O0FBS0QsU0FBUyxZQUFZLENBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRTs7QUFFbkMsU0FBTyxjQUFjLENBQUMsR0FBRyxFQUFFLEVBQUUsRUFBRSxvQkFBRSxNQUFNLENBQUMsRUFBRSxFQUFFLE9BQU8sRUFBRTtBQUNuRCxXQUFPLEVBQUUsK0JBQStCO0dBQ3pDLENBQUMsQ0FBQyxDQUFDO0NBQ0w7O1FBRVEsY0FBYyxHQUFkLGNBQWM7UUFBRSxlQUFlLEdBQWYsZUFBZTtRQUFFLFFBQVEsR0FBUixRQUFRO1FBQUUsWUFBWSxHQUFaLFlBQVkiLCJmaWxlIjoibGliL2Nvb2tpZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBkZXJpdmVkIGZyb20galF1ZXJ5IENvb2tpZSBQbHVnaW4gdjEuNC4xXG4gKiBodHRwczovL2dpdGh1Yi5jb20vY2FyaGFydGwvanF1ZXJ5LWNvb2tpZVxuICovXG5cbiAvLyBuZWVkZWQgdG8gY29tbXVuaWNhdGUvdHJhbnNsYXRlIGJldHdlZW4gSlNPTldpcmUgY29va2llcyBhbmQgcmVndWxhciBKYXZhU2NyaXB0IGNvb2tpZXNcblxuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IGdldExvZ2dlciB9IGZyb20gJ2FwcGl1bS1sb2dnZXInO1xuXG5cbmNvbnN0IGxvZyA9IGdldExvZ2dlcignQ29va2llJyk7XG5cbi8vIHBhcnNlcyB0aGUgdmFsdWUgaWYgbmVlZGVkIGFuZCBjb252ZXJ0cyB0aGUgdmFsdWUgaWYgYSBjb252ZXJ0ZXIgaXMgcHJvdmlkZWRcbi8vIGludGVybmFsIGZ1bmN0aW9uLCBub3QgZXhwb3J0ZWRcbmZ1bmN0aW9uIGNvbnZlcnRDb29raWUgKHZhbHVlLCBjb252ZXJ0ZXIpIHtcbiAgaWYgKHZhbHVlLmluZGV4T2YoJ1wiJykgPT09IDApIHtcbiAgICAvLyB0aGlzIGlzIGEgcXVvdGVkIGNvb2tpZWQgYWNjb3JkaW5nIHRvIFJGQzIwNjhcbiAgICAvLyByZW1vdmUgZW5jbG9zaW5nIHF1b3RlcyBhbmQgaW50ZXJuYWwgcXVvdGVzIGFuZCBiYWNrc2xhc2hlc1xuICAgIHZhbHVlID0gdmFsdWUuc2xpY2UoMSwgLTEpLnJlcGxhY2UoL1xcXFxcIi9nLCAnXCInKS5yZXBsYWNlKC9cXFxcXFxcXC9nLCAnXFxcXCcpO1xuICB9XG5cbiAgbGV0IHBhcnNlZFZhbHVlO1xuICB0cnkge1xuICAgIHBhcnNlZFZhbHVlID0gZGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlLnJlcGxhY2UoL1xcKy9nLCAnICcpKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIG5vIG5lZWQgdG8gZmFpbCBpZiB3ZSBjYW4ndCBkZWNvZGVcbiAgICBsb2cud2FybihlKTtcbiAgfVxuXG4gIHJldHVybiBjb252ZXJ0ZXIgPyBjb252ZXJ0ZXIocGFyc2VkVmFsdWUpIDogcGFyc2VkVmFsdWU7XG59XG5cbi8vIHRha2VzIGFyZ3VtZW50cyBnaXZlbiBhbmQgY3JlYXRlcyBhIEphdmFTY3JpcHQgQ29va2llXG5mdW5jdGlvbiBjcmVhdGVKU0Nvb2tpZSAoa2V5LCB2YWx1ZSwgb3B0aW9ucyA9IHt9KSB7XG4gIHJldHVybiBbXG4gICAgZW5jb2RlVVJJQ29tcG9uZW50KGtleSksICc9JywgdmFsdWUsXG4gICAgb3B0aW9ucy5leHBpcmVzID8gYDsgZXhwaXJlcz0ke29wdGlvbnMuZXhwaXJlc31gIDogJycsXG4gICAgb3B0aW9ucy5wYXRoICAgID8gYDsgcGF0aD0ke29wdGlvbnMucGF0aH1gICAgICAgIDogJycsXG4gICAgb3B0aW9ucy5kb21haW4gID8gYDsgZG9tYWluPSR7b3B0aW9ucy5kb21haW59YCAgIDogJycsXG4gICAgb3B0aW9ucy5zZWN1cmUgID8gJzsgc2VjdXJlJyA6ICcnXG4gIF0uam9pbignJyk7XG59XG5cbi8vIHRha2VzIHRoZSBKYXZhU2NyaXB0IGNvb2tpZVN0cmluZyBhbmQgdHJhbnNsYXRlcyBpdCBpbnRvIGEgSlNPTldpcmUgZm9ybWF0dGVkIGNvb2tpZVxuZnVuY3Rpb24gY3JlYXRlSldQQ29va2llIChrZXksIGNvb2tpZVN0cmluZywgY29udmVydGVyID0gbnVsbCkge1xuICBsZXQgcmVzdWx0ID0ge307XG4gIGxldCBjb29raWVzID0gY29va2llU3RyaW5nID8gY29va2llU3RyaW5nLnNwbGl0KCc7ICcpIDogW107XG4gIGZvciAobGV0IGNvb2tpZSBvZiBjb29raWVzKSB7XG4gICAgbGV0IHBhcnRzID0gY29va2llLnNwbGl0KCc9Jyk7XG5cbiAgICAvLyBnZXQgdGhlIGZpcnN0IGFuZCBzZWNvbmQgZWxlbWVudCBhcyBuYW1lIGFuZCB2YWx1ZVxuICAgIGxldCBuYW1lID0gZGVjb2RlVVJJQ29tcG9uZW50KHBhcnRzLnNoaWZ0KCkpO1xuICAgIGxldCB2YWwgPSBwYXJ0c1swXTtcblxuICAgIC8vIGlmIG5hbWUgaXMga2V5LCB0aGlzIGlzIHRoZSBjZW50cmFsIGVsZW1lbnQgb2YgdGhlIGNvb2tpZSwgc28gYWRkIGFzIGBuYW1lYFxuICAgIC8vIG90aGVyd2lzZSBpdCBpcyBhbiBvcHRpb25hbCBlbGVtZW50XG4gICAgaWYgKGtleSAmJiBrZXkgPT09IG5hbWUpIHtcbiAgICAgIHJlc3VsdC5uYW1lID0ga2V5O1xuICAgICAgcmVzdWx0LnZhbHVlID0gY29udmVydENvb2tpZSh2YWwsIGNvbnZlcnRlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtuYW1lXSA9IGNvbnZlcnRDb29raWUodmFsLCBjb252ZXJ0ZXIpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vLyB0YWtlcyBhIEphdmFTY3JpcHQgY29va2llc3RyaW5nIGFuZCBwYXJzZXMgaXQgZm9yIHRoZSB2YWx1ZSBnaXZlbiB0aGUga2V5XG5mdW5jdGlvbiBnZXRWYWx1ZSAoa2V5LCBjb29raWVTdHJpbmcsIGNvbnZlcnRlciA9IG51bGwpIHtcbiAgbGV0IHJlc3VsdCA9IGNyZWF0ZUpXUENvb2tpZShrZXksIGNvb2tpZVN0cmluZywgY29udmVydGVyKTtcblxuICAvLyBpZiBga2V5YCBpcyB1bmRlZmluZWQgd2Ugd2FudCB0aGUgZW50aXJlIGNvb2tpZVxuICByZXR1cm4gXy5pc1VuZGVmaW5lZChrZXkpID8gcmVzdWx0IDogcmVzdWx0LnZhbHVlO1xufVxuXG5cbi8vIHJldHVybnMgYSBjb29raWUgdGhhdCBleHBpcmVzIG9uIDAxIEphbiAxOTcwXG4vLyBhc3NpZ24gdGhlIHJldHVybmVkIGNvb2tpZSB0byBhbiBleGlzdGluZyBjb29raWUgdG8gZGVsZXRlIHRoYXQgY29va2llXG5mdW5jdGlvbiBleHBpcmVDb29raWUgKGtleSwgb3B0aW9ucykge1xuICAvLyBvdmVycmlkZSBgZXhwaXJlc2AgaW4gYG9wdGlvbnNgLCBhbmQgdGhlbiBtYWtlIHRoZSBjb29raWVcbiAgcmV0dXJuIGNyZWF0ZUpTQ29va2llKGtleSwgJycsIF8uYXNzaWduKHt9LCBvcHRpb25zLCB7XG4gICAgZXhwaXJlczogJ1RodSwgMDEgSmFuIDE5NzAgMDA6MDA6MDAgR01UJ1xuICB9KSk7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZUpTQ29va2llLCBjcmVhdGVKV1BDb29raWUsIGdldFZhbHVlLCBleHBpcmVDb29raWUgfTtcbiJdfQ==