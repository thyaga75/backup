'use strict';

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function isNumber(o) {
  return _lodash2['default'].isNumber(o) || !_lodash2['default'].isNaN(parseInt(o)) || !_lodash2['default'].isNaN(parseFloat(o));
}

function msValidator(ms) {
  if (!_lodash2['default'].isNumber(ms) || ms < 0) {
    throw new Error('Wait ms must be a number equal to 0 or greater');
  }
}

var validators = {
  setUrl: function setUrl(url) {
    // either an `xyz://` or `about:` scheme is allowed
    if (!url || !url.match(/^([a-zA-Z0-9_-]+:\/\/)|(about:)/)) {
      throw new Error('Url or Uri must start with <scheme>://');
    }
  },
  implicitWait: function implicitWait(ms) {
    msValidator(ms);
  },
  asyncScriptTimeout: function asyncScriptTimeout(ms) {
    msValidator(ms);
  },
  timeouts: function timeouts(type, ms) {
    msValidator(ms);
    if (!_lodash2['default'].contains(['script', 'implicit', 'page load', 'command'], type)) {
      throw new Error('\'' + type + '\' is not a valid timeout type');
    }
  },
  clickCurrent: function clickCurrent(button) {
    if (!(isNumber(button) || _lodash2['default'].isUndefined(button)) || button < 0 || button > 2) {
      throw new Error('Click button must be 0, 1, or 2');
    }
  },
  setNetworkConnection: function setNetworkConnection(type) {
    if (!isNumber(type) || [0, 1, 2, 4, 6].indexOf(type) === -1) {
      throw new Error('Network type must be one of 0, 1, 2, 4, 6');
    }
  }
};

exports.validators = validators;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi92YWxpZGF0b3JzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O3NCQUFjLFFBQVE7Ozs7QUFHdEIsU0FBUyxRQUFRLENBQUUsQ0FBQyxFQUFFO0FBQ3BCLFNBQU8sb0JBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsb0JBQUUsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsb0JBQUUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQzFFOztBQUVELFNBQVMsV0FBVyxDQUFFLEVBQUUsRUFBRTtBQUN4QixNQUFJLENBQUMsb0JBQUUsUUFBUSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLEVBQUU7QUFDN0IsVUFBTSxJQUFJLEtBQUssQ0FBQyxnREFBZ0QsQ0FBQyxDQUFDO0dBQ25FO0NBQ0Y7O0FBRUQsSUFBTSxVQUFVLEdBQUc7QUFDakIsUUFBTSxFQUFFLGdCQUFDLEdBQUcsRUFBSzs7QUFFZixRQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxpQ0FBaUMsQ0FBQyxFQUFFO0FBQ3pELFlBQU0sSUFBSSxLQUFLLENBQUMsd0NBQXdDLENBQUMsQ0FBQztLQUMzRDtHQUNGO0FBQ0QsY0FBWSxFQUFFLHNCQUFDLEVBQUUsRUFBSztBQUNwQixlQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7R0FDakI7QUFDRCxvQkFBa0IsRUFBRSw0QkFBQyxFQUFFLEVBQUs7QUFDMUIsZUFBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0dBQ2pCO0FBQ0QsVUFBUSxFQUFFLGtCQUFDLElBQUksRUFBRSxFQUFFLEVBQUs7QUFDdEIsZUFBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2hCLFFBQUksQ0FBQyxvQkFBRSxRQUFRLENBQUMsQ0FBQyxRQUFRLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxTQUFTLENBQUMsRUFBRSxJQUFJLENBQUMsRUFBRTtBQUNyRSxZQUFNLElBQUksS0FBSyxRQUFLLElBQUksb0NBQWdDLENBQUM7S0FDMUQ7R0FDRjtBQUNELGNBQVksRUFBRSxzQkFBQyxNQUFNLEVBQUs7QUFDeEIsUUFBSSxFQUFFLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxvQkFBRSxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUEsQUFBQyxJQUFLLE1BQU0sR0FBRyxDQUFDLElBQUksTUFBTSxHQUFHLENBQUMsQUFBQyxFQUFFO0FBQzlFLFlBQU0sSUFBSSxLQUFLLENBQUMsaUNBQWlDLENBQUMsQ0FBQztLQUNwRDtHQUNGO0FBQ0Qsc0JBQW9CLEVBQUUsOEJBQUMsSUFBSSxFQUFLO0FBQzlCLFFBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO0FBQzNELFlBQU0sSUFBSSxLQUFLLENBQUMsMkNBQTJDLENBQUMsQ0FBQztLQUM5RDtHQUNGO0NBQ0YsQ0FBQzs7UUFFTyxVQUFVLEdBQVYsVUFBVSIsImZpbGUiOiJsaWIvdmFsaWRhdG9ycy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5cblxuZnVuY3Rpb24gaXNOdW1iZXIgKG8pIHtcbiAgcmV0dXJuIF8uaXNOdW1iZXIobykgfHwgIV8uaXNOYU4ocGFyc2VJbnQobykpIHx8ICFfLmlzTmFOKHBhcnNlRmxvYXQobykpO1xufVxuXG5mdW5jdGlvbiBtc1ZhbGlkYXRvciAobXMpIHtcbiAgaWYgKCFfLmlzTnVtYmVyKG1zKSB8fCBtcyA8IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1dhaXQgbXMgbXVzdCBiZSBhIG51bWJlciBlcXVhbCB0byAwIG9yIGdyZWF0ZXInKTtcbiAgfVxufVxuXG5jb25zdCB2YWxpZGF0b3JzID0ge1xuICBzZXRVcmw6ICh1cmwpID0+IHtcbiAgICAvLyBlaXRoZXIgYW4gYHh5ejovL2Agb3IgYGFib3V0OmAgc2NoZW1lIGlzIGFsbG93ZWRcbiAgICBpZiAoIXVybCB8fCAhdXJsLm1hdGNoKC9eKFthLXpBLVowLTlfLV0rOlxcL1xcLyl8KGFib3V0OikvKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVcmwgb3IgVXJpIG11c3Qgc3RhcnQgd2l0aCA8c2NoZW1lPjovLycpO1xuICAgIH1cbiAgfSxcbiAgaW1wbGljaXRXYWl0OiAobXMpID0+IHtcbiAgICBtc1ZhbGlkYXRvcihtcyk7XG4gIH0sXG4gIGFzeW5jU2NyaXB0VGltZW91dDogKG1zKSA9PiB7XG4gICAgbXNWYWxpZGF0b3IobXMpO1xuICB9LFxuICB0aW1lb3V0czogKHR5cGUsIG1zKSA9PiB7XG4gICAgbXNWYWxpZGF0b3IobXMpO1xuICAgIGlmICghXy5jb250YWlucyhbJ3NjcmlwdCcsICdpbXBsaWNpdCcsICdwYWdlIGxvYWQnLCAnY29tbWFuZCddLCB0eXBlKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGAnJHt0eXBlfScgaXMgbm90IGEgdmFsaWQgdGltZW91dCB0eXBlYCk7XG4gICAgfVxuICB9LFxuICBjbGlja0N1cnJlbnQ6IChidXR0b24pID0+IHtcbiAgICBpZiAoIShpc051bWJlcihidXR0b24pIHx8IF8uaXNVbmRlZmluZWQoYnV0dG9uKSkgfHwgKGJ1dHRvbiA8IDAgfHwgYnV0dG9uID4gMikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ2xpY2sgYnV0dG9uIG11c3QgYmUgMCwgMSwgb3IgMicpO1xuICAgIH1cbiAgfSxcbiAgc2V0TmV0d29ya0Nvbm5lY3Rpb246ICh0eXBlKSA9PiB7XG4gICAgaWYgKCFpc051bWJlcih0eXBlKSB8fCBbMCwgMSwgMiwgNCwgNl0uaW5kZXhPZih0eXBlKSA9PT0gLTEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTmV0d29yayB0eXBlIG11c3QgYmUgb25lIG9mIDAsIDEsIDIsIDQsIDYnKTtcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCB7IHZhbGlkYXRvcnMgfTtcbiJdfQ==