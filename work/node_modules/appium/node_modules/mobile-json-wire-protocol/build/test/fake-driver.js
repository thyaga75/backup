'use strict';

var _get = require('babel-runtime/helpers/get')['default'];

var _inherits = require('babel-runtime/helpers/inherits')['default'];

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _index = require('../index');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var FakeDriver = (function (_MobileJsonWireProtocol) {
  _inherits(FakeDriver, _MobileJsonWireProtocol);

  function FakeDriver() {
    _classCallCheck(this, FakeDriver);

    _get(Object.getPrototypeOf(FakeDriver.prototype), 'constructor', this).call(this);
    this.sessionId = null;
    this.jwpProxyActive = false;
  }

  _createClass(FakeDriver, [{
    key: 'sessionExists',
    value: function sessionExists(sessionId) {
      if (!sessionId) return false;
      return sessionId === this.sessionId;
    }
  }, {
    key: 'driverForSession',
    value: function driverForSession() /*sessionId*/{
      return this;
    }
  }, {
    key: 'createSession',
    value: function createSession(desiredCapabilities) {
      var requiredCapabilities = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
      return _regeneratorRuntime.async(function createSession$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            this.sessionId = "1234";
            this.desiredCapabilities = desiredCapabilities;
            this.requiredCapabilities = requiredCapabilities;
            return context$2$0.abrupt('return', [this.sessionId, _lodash2['default'].extend({}, desiredCapabilities, requiredCapabilities)]);

          case 4:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'executeCommand',
    value: function executeCommand(cmd) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      return _regeneratorRuntime.async(function executeCommand$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            if (this[cmd]) {
              context$2$0.next = 2;
              break;
            }

            throw new _index.errors.NotYetImplementedError();

          case 2:
            context$2$0.next = 4;
            return _regeneratorRuntime.awrap(this[cmd].apply(this, args));

          case 4:
            return context$2$0.abrupt('return', context$2$0.sent);

          case 5:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'deleteSession',
    value: function deleteSession() {
      return _regeneratorRuntime.async(function deleteSession$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            this.jwpProxyActive = false;
            this.sessionId = null;

          case 2:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'getStatus',
    value: function getStatus() {
      return _regeneratorRuntime.async(function getStatus$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            return context$2$0.abrupt('return', "I'm fine");

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'setUrl',
    value: function setUrl(url) {
      return _regeneratorRuntime.async(function setUrl$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            return context$2$0.abrupt('return', 'Navigated to: ' + url);

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'getUrl',
    value: function getUrl() {
      return _regeneratorRuntime.async(function getUrl$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            return context$2$0.abrupt('return', "http://foobar.com");

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'back',
    value: function back(sessionId) {
      return _regeneratorRuntime.async(function back$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            return context$2$0.abrupt('return', sessionId);

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'forward',
    value: function forward() {
      return _regeneratorRuntime.async(function forward$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'refresh',
    value: function refresh() {
      return _regeneratorRuntime.async(function refresh$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            throw new Error('Too Fresh!');

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'getSession',
    value: function getSession() {
      return _regeneratorRuntime.async(function getSession$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            throw new _index.errors.NoSuchDriverError();

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'click',
    value: function click(elementId, sessionId) {
      return _regeneratorRuntime.async(function click$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            return context$2$0.abrupt('return', [elementId, sessionId]);

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'implicitWait',
    value: function implicitWait(ms) {
      return _regeneratorRuntime.async(function implicitWait$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            return context$2$0.abrupt('return', ms);

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'clickCurrent',
    value: function clickCurrent(button) {
      return _regeneratorRuntime.async(function clickCurrent$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            return context$2$0.abrupt('return', button);

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'setNetworkConnection',
    value: function setNetworkConnection(type) {
      return _regeneratorRuntime.async(function setNetworkConnection$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            return context$2$0.abrupt('return', type);

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'moveTo',
    value: function moveTo(element, xOffset, yOffset) {
      return _regeneratorRuntime.async(function moveTo$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            return context$2$0.abrupt('return', [element, xOffset, yOffset]);

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'getText',
    value: function getText() {
      return _regeneratorRuntime.async(function getText$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            return context$2$0.abrupt('return', "");

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'getAttribute',
    value: function getAttribute(attr, elementId, sessionId) {
      return _regeneratorRuntime.async(function getAttribute$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            return context$2$0.abrupt('return', [attr, elementId, sessionId]);

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'setValue',
    value: function setValue(elementId, value) {
      return _regeneratorRuntime.async(function setValue$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            return context$2$0.abrupt('return', value);

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'performTouch',
    value: function performTouch() {
      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return _regeneratorRuntime.async(function performTouch$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            return context$2$0.abrupt('return', args);

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'setFrame',
    value: function setFrame(frameId) {
      return _regeneratorRuntime.async(function setFrame$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            return context$2$0.abrupt('return', frameId);

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'removeApp',
    value: function removeApp(app) {
      return _regeneratorRuntime.async(function removeApp$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            return context$2$0.abrupt('return', app);

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'proxyActive',
    value: function proxyActive() /*sessionId*/{
      return false;
    }
  }, {
    key: 'getProxyAvoidList',
    value: function getProxyAvoidList() /*sessionId*/{
      return [];
    }
  }, {
    key: 'canProxy',
    value: function canProxy() /*sessionId*/{
      return false;
    }
  }]);

  return FakeDriver;
})(_index.MobileJsonWireProtocol);

exports.FakeDriver = FakeDriver;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZmFrZS1kcml2ZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O3FCQUF1QixVQUFVOztzQkFDbkIsUUFBUTs7OztJQUdoQixVQUFVO1lBQVYsVUFBVTs7QUFFRixXQUZSLFVBQVUsR0FFQzswQkFGWCxVQUFVOztBQUdaLCtCQUhFLFVBQVUsNkNBR0o7QUFDUixRQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztBQUN0QixRQUFJLENBQUMsY0FBYyxHQUFHLEtBQUssQ0FBQztHQUM3Qjs7ZUFORyxVQUFVOztXQVFBLHVCQUFDLFNBQVMsRUFBRTtBQUN4QixVQUFJLENBQUMsU0FBUyxFQUFFLE9BQU8sS0FBSyxDQUFDO0FBQzdCLGFBQU8sU0FBUyxLQUFLLElBQUksQ0FBQyxTQUFTLENBQUM7S0FDckM7OztXQUVnQix5Q0FBZ0I7QUFDL0IsYUFBTyxJQUFJLENBQUM7S0FDYjs7O1dBRW1CLHVCQUFDLG1CQUFtQjtVQUFFLG9CQUFvQix5REFBQyxFQUFFOzs7O0FBQy9ELGdCQUFJLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQztBQUN4QixnQkFBSSxDQUFDLG1CQUFtQixHQUFHLG1CQUFtQixDQUFDO0FBQy9DLGdCQUFJLENBQUMsb0JBQW9CLEdBQUcsb0JBQW9CLENBQUM7Z0RBQzFDLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxvQkFBRSxNQUFNLENBQUMsRUFBRSxFQUFFLG1CQUFtQixFQUFFLG9CQUFvQixDQUFDLENBQUM7Ozs7Ozs7S0FDakY7OztXQUVvQix3QkFBQyxHQUFHO3dDQUFLLElBQUk7QUFBSixZQUFJOzs7Ozs7Z0JBQzNCLElBQUksQ0FBQyxHQUFHLENBQUM7Ozs7O2tCQUNOLElBQUksY0FBTyxzQkFBc0IsRUFBRTs7Ozs2Q0FFOUIsSUFBSSxDQUFDLEdBQUcsT0FBQyxDQUFULElBQUksRUFBUyxJQUFJLENBQUM7Ozs7Ozs7Ozs7S0FDaEM7OztXQUVtQjs7OztBQUNsQixnQkFBSSxDQUFDLGNBQWMsR0FBRyxLQUFLLENBQUM7QUFDNUIsZ0JBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDOzs7Ozs7O0tBQ3ZCOzs7V0FFZTs7OztnREFDUCxVQUFVOzs7Ozs7O0tBQ2xCOzs7V0FFWSxnQkFBQyxHQUFHOzs7O21FQUNTLEdBQUc7Ozs7Ozs7S0FDNUI7OztXQUVZOzs7O2dEQUNKLG1CQUFtQjs7Ozs7OztLQUMzQjs7O1dBRVUsY0FBQyxTQUFTOzs7O2dEQUNaLFNBQVM7Ozs7Ozs7S0FDakI7OztXQUVhOzs7Ozs7OztLQUFLOzs7V0FFTDs7OztrQkFDTixJQUFJLEtBQUssQ0FBQyxZQUFZLENBQUM7Ozs7Ozs7S0FDOUI7OztXQUVnQjs7OztrQkFDVCxJQUFJLGNBQU8saUJBQWlCLEVBQUU7Ozs7Ozs7S0FDckM7OztXQUVXLGVBQUMsU0FBUyxFQUFFLFNBQVM7Ozs7Z0RBQ3hCLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQzs7Ozs7OztLQUM5Qjs7O1dBRWtCLHNCQUFDLEVBQUU7Ozs7Z0RBQ2IsRUFBRTs7Ozs7OztLQUNWOzs7V0FFa0Isc0JBQUMsTUFBTTs7OztnREFDakIsTUFBTTs7Ozs7OztLQUNkOzs7V0FFMEIsOEJBQUMsSUFBSTs7OztnREFDdkIsSUFBSTs7Ozs7OztLQUNaOzs7V0FFWSxnQkFBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU87Ozs7Z0RBQzlCLENBQUMsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUM7Ozs7Ozs7S0FDbkM7OztXQUVhOzs7O2dEQUNMLEVBQUU7Ozs7Ozs7S0FDVjs7O1dBRWtCLHNCQUFDLElBQUksRUFBRSxTQUFTLEVBQUUsU0FBUzs7OztnREFDckMsQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLFNBQVMsQ0FBQzs7Ozs7OztLQUNwQzs7O1dBRWMsa0JBQUMsU0FBUyxFQUFFLEtBQUs7Ozs7Z0RBQ3ZCLEtBQUs7Ozs7Ozs7S0FDYjs7O1dBRWtCO3lDQUFJLElBQUk7QUFBSixZQUFJOzs7Ozs7Z0RBQ2xCLElBQUk7Ozs7Ozs7S0FDWjs7O1dBRWMsa0JBQUMsT0FBTzs7OztnREFDZCxPQUFPOzs7Ozs7O0tBQ2Y7OztXQUVlLG1CQUFDLEdBQUc7Ozs7Z0RBQ1gsR0FBRzs7Ozs7OztLQUNYOzs7V0FFVyxvQ0FBZ0I7QUFDMUIsYUFBTyxLQUFLLENBQUM7S0FDZDs7O1dBRWlCLDBDQUFnQjtBQUNoQyxhQUFPLEVBQUUsQ0FBQztLQUNYOzs7V0FFUSxpQ0FBZ0I7QUFDdkIsYUFBTyxLQUFLLENBQUM7S0FDZDs7O1NBcEhHLFVBQVU7OztRQXVIUCxVQUFVLEdBQVYsVUFBVSIsImZpbGUiOiJ0ZXN0L2Zha2UtZHJpdmVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZXJyb3JzIH0gZnJvbSAnLi4vaW5kZXgnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IE1vYmlsZUpzb25XaXJlUHJvdG9jb2wgfSBmcm9tICcuLi9pbmRleCc7XG5cbmNsYXNzIEZha2VEcml2ZXIgZXh0ZW5kcyBNb2JpbGVKc29uV2lyZVByb3RvY29sIHtcblxuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLnNlc3Npb25JZCA9IG51bGw7XG4gICAgdGhpcy5qd3BQcm94eUFjdGl2ZSA9IGZhbHNlO1xuICB9XG5cbiAgc2Vzc2lvbkV4aXN0cyAoc2Vzc2lvbklkKSB7XG4gICAgaWYgKCFzZXNzaW9uSWQpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gc2Vzc2lvbklkID09PSB0aGlzLnNlc3Npb25JZDtcbiAgfVxuXG4gIGRyaXZlckZvclNlc3Npb24gKC8qc2Vzc2lvbklkKi8pIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGFzeW5jIGNyZWF0ZVNlc3Npb24gKGRlc2lyZWRDYXBhYmlsaXRpZXMsIHJlcXVpcmVkQ2FwYWJpbGl0aWVzPXt9KSB7XG4gICAgdGhpcy5zZXNzaW9uSWQgPSBcIjEyMzRcIjtcbiAgICB0aGlzLmRlc2lyZWRDYXBhYmlsaXRpZXMgPSBkZXNpcmVkQ2FwYWJpbGl0aWVzO1xuICAgIHRoaXMucmVxdWlyZWRDYXBhYmlsaXRpZXMgPSByZXF1aXJlZENhcGFiaWxpdGllcztcbiAgICByZXR1cm4gW3RoaXMuc2Vzc2lvbklkLCBfLmV4dGVuZCh7fSwgZGVzaXJlZENhcGFiaWxpdGllcywgcmVxdWlyZWRDYXBhYmlsaXRpZXMpXTtcbiAgfVxuXG4gIGFzeW5jIGV4ZWN1dGVDb21tYW5kIChjbWQsIC4uLmFyZ3MpIHtcbiAgICBpZiAoIXRoaXNbY21kXSkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5Ob3RZZXRJbXBsZW1lbnRlZEVycm9yKCk7XG4gICAgfVxuICAgIHJldHVybiBhd2FpdCB0aGlzW2NtZF0oLi4uYXJncyk7XG4gIH1cblxuICBhc3luYyBkZWxldGVTZXNzaW9uICgpIHtcbiAgICB0aGlzLmp3cFByb3h5QWN0aXZlID0gZmFsc2U7XG4gICAgdGhpcy5zZXNzaW9uSWQgPSBudWxsO1xuICB9XG5cbiAgYXN5bmMgZ2V0U3RhdHVzICgpIHtcbiAgICByZXR1cm4gXCJJJ20gZmluZVwiO1xuICB9XG5cbiAgYXN5bmMgc2V0VXJsICh1cmwpIHtcbiAgICByZXR1cm4gYE5hdmlnYXRlZCB0bzogJHt1cmx9YDtcbiAgfVxuXG4gIGFzeW5jIGdldFVybCAoKSB7XG4gICAgcmV0dXJuIFwiaHR0cDovL2Zvb2Jhci5jb21cIjtcbiAgfVxuXG4gIGFzeW5jIGJhY2sgKHNlc3Npb25JZCkge1xuICAgIHJldHVybiBzZXNzaW9uSWQ7XG4gIH1cblxuICBhc3luYyBmb3J3YXJkICgpIHt9XG5cbiAgYXN5bmMgcmVmcmVzaCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUb28gRnJlc2ghJyk7XG4gIH1cblxuICBhc3luYyBnZXRTZXNzaW9uICgpIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLk5vU3VjaERyaXZlckVycm9yKCk7XG4gIH1cblxuICBhc3luYyBjbGljayAoZWxlbWVudElkLCBzZXNzaW9uSWQpIHtcbiAgICByZXR1cm4gW2VsZW1lbnRJZCwgc2Vzc2lvbklkXTtcbiAgfVxuXG4gIGFzeW5jIGltcGxpY2l0V2FpdCAobXMpIHtcbiAgICByZXR1cm4gbXM7XG4gIH1cblxuICBhc3luYyBjbGlja0N1cnJlbnQgKGJ1dHRvbikge1xuICAgIHJldHVybiBidXR0b247XG4gIH1cblxuICBhc3luYyBzZXROZXR3b3JrQ29ubmVjdGlvbiAodHlwZSkge1xuICAgIHJldHVybiB0eXBlO1xuICB9XG5cbiAgYXN5bmMgbW92ZVRvIChlbGVtZW50LCB4T2Zmc2V0LCB5T2Zmc2V0KSB7XG4gICAgcmV0dXJuIFtlbGVtZW50LCB4T2Zmc2V0LCB5T2Zmc2V0XTtcbiAgfVxuXG4gIGFzeW5jIGdldFRleHQgKCkge1xuICAgIHJldHVybiBcIlwiO1xuICB9XG5cbiAgYXN5bmMgZ2V0QXR0cmlidXRlIChhdHRyLCBlbGVtZW50SWQsIHNlc3Npb25JZCkge1xuICAgIHJldHVybiBbYXR0ciwgZWxlbWVudElkLCBzZXNzaW9uSWRdO1xuICB9XG5cbiAgYXN5bmMgc2V0VmFsdWUgKGVsZW1lbnRJZCwgdmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICBhc3luYyBwZXJmb3JtVG91Y2ggKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gYXJncztcbiAgfVxuXG4gIGFzeW5jIHNldEZyYW1lIChmcmFtZUlkKSB7XG4gICAgcmV0dXJuIGZyYW1lSWQ7XG4gIH1cblxuICBhc3luYyByZW1vdmVBcHAgKGFwcCkge1xuICAgIHJldHVybiBhcHA7XG4gIH1cblxuICBwcm94eUFjdGl2ZSAoLypzZXNzaW9uSWQqLykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGdldFByb3h5QXZvaWRMaXN0ICgvKnNlc3Npb25JZCovKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgY2FuUHJveHkgKC8qc2Vzc2lvbklkKi8pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZXhwb3J0IHsgRmFrZURyaXZlciB9O1xuIl19