'use strict';

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _index = require('../index');

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

_chai2['default'].use(_chaiAsPromised2['default']);

// Error codes and messages have been added according to JsonWireProtocol see
// https://code.google.com/p/selenium/wiki/JsonWireProtocol#Response_Status_Codes
var errorsList = [{ errorName: 'NoSuchDriverError',
  errorMsg: 'A session is either terminated or not started',
  errorCode: 6 }, { errorName: 'NoSuchElementError',
  errorMsg: 'An element could not be located on the page using the ' + 'given search parameters.',
  errorCode: 7 }, { errorName: 'NoSuchFrameError',
  errorMsg: 'A request to switch to a frame could not be satisfied ' + 'because the frame could not be found.',
  errorCode: 8 }, { errorName: 'UnknownCommandError',
  errorMsg: 'The requested resource could not be found, or a request ' + 'was received using an HTTP method that is not supported by ' + 'the mapped resource.',
  errorCode: 9 }, { errorName: 'StaleElementReferenceError',
  errorMsg: 'An element command failed because the referenced element is ' + 'no longer attached to the DOM.',
  errorCode: 10 }, { errorName: 'ElementNotVisibleError',
  errorMsg: 'An element command could not be completed because the ' + 'element is not visible on the page.',
  errorCode: 11 }, { errorName: 'InvalidElementStateError',
  errorMsg: 'An element command could not be completed because the element ' + 'is in an invalid state (e.g. attempting to click a disabled ' + 'element).',
  errorCode: 12 }, { errorName: 'UnknownError',
  errorMsg: 'An unknown server-side error occurred while processing the ' + 'command.',
  errorCode: 13 }, { errorName: 'ElementIsNotSelectableError',
  errorMsg: 'An attempt was made to select an element that cannot ' + 'be selected.',
  errorCode: 15 }, { errorName: 'JavaScriptError',
  errorMsg: 'An error occurred while executing user supplied JavaScript.',
  errorCode: 17 }, { errorName: 'XPathLookupError',
  errorMsg: 'An error occurred while searching for an element by XPath.',
  errorCode: 19 }, { errorName: 'TimeoutError',
  errorMsg: 'An operation did not complete before its timeout expired.',
  errorCode: 21 }, { errorName: 'NoSuchWindowError',
  errorMsg: 'A request to switch to a different window could not be ' + 'satisfied because the window could not be found.',
  errorCode: 23 }, { errorName: 'InvalidCookieDomainError',
  errorMsg: 'An illegal attempt was made to set a cookie under a different ' + 'domain than the current page.',
  errorCode: 24 }, { errorName: 'UnableToSetCookieError',
  errorMsg: 'A request to set a cookie\'s value could not be satisfied.',
  errorCode: 25 }, { errorName: 'UnexpectedAlertOpenError',
  errorMsg: 'A modal dialog was open, blocking this operation',
  errorCode: 26 }, { errorName: 'NoAlertOpenError',
  errorMsg: 'An attempt was made to operate on a modal dialog when one was ' + 'not open.',
  errorCode: 27 }, { errorName: 'ScriptTimeoutError',
  errorMsg: 'A script did not complete before its timeout expired.',
  errorCode: 28 }, { errorName: 'InvalidElementCoordinatesError',
  errorMsg: 'The coordinates provided to an interactions operation are ' + 'invalid.',
  errorCode: 29 }, { errorName: 'IMENotAvailableError',
  errorMsg: 'IME was not available.',
  errorCode: 30 }, { errorName: 'IMEEngineActivationFailedError',
  errorMsg: 'An IME engine could not be started.',
  errorCode: 31 }, { errorName: 'InvalidSelectorError',
  errorMsg: 'Argument was an invalid selector (e.g. XPath/CSS).',
  errorCode: 32 }, { errorName: 'SessionNotCreatedError',
  errorMsg: 'A new session could not be created.',
  errorCode: 33 }, { errorName: 'MoveTargetOutOfBoundsError',
  errorMsg: 'Target provided for a move action is out of bounds.',
  errorCode: 34 }, { errorName: 'NotYetImplementedError',
  errorMsg: 'Method has not yet been implemented',
  errorCode: 13 }];

describe('errors', function () {
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    var _loop = function () {
      var error = _step.value;

      it(error.errorName + ' should have correct code and messg', function () {
        new _index.errors[error.errorName]().should.have.property('jsonwpCode', error.errorCode);
        new _index.errors[error.errorName]().should.have.property('message', error.errorMsg);
      });
    };

    for (var _iterator = _getIterator(errorsList), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      _loop();
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator['return']) {
        _iterator['return']();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  it('BadParametersError should not have code and should have messg', function () {
    new _index.errors.BadParametersError().should.not.have.property('jsonwpCode');
    new _index.errors.BadParametersError().should.have.property('message');
  });
});
describe('errorFromCode', function () {
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    var _loop2 = function () {
      var error = _step2.value;

      if (error.errorName !== 'NotYetImplementedError') {
        it(error.errorCode + ' should return correct error', function () {
          (0, _index.errorFromCode)(error.errorCode).should.have.property('jsonwpCode', error.errorCode);
          (0, _index.errorFromCode)(error.errorCode).should.have.property('message', error.errorMsg);
          if (!_lodash2['default'].includes([13, 33], error.errorCode)) {
            (0, _index.errorFromCode)(error.errorCode, 'abcd').should.have.property('jsonwpCode', error.errorCode);
            (0, _index.errorFromCode)(error.errorCode, 'abcd').should.have.property('message', 'abcd');
          }
        });
      }
    };

    for (var _iterator2 = _getIterator(errorsList), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      _loop2();
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2['return']) {
        _iterator2['return']();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  it('should throw unknown error for unknown code', function () {
    (0, _index.errorFromCode)(99).should.have.property('jsonwpCode', 13);
    (0, _index.errorFromCode)(99).should.have.property('message', 'An unknown server-side error occurred ' + 'while processing the command.');
  });
});
//# sourceMappingURL=data:application/json;base64,