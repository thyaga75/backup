require('source-map-support').install();

'use strict';

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

var _lodash = require('lodash');

var _libRoutes = require('../lib/routes');

var _crypto = require('crypto');

var _crypto2 = _interopRequireDefault(_crypto);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

_chai2['default'].should();

describe('MJSONWP', function () {

  // TODO test against an explicit protocol rather than a hash of a previous
  // protocol

  describe('ensure protocol consistency', function () {
    it('should not change protocol between patch versions', function callee$2$0() {
      var shasum, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _step$value, url, urlMapping, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _step2$value, method, methodMapping, allParams, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, param, hash;

      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            shasum = _crypto2['default'].createHash('sha1');
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            context$3$0.prev = 4;
            _iterator = _getIterator(_lodash._.pairs(_libRoutes.METHOD_MAP));

          case 6:
            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
              context$3$0.next = 65;
              break;
            }

            _step$value = _slicedToArray(_step.value, 2);
            url = _step$value[0];
            urlMapping = _step$value[1];

            shasum.update(url);
            _iteratorNormalCompletion2 = true;
            _didIteratorError2 = false;
            _iteratorError2 = undefined;
            context$3$0.prev = 14;
            _iterator2 = _getIterator(_lodash._.pairs(urlMapping));

          case 16:
            if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
              context$3$0.next = 48;
              break;
            }

            _step2$value = _slicedToArray(_step2.value, 2);
            method = _step2$value[0];
            methodMapping = _step2$value[1];

            shasum.update(method);
            if (methodMapping.command) shasum.update(methodMapping.command);

            if (!methodMapping.payloadParams) {
              context$3$0.next = 45;
              break;
            }

            allParams = _lodash._.flatten(methodMapping.payloadParams.required);

            if (methodMapping.payloadParams.optional) {
              allParams = allParams.concat(_lodash._.flatten(methodMapping.payloadParams.optional));
            }
            _iteratorNormalCompletion3 = true;
            _didIteratorError3 = false;
            _iteratorError3 = undefined;
            context$3$0.prev = 28;
            for (_iterator3 = _getIterator(allParams); !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
              param = _step3.value;

              shasum.update(param);
            }
            context$3$0.next = 36;
            break;

          case 32:
            context$3$0.prev = 32;
            context$3$0.t0 = context$3$0['catch'](28);
            _didIteratorError3 = true;
            _iteratorError3 = context$3$0.t0;

          case 36:
            context$3$0.prev = 36;
            context$3$0.prev = 37;

            if (!_iteratorNormalCompletion3 && _iterator3['return']) {
              _iterator3['return']();
            }

          case 39:
            context$3$0.prev = 39;

            if (!_didIteratorError3) {
              context$3$0.next = 42;
              break;
            }

            throw _iteratorError3;

          case 42:
            return context$3$0.finish(39);

          case 43:
            return context$3$0.finish(36);

          case 44:
            if (methodMapping.payloadParams.wrap) {
              shasum.update('skip');
              shasum.update(methodMapping.payloadParams.wrap);
            }

          case 45:
            _iteratorNormalCompletion2 = true;
            context$3$0.next = 16;
            break;

          case 48:
            context$3$0.next = 54;
            break;

          case 50:
            context$3$0.prev = 50;
            context$3$0.t1 = context$3$0['catch'](14);
            _didIteratorError2 = true;
            _iteratorError2 = context$3$0.t1;

          case 54:
            context$3$0.prev = 54;
            context$3$0.prev = 55;

            if (!_iteratorNormalCompletion2 && _iterator2['return']) {
              _iterator2['return']();
            }

          case 57:
            context$3$0.prev = 57;

            if (!_didIteratorError2) {
              context$3$0.next = 60;
              break;
            }

            throw _iteratorError2;

          case 60:
            return context$3$0.finish(57);

          case 61:
            return context$3$0.finish(54);

          case 62:
            _iteratorNormalCompletion = true;
            context$3$0.next = 6;
            break;

          case 65:
            context$3$0.next = 71;
            break;

          case 67:
            context$3$0.prev = 67;
            context$3$0.t2 = context$3$0['catch'](4);
            _didIteratorError = true;
            _iteratorError = context$3$0.t2;

          case 71:
            context$3$0.prev = 71;
            context$3$0.prev = 72;

            if (!_iteratorNormalCompletion && _iterator['return']) {
              _iterator['return']();
            }

          case 74:
            context$3$0.prev = 74;

            if (!_didIteratorError) {
              context$3$0.next = 77;
              break;
            }

            throw _iteratorError;

          case 77:
            return context$3$0.finish(74);

          case 78:
            return context$3$0.finish(71);

          case 79:
            hash = shasum.digest('hex').substring(0, 8);

            // Modify the hash whenever the protocol has intentionally been modified.
            hash.should.equal('08ccf63a');

          case 81:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this, [[4, 67, 71, 79], [14, 50, 54, 62], [28, 32, 36, 44], [37,, 39, 43], [55,, 57, 61], [72,, 74, 78]]);
    });
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3Qvcm91dGVzLXNwZWNzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O3NCQUVrQixRQUFROzt5QkFDQyxlQUFlOztzQkFDUixRQUFROzs7O29CQUN6QixNQUFNOzs7O0FBR3ZCLGtCQUFLLE1BQU0sRUFBRSxDQUFDOztBQUVkLFFBQVEsQ0FBQyxTQUFTLEVBQUUsWUFBTTs7Ozs7QUFLeEIsVUFBUSxDQUFDLDZCQUE2QixFQUFFLFlBQU07QUFDNUMsTUFBRSxDQUFDLG1EQUFtRCxFQUFFO1VBQ2xELE1BQU0sK0ZBQ0EsR0FBRyxFQUFFLFVBQVUscUdBRWIsTUFBTSxFQUFFLGFBQWEsRUFJdkIsU0FBUyx1RkFJSixLQUFLLEVBVWhCLElBQUk7Ozs7O0FBckJKLGtCQUFNLEdBQUcsb0JBQU8sVUFBVSxDQUFDLE1BQU0sQ0FBQzs7Ozs7cUNBQ1IsVUFBRSxLQUFLLHVCQUFZOzs7Ozs7Ozs7QUFBdkMsZUFBRztBQUFFLHNCQUFVOztBQUN2QixrQkFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQzs7Ozs7c0NBQ2lCLFVBQUUsS0FBSyxDQUFDLFVBQVUsQ0FBQzs7Ozs7Ozs7O0FBQTdDLGtCQUFNO0FBQUUseUJBQWE7O0FBQzdCLGtCQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ3RCLGdCQUFJLGFBQWEsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7O2lCQUM1RCxhQUFhLENBQUMsYUFBYTs7Ozs7QUFDekIscUJBQVMsR0FBRyxVQUFFLE9BQU8sQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQzs7QUFDL0QsZ0JBQUksYUFBYSxDQUFDLGFBQWEsQ0FBQyxRQUFRLEVBQUU7QUFDeEMsdUJBQVMsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLFVBQUUsT0FBTyxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQzthQUMvRTs7Ozs7QUFDRCwyQ0FBa0IsU0FBUyx5R0FBRTtBQUFwQixtQkFBSzs7QUFDWixvQkFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUN0Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDRCxnQkFBSSxhQUFhLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRTtBQUNwQyxvQkFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN0QixvQkFBTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ2pEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFJSCxnQkFBSSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7OztBQUUvQyxnQkFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7Ozs7Ozs7S0FDL0IsQ0FBQyxDQUFDO0dBQ0osQ0FBQyxDQUFDO0NBRUosQ0FBQyxDQUFDIiwiZmlsZSI6InRlc3Qvcm91dGVzLXNwZWNzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdHJhbnNwaWxlOm1vY2hhXG5cbmltcG9ydCB7IF8gfSBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgTUVUSE9EX01BUCB9IGZyb20gJy4uL2xpYi9yb3V0ZXMnO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBjcnlwdG8gfSBmcm9tICdjcnlwdG8nO1xuaW1wb3J0IGNoYWkgZnJvbSAnY2hhaSc7XG5cblxuY2hhaS5zaG91bGQoKTtcblxuZGVzY3JpYmUoJ01KU09OV1AnLCAoKSA9PiB7XG5cbiAgLy8gVE9ETyB0ZXN0IGFnYWluc3QgYW4gZXhwbGljaXQgcHJvdG9jb2wgcmF0aGVyIHRoYW4gYSBoYXNoIG9mIGEgcHJldmlvdXNcbiAgLy8gcHJvdG9jb2xcblxuICBkZXNjcmliZSgnZW5zdXJlIHByb3RvY29sIGNvbnNpc3RlbmN5JywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgbm90IGNoYW5nZSBwcm90b2NvbCBiZXR3ZWVuIHBhdGNoIHZlcnNpb25zJywgYXN5bmMgKCkgPT4ge1xuICAgICAgdmFyIHNoYXN1bSA9IGNyeXB0by5jcmVhdGVIYXNoKCdzaGExJyk7XG4gICAgICBmb3IgKGxldCBbdXJsLCB1cmxNYXBwaW5nXSBvZiBfLnBhaXJzKE1FVEhPRF9NQVApKSB7XG4gICAgICAgIHNoYXN1bS51cGRhdGUodXJsKTtcbiAgICAgICAgZm9yIChsZXQgW21ldGhvZCwgbWV0aG9kTWFwcGluZ10gb2YgXy5wYWlycyh1cmxNYXBwaW5nKSkge1xuICAgICAgICAgIHNoYXN1bS51cGRhdGUobWV0aG9kKTtcbiAgICAgICAgICBpZiAobWV0aG9kTWFwcGluZy5jb21tYW5kKSBzaGFzdW0udXBkYXRlKG1ldGhvZE1hcHBpbmcuY29tbWFuZCk7XG4gICAgICAgICAgaWYgKG1ldGhvZE1hcHBpbmcucGF5bG9hZFBhcmFtcykge1xuICAgICAgICAgICAgbGV0IGFsbFBhcmFtcyA9IF8uZmxhdHRlbihtZXRob2RNYXBwaW5nLnBheWxvYWRQYXJhbXMucmVxdWlyZWQpO1xuICAgICAgICAgICAgaWYgKG1ldGhvZE1hcHBpbmcucGF5bG9hZFBhcmFtcy5vcHRpb25hbCkge1xuICAgICAgICAgICAgICBhbGxQYXJhbXMgPSBhbGxQYXJhbXMuY29uY2F0KF8uZmxhdHRlbihtZXRob2RNYXBwaW5nLnBheWxvYWRQYXJhbXMub3B0aW9uYWwpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAobGV0IHBhcmFtIG9mIGFsbFBhcmFtcykge1xuICAgICAgICAgICAgICBzaGFzdW0udXBkYXRlKHBhcmFtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXRob2RNYXBwaW5nLnBheWxvYWRQYXJhbXMud3JhcCkge1xuICAgICAgICAgICAgICBzaGFzdW0udXBkYXRlKCdza2lwJyk7XG4gICAgICAgICAgICAgIHNoYXN1bS51cGRhdGUobWV0aG9kTWFwcGluZy5wYXlsb2FkUGFyYW1zLndyYXApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmFyIGhhc2ggPSBzaGFzdW0uZGlnZXN0KCdoZXgnKS5zdWJzdHJpbmcoMCwgOCk7XG4gICAgICAvLyBNb2RpZnkgdGhlIGhhc2ggd2hlbmV2ZXIgdGhlIHByb3RvY29sIGhhcyBpbnRlbnRpb25hbGx5IGJlZW4gbW9kaWZpZWQuXG4gICAgICBoYXNoLnNob3VsZC5lcXVhbCgnMDhjY2Y2M2EnKTtcbiAgICB9KTtcbiAgfSk7XG5cbn0pO1xuIl19