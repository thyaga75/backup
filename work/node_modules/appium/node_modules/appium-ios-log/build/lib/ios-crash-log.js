'use strict';

var _createClass = require('babel-runtime/helpers/create-class')['default'];

var _classCallCheck = require('babel-runtime/helpers/class-call-check')['default'];

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _appiumSupport = require('appium-support');

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

var _asyncbox = require('asyncbox');

var CRASH_DIR = _path2['default'].resolve(process.env.HOME || '/', 'Library', 'Logs', 'DiagnosticReports');

var IOSCrashLog = (function () {
  function IOSCrashLog() {
    var logDir = arguments.length <= 0 || arguments[0] === undefined ? CRASH_DIR : arguments[0];

    _classCallCheck(this, IOSCrashLog);

    this.logDir = logDir;
    this.prevLogs = [];
    this.logsSinceLastRequest = [];
  }

  _createClass(IOSCrashLog, [{
    key: 'getCrashes',
    value: function getCrashes() {
      return _regeneratorRuntime.async(function getCrashes$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.prev = 0;
            return context$2$0.abrupt('return', _appiumSupport.fs.glob(this.logDir + '/*.crash'));

          case 4:
            context$2$0.prev = 4;
            context$2$0.t0 = context$2$0['catch'](0);

            _logger2['default'].errorAndThrow('There was a problem getting the crash list: ' + context$2$0.t0);

          case 7:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this, [[0, 4]]);
    }
  }, {
    key: 'filesToJSON',
    value: function filesToJSON(files) {
      return _regeneratorRuntime.async(function filesToJSON$(context$2$0) {
        var _this = this;

        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            return context$2$0.abrupt('return', (0, _asyncbox.asyncmap)(files, function callee$2$0(file) {
              var filename, stat;
              return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
                while (1) switch (context$3$0.prev = context$3$0.next) {
                  case 0:
                    filename = _path2['default'].resolve(this.logDir, file);
                    context$3$0.next = 3;
                    return _regeneratorRuntime.awrap(_appiumSupport.fs.stat(filename));

                  case 3:
                    stat = context$3$0.sent;
                    context$3$0.t0 = stat.ctime;
                    context$3$0.next = 7;
                    return _regeneratorRuntime.awrap(_appiumSupport.fs.readFile(filename, 'utf8'));

                  case 7:
                    context$3$0.t1 = context$3$0.sent;
                    return context$3$0.abrupt('return', {
                      timestamp: context$3$0.t0,
                      level: 'ALL',
                      message: context$3$0.t1
                    });

                  case 9:
                  case 'end':
                    return context$3$0.stop();
                }
              }, null, _this);
            }));

          case 1:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'startCapture',
    value: function startCapture() {
      return _regeneratorRuntime.async(function startCapture$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.getCrashes());

          case 2:
            this.prevLogs = context$2$0.sent;

          case 3:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'stopCapture',
    value: function stopCapture() {
      return _regeneratorRuntime.async(function stopCapture$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'getLogs',

    // needed for consistent API with other logs
    value: function getLogs() {
      var crashFiles, diff;
      return _regeneratorRuntime.async(function getLogs$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            context$2$0.next = 2;
            return _regeneratorRuntime.awrap(this.getCrashes());

          case 2:
            crashFiles = context$2$0.sent;
            diff = _lodash2['default'].difference(crashFiles, this.prevLogs, this.logsSinceLastRequest);

            this.logsSinceLastRequest = _lodash2['default'].union(this.logsSinceLastRequest, diff);
            return context$2$0.abrupt('return', this.filesToJSON(diff));

          case 6:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }, {
    key: 'getAllLogs',
    value: function getAllLogs() {
      var crashFiles, logFiles;
      return _regeneratorRuntime.async(function getAllLogs$(context$2$0) {
        while (1) switch (context$2$0.prev = context$2$0.next) {
          case 0:
            crashFiles = this.getCrashes();
            logFiles = _lodash2['default'].difference(crashFiles, this.prevLogs);
            return context$2$0.abrupt('return', this.filesToJSON(logFiles));

          case 3:
          case 'end':
            return context$2$0.stop();
        }
      }, null, this);
    }
  }]);

  return IOSCrashLog;
})();

exports['default'] = IOSCrashLog;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9pb3MtY3Jhc2gtbG9nLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O29CQUFpQixNQUFNOzs7O3NCQUNULFFBQVE7Ozs7NkJBQ0gsZ0JBQWdCOztzQkFDaEIsVUFBVTs7Ozt3QkFDSixVQUFVOztBQUduQyxJQUFNLFNBQVMsR0FBRyxrQkFBSyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksR0FBRyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsbUJBQW1CLENBQUMsQ0FBQzs7SUFFMUYsV0FBVztBQUNILFdBRFIsV0FBVyxHQUNrQjtRQUFwQixNQUFNLHlEQUFHLFNBQVM7OzBCQUQzQixXQUFXOztBQUViLFFBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0FBQ3JCLFFBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO0FBQ25CLFFBQUksQ0FBQyxvQkFBb0IsR0FBRyxFQUFFLENBQUM7R0FDaEM7O2VBTEcsV0FBVzs7V0FPRTs7Ozs7Z0RBRU4sa0JBQUcsSUFBSSxDQUFJLElBQUksQ0FBQyxNQUFNLGNBQVc7Ozs7OztBQUV4QyxnQ0FBTyxhQUFhLGlFQUFzRCxDQUFDOzs7Ozs7O0tBRTlFOzs7V0FFaUIscUJBQUMsS0FBSzs7Ozs7O2dEQUNmLHdCQUFTLEtBQUssRUFBRSxvQkFBTyxJQUFJO2tCQUM1QixRQUFRLEVBQ1IsSUFBSTs7OztBQURKLDRCQUFRLEdBQUcsa0JBQUssT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDOztxREFDN0Isa0JBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQzs7O0FBQTlCLHdCQUFJO3FDQUVLLElBQUksQ0FBQyxLQUFLOztxREFFTixrQkFBRyxRQUFRLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQzs7Ozs7QUFGNUMsK0JBQVM7QUFDVCwyQkFBSyxFQUFFLEtBQUs7QUFDWiw2QkFBTzs7Ozs7Ozs7YUFFVixDQUFDOzs7Ozs7O0tBQ0g7OztXQUVrQjs7Ozs7NkNBQ0ssSUFBSSxDQUFDLFVBQVUsRUFBRTs7O0FBQXZDLGdCQUFJLENBQUMsUUFBUTs7Ozs7OztLQUNkOzs7V0FFaUI7Ozs7Ozs7O0tBRWpCOzs7OztXQUVhO1VBQ1IsVUFBVSxFQUNWLElBQUk7Ozs7OzZDQURlLElBQUksQ0FBQyxVQUFVLEVBQUU7OztBQUFwQyxzQkFBVTtBQUNWLGdCQUFJLEdBQUcsb0JBQUUsVUFBVSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxvQkFBb0IsQ0FBQzs7QUFDN0UsZ0JBQUksQ0FBQyxvQkFBb0IsR0FBRyxvQkFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLG9CQUFvQixFQUFFLElBQUksQ0FBQyxDQUFDO2dEQUM5RCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQzs7Ozs7OztLQUM5Qjs7O1dBRWU7VUFDVixVQUFVLEVBQ1YsUUFBUTs7OztBQURSLHNCQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsRUFBRTtBQUM5QixvQkFBUSxHQUFHLG9CQUFFLFVBQVUsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQztnREFDL0MsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUM7Ozs7Ozs7S0FDbEM7OztTQTlDRyxXQUFXOzs7cUJBaURGLFdBQVciLCJmaWxlIjoibGliL2lvcy1jcmFzaC1sb2cuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBmcyB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcbmltcG9ydCBsb2dnZXIgZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IHsgYXN5bmNtYXAgfSBmcm9tICdhc3luY2JveCc7XG5cblxuY29uc3QgQ1JBU0hfRElSID0gcGF0aC5yZXNvbHZlKHByb2Nlc3MuZW52LkhPTUUgfHwgJy8nLCAnTGlicmFyeScsICdMb2dzJywgJ0RpYWdub3N0aWNSZXBvcnRzJyk7XG5cbmNsYXNzIElPU0NyYXNoTG9nIHtcbiAgY29uc3RydWN0b3IgKGxvZ0RpciA9IENSQVNIX0RJUikge1xuICAgIHRoaXMubG9nRGlyID0gbG9nRGlyO1xuICAgIHRoaXMucHJldkxvZ3MgPSBbXTtcbiAgICB0aGlzLmxvZ3NTaW5jZUxhc3RSZXF1ZXN0ID0gW107XG4gIH1cblxuICBhc3luYyBnZXRDcmFzaGVzICgpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGZzLmdsb2IoYCR7dGhpcy5sb2dEaXJ9LyouY3Jhc2hgKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGxvZ2dlci5lcnJvckFuZFRocm93KGBUaGVyZSB3YXMgYSBwcm9ibGVtIGdldHRpbmcgdGhlIGNyYXNoIGxpc3Q6ICR7ZXJyfWApO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGZpbGVzVG9KU09OIChmaWxlcykge1xuICAgIHJldHVybiBhc3luY21hcChmaWxlcywgYXN5bmMgKGZpbGUpID0+IHtcbiAgICAgIGxldCBmaWxlbmFtZSA9IHBhdGgucmVzb2x2ZSh0aGlzLmxvZ0RpciwgZmlsZSk7XG4gICAgICBsZXQgc3RhdCA9IGF3YWl0IGZzLnN0YXQoZmlsZW5hbWUpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdGltZXN0YW1wOiBzdGF0LmN0aW1lLFxuICAgICAgICBsZXZlbDogJ0FMTCcsXG4gICAgICAgIG1lc3NhZ2U6IGF3YWl0IGZzLnJlYWRGaWxlKGZpbGVuYW1lLCAndXRmOCcpXG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgc3RhcnRDYXB0dXJlICgpIHtcbiAgICB0aGlzLnByZXZMb2dzID0gYXdhaXQgdGhpcy5nZXRDcmFzaGVzKCk7XG4gIH1cblxuICBhc3luYyBzdG9wQ2FwdHVyZSAoKSB7XG4gICAgLy8gbmVlZGVkIGZvciBjb25zaXN0ZW50IEFQSSB3aXRoIG90aGVyIGxvZ3NcbiAgfVxuXG4gIGFzeW5jIGdldExvZ3MgKCkge1xuICAgIGxldCBjcmFzaEZpbGVzID0gYXdhaXQgdGhpcy5nZXRDcmFzaGVzKCk7XG4gICAgbGV0IGRpZmYgPSBfLmRpZmZlcmVuY2UoY3Jhc2hGaWxlcywgdGhpcy5wcmV2TG9ncywgdGhpcy5sb2dzU2luY2VMYXN0UmVxdWVzdCk7XG4gICAgdGhpcy5sb2dzU2luY2VMYXN0UmVxdWVzdCA9IF8udW5pb24odGhpcy5sb2dzU2luY2VMYXN0UmVxdWVzdCwgZGlmZik7XG4gICAgcmV0dXJuIHRoaXMuZmlsZXNUb0pTT04oZGlmZik7XG4gIH1cblxuICBhc3luYyBnZXRBbGxMb2dzKCkge1xuICAgIGxldCBjcmFzaEZpbGVzID0gdGhpcy5nZXRDcmFzaGVzKCk7XG4gICAgbGV0IGxvZ0ZpbGVzID0gXy5kaWZmZXJlbmNlKGNyYXNoRmlsZXMsIHRoaXMucHJldkxvZ3MpO1xuICAgIHJldHVybiB0aGlzLmZpbGVzVG9KU09OKGxvZ0ZpbGVzKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBJT1NDcmFzaExvZztcbiJdfQ==