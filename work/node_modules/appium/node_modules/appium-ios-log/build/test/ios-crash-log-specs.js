require('source-map-support').install();

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

var _ = require('..');

var _appiumSupport = require('appium-support');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

var LOG_DIR = _path2['default'].resolve('test', 'assets', 'logs');

describe('crash logs', function () {
  var tmpFile1 = _path2['default'].resolve(LOG_DIR, 'temp1.crash');
  var tmpFile2 = _path2['default'].resolve(LOG_DIR, 'temp2.crash');
  var log = undefined;
  beforeEach(function () {
    log = new _.IOSCrashLog(LOG_DIR);
  });
  afterEach(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(tmpFile1));

        case 2:
          if (!context$2$0.sent) {
            context$2$0.next = 5;
            break;
          }

          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(_appiumSupport.fs.unlink(tmpFile1));

        case 5:
          context$2$0.next = 7;
          return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(tmpFile2));

        case 7:
          if (!context$2$0.sent) {
            context$2$0.next = 10;
            break;
          }

          context$2$0.next = 10;
          return _regeneratorRuntime.awrap(_appiumSupport.fs.unlink(tmpFile2));

        case 10:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should get all the logs', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(log.getCrashes());

        case 2:
          context$2$0.sent.should.have.length(2);

        case 3:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should get an empty array when no new crashes have happened', function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          log.startCapture();
          context$2$0.next = 3;
          return _regeneratorRuntime.awrap(log.getLogs());

        case 3:
          context$2$0.sent.should.have.length(0);

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should get new log', function callee$1$0() {
    var start, message, end;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(log.getCrashes());

        case 2:
          start = context$2$0.sent;

          start.should.have.length(2);

          log.startCapture();

          // write to a new "crash" file
          message = 'Test crash';
          context$2$0.next = 8;
          return _regeneratorRuntime.awrap(_appiumSupport.fs.writeFile(tmpFile1, message, { flag: 'a' }));

        case 8:
          context$2$0.next = 10;
          return _regeneratorRuntime.awrap(log.getLogs());

        case 10:
          end = context$2$0.sent;

          end.should.have.length(1);
          end[0].message.should.equal(message);

        case 13:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should only get logs since the last time logs were retrieved', function callee$1$0() {
    var start, firstMessage, middle, secondMessage, end;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(log.getCrashes());

        case 2:
          start = context$2$0.sent;

          start.should.have.length(2);

          log.startCapture();

          // write to a new "crash" file
          firstMessage = 'First test crash';
          context$2$0.next = 8;
          return _regeneratorRuntime.awrap(_appiumSupport.fs.writeFile(tmpFile1, firstMessage, { flag: 'a' }));

        case 8:
          context$2$0.next = 10;
          return _regeneratorRuntime.awrap(log.getLogs());

        case 10:
          middle = context$2$0.sent;

          middle.should.have.length(1);
          middle[0].message.should.equal(firstMessage);

          secondMessage = 'Second test crash';
          context$2$0.next = 16;
          return _regeneratorRuntime.awrap(_appiumSupport.fs.writeFile(tmpFile2, secondMessage, { flag: 'a' }));

        case 16:
          context$2$0.next = 18;
          return _regeneratorRuntime.awrap(log.getLogs());

        case 18:
          end = context$2$0.sent;

          end.should.have.length(1);
          end[0].message.should.equal(secondMessage);

        case 21:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvaW9zLWNyYXNoLWxvZy1zcGVjcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O2dCQUU0QixJQUFJOzs2QkFDYixnQkFBZ0I7O29CQUNsQixNQUFNOzs7O29CQUNOLE1BQU07Ozs7OEJBQ0ksa0JBQWtCOzs7O0FBRzdDLGtCQUFLLE1BQU0sRUFBRSxDQUFDO0FBQ2Qsa0JBQUssR0FBRyw2QkFBZ0IsQ0FBQzs7QUFFekIsSUFBTSxPQUFPLEdBQUcsa0JBQUssT0FBTyxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7O0FBRXZELFFBQVEsQ0FBQyxZQUFZLEVBQUUsWUFBTTtBQUMzQixNQUFJLFFBQVEsR0FBRyxrQkFBSyxPQUFPLENBQUMsT0FBTyxFQUFFLGFBQWEsQ0FBQyxDQUFDO0FBQ3BELE1BQUksUUFBUSxHQUFHLGtCQUFLLE9BQU8sQ0FBQyxPQUFPLEVBQUUsYUFBYSxDQUFDLENBQUM7QUFDcEQsTUFBSSxHQUFHLFlBQUEsQ0FBQztBQUNSLFlBQVUsQ0FBQyxZQUFNO0FBQ2YsT0FBRyxHQUFHLGtCQUFnQixPQUFPLENBQUMsQ0FBQztHQUNoQyxDQUFDLENBQUM7QUFDSCxXQUFTLENBQUM7Ozs7OzJDQUNFLGtCQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUM7Ozs7Ozs7OzsyQ0FDckIsa0JBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQzs7OzsyQ0FFakIsa0JBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQzs7Ozs7Ozs7OzJDQUNyQixrQkFBRyxNQUFNLENBQUMsUUFBUSxDQUFDOzs7Ozs7O0dBRTVCLENBQUMsQ0FBQzs7QUFFSCxJQUFFLENBQUMseUJBQXlCLEVBQUU7Ozs7OzJDQUNyQixHQUFHLENBQUMsVUFBVSxFQUFFOzs7MkJBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzs7Ozs7OztHQUM5QyxDQUFDLENBQUM7O0FBRUgsSUFBRSxDQUFDLDZEQUE2RCxFQUFFOzs7O0FBQ2hFLGFBQUcsQ0FBQyxZQUFZLEVBQUUsQ0FBQzs7MkNBQ1osR0FBRyxDQUFDLE9BQU8sRUFBRTs7OzJCQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7Ozs7Ozs7R0FDM0MsQ0FBQyxDQUFDOztBQUVILElBQUUsQ0FBQyxvQkFBb0IsRUFBRTtRQUNuQixLQUFLLEVBTUwsT0FBTyxFQUdQLEdBQUc7Ozs7OzJDQVRXLEdBQUcsQ0FBQyxVQUFVLEVBQUU7OztBQUE5QixlQUFLOztBQUNULGVBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQzs7QUFFNUIsYUFBRyxDQUFDLFlBQVksRUFBRSxDQUFDOzs7QUFHZixpQkFBTyxHQUFHLFlBQVk7OzJDQUNwQixrQkFBRyxTQUFTLENBQUMsUUFBUSxFQUFFLE9BQU8sRUFBRSxFQUFDLElBQUksRUFBRSxHQUFHLEVBQUMsQ0FBQzs7OzsyQ0FFbEMsR0FBRyxDQUFDLE9BQU8sRUFBRTs7O0FBQXpCLGFBQUc7O0FBQ1AsYUFBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzFCLGFBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQzs7Ozs7OztHQUN0QyxDQUFDLENBQUM7O0FBRUgsSUFBRSxDQUFDLDhEQUE4RCxFQUFFO1FBQzdELEtBQUssRUFNTCxZQUFZLEVBRVosTUFBTSxFQUlOLGFBQWEsRUFFYixHQUFHOzs7OzsyQ0FkVyxHQUFHLENBQUMsVUFBVSxFQUFFOzs7QUFBOUIsZUFBSzs7QUFDVCxlQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7O0FBRTVCLGFBQUcsQ0FBQyxZQUFZLEVBQUUsQ0FBQzs7O0FBR2Ysc0JBQVksR0FBRyxrQkFBa0I7OzJDQUMvQixrQkFBRyxTQUFTLENBQUMsUUFBUSxFQUFFLFlBQVksRUFBRSxFQUFDLElBQUksRUFBRSxHQUFHLEVBQUMsQ0FBQzs7OzsyQ0FDcEMsR0FBRyxDQUFDLE9BQU8sRUFBRTs7O0FBQTVCLGdCQUFNOztBQUNWLGdCQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDN0IsZ0JBQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQzs7QUFFekMsdUJBQWEsR0FBRyxtQkFBbUI7OzJDQUNqQyxrQkFBRyxTQUFTLENBQUMsUUFBUSxFQUFFLGFBQWEsRUFBRSxFQUFDLElBQUksRUFBRSxHQUFHLEVBQUMsQ0FBQzs7OzsyQ0FDeEMsR0FBRyxDQUFDLE9BQU8sRUFBRTs7O0FBQXpCLGFBQUc7O0FBQ1AsYUFBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzFCLGFBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQzs7Ozs7OztHQUM1QyxDQUFDLENBQUM7Q0FDSixDQUFDLENBQUMiLCJmaWxlIjoidGVzdC9pb3MtY3Jhc2gtbG9nLXNwZWNzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdHJhbnNwaWxlOm1vY2hhXG5cbmltcG9ydCB7IElPU0NyYXNoTG9nIH0gZnJvbSAnLi4nO1xuaW1wb3J0IHsgZnMgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBjaGFpIGZyb20gJ2NoYWknO1xuaW1wb3J0IGNoYWlBc1Byb21pc2VkIGZyb20gJ2NoYWktYXMtcHJvbWlzZWQnO1xuXG5cbmNoYWkuc2hvdWxkKCk7XG5jaGFpLnVzZShjaGFpQXNQcm9taXNlZCk7XG5cbmNvbnN0IExPR19ESVIgPSBwYXRoLnJlc29sdmUoJ3Rlc3QnLCAnYXNzZXRzJywgJ2xvZ3MnKTtcblxuZGVzY3JpYmUoJ2NyYXNoIGxvZ3MnLCAoKSA9PiB7XG4gIGxldCB0bXBGaWxlMSA9IHBhdGgucmVzb2x2ZShMT0dfRElSLCAndGVtcDEuY3Jhc2gnKTtcbiAgbGV0IHRtcEZpbGUyID0gcGF0aC5yZXNvbHZlKExPR19ESVIsICd0ZW1wMi5jcmFzaCcpO1xuICBsZXQgbG9nO1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBsb2cgPSBuZXcgSU9TQ3Jhc2hMb2coTE9HX0RJUik7XG4gIH0pO1xuICBhZnRlckVhY2goYXN5bmMgKCkgPT4ge1xuICAgIGlmIChhd2FpdCBmcy5leGlzdHModG1wRmlsZTEpKSB7XG4gICAgICBhd2FpdCBmcy51bmxpbmsodG1wRmlsZTEpO1xuICAgIH1cbiAgICBpZiAoYXdhaXQgZnMuZXhpc3RzKHRtcEZpbGUyKSkge1xuICAgICAgYXdhaXQgZnMudW5saW5rKHRtcEZpbGUyKTtcbiAgICB9XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgZ2V0IGFsbCB0aGUgbG9ncycsIGFzeW5jICgpID0+IHtcbiAgICAoYXdhaXQgbG9nLmdldENyYXNoZXMoKSkuc2hvdWxkLmhhdmUubGVuZ3RoKDIpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGdldCBhbiBlbXB0eSBhcnJheSB3aGVuIG5vIG5ldyBjcmFzaGVzIGhhdmUgaGFwcGVuZWQnLCBhc3luYyAoKSA9PiB7XG4gICAgbG9nLnN0YXJ0Q2FwdHVyZSgpO1xuICAgIChhd2FpdCBsb2cuZ2V0TG9ncygpKS5zaG91bGQuaGF2ZS5sZW5ndGgoMCk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgZ2V0IG5ldyBsb2cnLCBhc3luYyAoKSA9PiB7XG4gICAgbGV0IHN0YXJ0ID0gYXdhaXQgbG9nLmdldENyYXNoZXMoKTtcbiAgICBzdGFydC5zaG91bGQuaGF2ZS5sZW5ndGgoMik7XG5cbiAgICBsb2cuc3RhcnRDYXB0dXJlKCk7XG5cbiAgICAvLyB3cml0ZSB0byBhIG5ldyBcImNyYXNoXCIgZmlsZVxuICAgIGxldCBtZXNzYWdlID0gJ1Rlc3QgY3Jhc2gnO1xuICAgIGF3YWl0IGZzLndyaXRlRmlsZSh0bXBGaWxlMSwgbWVzc2FnZSwge2ZsYWc6ICdhJ30pO1xuXG4gICAgbGV0IGVuZCA9IGF3YWl0IGxvZy5nZXRMb2dzKCk7XG4gICAgZW5kLnNob3VsZC5oYXZlLmxlbmd0aCgxKTtcbiAgICBlbmRbMF0ubWVzc2FnZS5zaG91bGQuZXF1YWwobWVzc2FnZSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgb25seSBnZXQgbG9ncyBzaW5jZSB0aGUgbGFzdCB0aW1lIGxvZ3Mgd2VyZSByZXRyaWV2ZWQnLCBhc3luYyAoKSA9PiB7XG4gICAgbGV0IHN0YXJ0ID0gYXdhaXQgbG9nLmdldENyYXNoZXMoKTtcbiAgICBzdGFydC5zaG91bGQuaGF2ZS5sZW5ndGgoMik7XG5cbiAgICBsb2cuc3RhcnRDYXB0dXJlKCk7XG5cbiAgICAvLyB3cml0ZSB0byBhIG5ldyBcImNyYXNoXCIgZmlsZVxuICAgIGxldCBmaXJzdE1lc3NhZ2UgPSAnRmlyc3QgdGVzdCBjcmFzaCc7XG4gICAgYXdhaXQgZnMud3JpdGVGaWxlKHRtcEZpbGUxLCBmaXJzdE1lc3NhZ2UsIHtmbGFnOiAnYSd9KTtcbiAgICBsZXQgbWlkZGxlID0gYXdhaXQgbG9nLmdldExvZ3MoKTtcbiAgICBtaWRkbGUuc2hvdWxkLmhhdmUubGVuZ3RoKDEpO1xuICAgIG1pZGRsZVswXS5tZXNzYWdlLnNob3VsZC5lcXVhbChmaXJzdE1lc3NhZ2UpO1xuXG4gICAgbGV0IHNlY29uZE1lc3NhZ2UgPSAnU2Vjb25kIHRlc3QgY3Jhc2gnO1xuICAgIGF3YWl0IGZzLndyaXRlRmlsZSh0bXBGaWxlMiwgc2Vjb25kTWVzc2FnZSwge2ZsYWc6ICdhJ30pO1xuICAgIGxldCBlbmQgPSBhd2FpdCBsb2cuZ2V0TG9ncygpO1xuICAgIGVuZC5zaG91bGQuaGF2ZS5sZW5ndGgoMSk7XG4gICAgZW5kWzBdLm1lc3NhZ2Uuc2hvdWxkLmVxdWFsKHNlY29uZE1lc3NhZ2UpO1xuICB9KTtcbn0pO1xuIl19