require('source-map-support').install();

'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _this = this;

var _ = require('..');

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _appiumSupport = require('appium-support');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _libLogger = require('../lib/logger');

var _libLogger2 = _interopRequireDefault(_libLogger);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

_chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

var LOG_DIR = _path2['default'].resolve('test', 'assets', 'logs');

describe('system logs', function () {
  var tmpSystemLog = undefined;
  var sim = undefined;
  beforeEach(function callee$1$0() {
    var fixSystemLog;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          // get the simulator, and stub what will be called
          sim = {
            udid: 'fake-udid',
            getLogDir: function getLogDir() {},
            getPlatformVersion: function getPlatformVersion() {}
          };
          _sinon2['default'].stub(sim, 'getLogDir').returns(LOG_DIR);
          _sinon2['default'].stub(sim, 'getPlatformVersion').returns('8.4');

          // copy the file into a temporary location, so we can muck with it
          fixSystemLog = _path2['default'].resolve(LOG_DIR, 'system.log.fixture');

          tmpSystemLog = _path2['default'].resolve(LOG_DIR, 'system.log');
          context$2$0.next = 7;
          return _regeneratorRuntime.awrap(_appiumSupport.fs.copyFile(fixSystemLog, tmpSystemLog));

        case 7:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });
  afterEach(function callee$1$0() {
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          context$2$0.next = 2;
          return _regeneratorRuntime.awrap(_appiumSupport.fs.exists(tmpSystemLog));

        case 2:
          if (!context$2$0.sent) {
            context$2$0.next = 5;
            break;
          }

          context$2$0.next = 5;
          return _regeneratorRuntime.awrap(_appiumSupport.fs.unlink(tmpSystemLog));

        case 5:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  });

  it('should begin log capture', function callee$1$0() {
    var log, spy, message;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          log = new _.IOSLog({ sim: sim, showLogs: true });
          spy = _sinon2['default'].spy(_libLogger2['default'], 'info');
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(log.startCapture());

        case 4:
          message = 'This is a test log line';
          context$2$0.next = 7;
          return _regeneratorRuntime.awrap(_appiumSupport.fs.writeFile(tmpSystemLog, message + '\n', { flag: 'a' }));

        case 7:
          context$2$0.next = 9;
          return _regeneratorRuntime.awrap(_bluebird2['default'].delay(500));

        case 9:

          spy.calledWith('[IOS_SYSLOG_ROW] ' + message).should.be['true'];

          context$2$0.next = 12;
          return _regeneratorRuntime.awrap(log.stopCapture());

        case 12:
        case 'end':
          return context$2$0.stop();
      }
    }, null, this);
  });
});

// on some slow system (e.g., Travis) need a moment
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvaW9zLWxvZy1zcGVjcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O2dCQUV1QixJQUFJOztxQkFDVCxPQUFPOzs7OzZCQUNOLGdCQUFnQjs7b0JBQ2xCLE1BQU07Ozs7eUJBQ0osZUFBZTs7OztvQkFDakIsTUFBTTs7Ozs4QkFDSSxrQkFBa0I7Ozs7d0JBQy9CLFVBQVU7Ozs7QUFHeEIsa0JBQUssTUFBTSxFQUFFLENBQUM7QUFDZCxrQkFBSyxHQUFHLDZCQUFnQixDQUFDOztBQUV6QixJQUFNLE9BQU8sR0FBRyxrQkFBSyxPQUFPLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQzs7QUFFdkQsUUFBUSxDQUFDLGFBQWEsRUFBRSxZQUFNO0FBQzVCLE1BQUksWUFBWSxZQUFBLENBQUM7QUFDakIsTUFBSSxHQUFHLFlBQUEsQ0FBQztBQUNSLFlBQVUsQ0FBQztRQVdMLFlBQVk7Ozs7O0FBVGhCLGFBQUcsR0FBRztBQUNKLGdCQUFJLEVBQUUsV0FBVztBQUNqQixxQkFBUyxFQUFFLHFCQUFNLEVBQUU7QUFDbkIsOEJBQWtCLEVBQUUsOEJBQU0sRUFBRTtXQUM3QixDQUFDO0FBQ0YsNkJBQU0sSUFBSSxDQUFDLEdBQUcsRUFBRSxXQUFXLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDOUMsNkJBQU0sSUFBSSxDQUFDLEdBQUcsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQzs7O0FBR2pELHNCQUFZLEdBQUcsa0JBQUssT0FBTyxDQUFDLE9BQU8sRUFBRSxvQkFBb0IsQ0FBQzs7QUFDOUQsc0JBQVksR0FBRyxrQkFBSyxPQUFPLENBQUMsT0FBTyxFQUFFLFlBQVksQ0FBQyxDQUFDOzsyQ0FDN0Msa0JBQUcsUUFBUSxDQUFDLFlBQVksRUFBRSxZQUFZLENBQUM7Ozs7Ozs7R0FDOUMsQ0FBQyxDQUFDO0FBQ0gsV0FBUyxDQUFDOzs7OzsyQ0FDRSxrQkFBRyxNQUFNLENBQUMsWUFBWSxDQUFDOzs7Ozs7Ozs7MkNBQ3pCLGtCQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUM7Ozs7Ozs7R0FFaEMsQ0FBQyxDQUFDOztBQUVILElBQUUsQ0FBQywwQkFBMEIsRUFBRTtRQUN6QixHQUFHLEVBQ0gsR0FBRyxFQUlILE9BQU87Ozs7QUFMUCxhQUFHLEdBQUcsYUFBVyxFQUFDLEdBQUcsRUFBSCxHQUFHLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBQyxDQUFDO0FBQ3ZDLGFBQUcsR0FBRyxtQkFBTSxHQUFHLHlCQUFTLE1BQU0sQ0FBQzs7MkNBRTdCLEdBQUcsQ0FBQyxZQUFZLEVBQUU7OztBQUVwQixpQkFBTyxHQUFHLHlCQUF5Qjs7MkNBQ2pDLGtCQUFHLFNBQVMsQ0FBQyxZQUFZLEVBQUssT0FBTyxTQUFNLEVBQUMsSUFBSSxFQUFFLEdBQUcsRUFBQyxDQUFDOzs7OzJDQUd2RCxzQkFBRSxLQUFLLENBQUMsR0FBRyxDQUFDOzs7O0FBRWxCLGFBQUcsQ0FBQyxVQUFVLHVCQUFxQixPQUFPLENBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxRQUFLLENBQUM7OzsyQ0FFdkQsR0FBRyxDQUFDLFdBQVcsRUFBRTs7Ozs7OztHQUN4QixDQUFDLENBQUM7Q0FDSixDQUFDLENBQUMiLCJmaWxlIjoidGVzdC9pb3MtbG9nLXNwZWNzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdHJhbnNwaWxlOm1vY2hhXG5cbmltcG9ydCB7IElPU0xvZyB9IGZyb20gJy4uJztcbmltcG9ydCBzaW5vbiBmcm9tICdzaW5vbic7XG5pbXBvcnQgeyBmcyB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IGxvZ2dlciBmcm9tICcuLi9saWIvbG9nZ2VyJztcbmltcG9ydCBjaGFpIGZyb20gJ2NoYWknO1xuaW1wb3J0IGNoYWlBc1Byb21pc2VkIGZyb20gJ2NoYWktYXMtcHJvbWlzZWQnO1xuaW1wb3J0IEIgZnJvbSAnYmx1ZWJpcmQnO1xuXG5cbmNoYWkuc2hvdWxkKCk7XG5jaGFpLnVzZShjaGFpQXNQcm9taXNlZCk7XG5cbmNvbnN0IExPR19ESVIgPSBwYXRoLnJlc29sdmUoJ3Rlc3QnLCAnYXNzZXRzJywgJ2xvZ3MnKTtcblxuZGVzY3JpYmUoJ3N5c3RlbSBsb2dzJywgKCkgPT4ge1xuICBsZXQgdG1wU3lzdGVtTG9nO1xuICBsZXQgc2ltO1xuICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcbiAgICAvLyBnZXQgdGhlIHNpbXVsYXRvciwgYW5kIHN0dWIgd2hhdCB3aWxsIGJlIGNhbGxlZFxuICAgIHNpbSA9IHtcbiAgICAgIHVkaWQ6ICdmYWtlLXVkaWQnLFxuICAgICAgZ2V0TG9nRGlyOiAoKSA9PiB7fSxcbiAgICAgIGdldFBsYXRmb3JtVmVyc2lvbjogKCkgPT4ge31cbiAgICB9O1xuICAgIHNpbm9uLnN0dWIoc2ltLCAnZ2V0TG9nRGlyJykucmV0dXJucyhMT0dfRElSKTtcbiAgICBzaW5vbi5zdHViKHNpbSwgJ2dldFBsYXRmb3JtVmVyc2lvbicpLnJldHVybnMoJzguNCcpO1xuXG4gICAgLy8gY29weSB0aGUgZmlsZSBpbnRvIGEgdGVtcG9yYXJ5IGxvY2F0aW9uLCBzbyB3ZSBjYW4gbXVjayB3aXRoIGl0XG4gICAgbGV0IGZpeFN5c3RlbUxvZyA9IHBhdGgucmVzb2x2ZShMT0dfRElSLCAnc3lzdGVtLmxvZy5maXh0dXJlJyk7XG4gICAgdG1wU3lzdGVtTG9nID0gcGF0aC5yZXNvbHZlKExPR19ESVIsICdzeXN0ZW0ubG9nJyk7XG4gICAgYXdhaXQgZnMuY29weUZpbGUoZml4U3lzdGVtTG9nLCB0bXBTeXN0ZW1Mb2cpO1xuICB9KTtcbiAgYWZ0ZXJFYWNoKGFzeW5jICgpID0+IHtcbiAgICBpZiAoYXdhaXQgZnMuZXhpc3RzKHRtcFN5c3RlbUxvZykpIHtcbiAgICAgIGF3YWl0IGZzLnVubGluayh0bXBTeXN0ZW1Mb2cpO1xuICAgIH1cbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBiZWdpbiBsb2cgY2FwdHVyZScsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgbG9nID0gbmV3IElPU0xvZyh7c2ltLCBzaG93TG9nczogdHJ1ZX0pO1xuICAgIGxldCBzcHkgPSBzaW5vbi5zcHkobG9nZ2VyLCAnaW5mbycpO1xuXG4gICAgYXdhaXQgbG9nLnN0YXJ0Q2FwdHVyZSgpO1xuXG4gICAgbGV0IG1lc3NhZ2UgPSAnVGhpcyBpcyBhIHRlc3QgbG9nIGxpbmUnO1xuICAgIGF3YWl0IGZzLndyaXRlRmlsZSh0bXBTeXN0ZW1Mb2csIGAke21lc3NhZ2V9XFxuYCwge2ZsYWc6ICdhJ30pO1xuXG4gICAgLy8gb24gc29tZSBzbG93IHN5c3RlbSAoZS5nLiwgVHJhdmlzKSBuZWVkIGEgbW9tZW50XG4gICAgYXdhaXQgQi5kZWxheSg1MDApO1xuXG4gICAgc3B5LmNhbGxlZFdpdGgoYFtJT1NfU1lTTE9HX1JPV10gJHttZXNzYWdlfWApLnNob3VsZC5iZS50cnVlO1xuXG4gICAgYXdhaXQgbG9nLnN0b3BDYXB0dXJlKCk7XG4gIH0pO1xufSk7XG4iXX0=