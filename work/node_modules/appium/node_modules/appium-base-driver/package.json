{
  "_args": [
    [
      "appium-base-driver@https://registry.npmjs.org/appium-base-driver/-/appium-base-driver-1.3.0.tgz",
      "/Users/thyag/work/node_modules/appium"
    ]
  ],
  "_from": "appium-base-driver@>=1.3.0 <2.0.0",
  "_id": "appium-base-driver@1.3.0",
  "_inCache": true,
  "_location": "/appium/appium-base-driver",
  "_phantomChildren": {
    "source-map": "0.1.32"
  },
  "_requested": {
    "name": "appium-base-driver",
    "raw": "appium-base-driver@https://registry.npmjs.org/appium-base-driver/-/appium-base-driver-1.3.0.tgz",
    "rawSpec": "https://registry.npmjs.org/appium-base-driver/-/appium-base-driver-1.3.0.tgz",
    "scope": null,
    "spec": "https://registry.npmjs.org/appium-base-driver/-/appium-base-driver-1.3.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/appium",
    "/appium/appium-android-driver",
    "/appium/appium-fake-driver",
    "/appium/appium-ios-driver",
    "/appium/appium-selendroid-driver"
  ],
  "_resolved": "https://registry.npmjs.org/appium-base-driver/-/appium-base-driver-1.3.0.tgz",
  "_shasum": "535e8f374e4d6aa624291d97679b624bbb235866",
  "_shrinkwrap": null,
  "_spec": "appium-base-driver@https://registry.npmjs.org/appium-base-driver/-/appium-base-driver-1.3.0.tgz",
  "_where": "/Users/thyag/work/node_modules/appium",
  "author": {
    "name": "appium"
  },
  "bin": {},
  "bugs": {
    "url": "https://github.com/appium/appium-base-driver/issues"
  },
  "dependencies": {
    "adm-zip": "^0.4.7",
    "appium-logger": "^2.1.0",
    "appium-support": "^2.0.9",
    "asyncbox": "^2.3.1",
    "babel-runtime": "=5.8.24",
    "bluebird": "^2.10.2",
    "lodash": "^4.0.0",
    "mobile-json-wire-protocol": "^1.2.0",
    "request": "^2.64.0",
    "source-map-support": "^0.4.0",
    "teen_process": "^1.3.1",
    "uuid-js": "^0.7.5",
    "validate.js": "^0.9.0"
  },
  "description": "Base driver class for Appium drivers",
  "devDependencies": {
    "appium-express": "^1.2.0",
    "appium-gulp-plugins": "^1.3.12",
    "chai": "^3.3.0",
    "chai-as-promised": "^5.1.0",
    "content-disposition": "^0.5.0",
    "finalhandler": "^0.4.0",
    "gulp": "^3.9.0",
    "request-promise": "^2.0.0",
    "serve-static": "^1.10.0",
    "sinon": "^1.17.1"
  },
  "directories": {
    "lib": "lib"
  },
  "engines": [
    "node"
  ],
  "homepage": "https://github.com/appium/appium-base-driver#readme",
  "keywords": [
    "appium"
  ],
  "license": "Apache-2.0",
  "main": "./build/index.js",
  "name": "appium-base-driver",
  "optionalDependencies": {},
  "readme": "appium-base-driver\n===================\n[![NPM version](http://img.shields.io/npm/v/appium-base-driver.svg)](https://npmjs.org/package/appium-base-driver)\n[![Downloads](http://img.shields.io/npm/dm/appium-base-driver.svg)](https://npmjs.org/package/appium-base-driver)\n[![Dependency Status](https://david-dm.org/appium/appium-base-driver.svg)](https://david-dm.org/appium/appium-base-driver)\n[![devDependency Status](https://david-dm.org/appium/appium-base-driver/dev-status.svg)](https://david-dm.org/appium/appium-base-driver#info=devDependencies)\n\n[![Build Status](https://travis-ci.org/appium/appium-base-driver.svg?branch=master)](https://travis-ci.org/appium/appium-base-driver)\n[![Coverage Status](https://coveralls.io/repos/appium/appium-base-driver/badge.svg?branch=master)](https://coveralls.io/r/appium/appium-base-driver?branch=master)\n\nThis is the parent class that all [appium](appium.io) drivers inherit from. Appium drivers themselves can either be started from the command line as standalone appium servers, or can be included by another module (appium) which then proxies commands to the appropriate driver based on [Desired Capabilities](https://github.com/appium/appium/blob/master/docs/en/writing-running-appium/caps.md).\n\nAn appium driver is a module which processes [Mobile Json Wire Protocol](https://code.google.com/p/selenium/source/browse/spec-draft.md?repo=mobile) commands and controls a device accordingly. The commands can either come in over HTTP as json api requests, or they can be passed to the driver object programmatically as already-parsed json object (without the HTTP headers and junk).\n\nThe appium Base driver already includes the [mjsonwp](https://github.com/appium/node-mobile-json-wire-protocol) module, which is the HTTP server that converts incoming requests into json objects that get sent to the driver programmatically.\n\nThe appium Base driver already has all the REST api routes, validation, and error codes supplied by [mjsonwp](https://github.com/appium/node-mobile-json-wire-protocol).\n\nAppium drivers are designed to have a *single testing session* per instantiation. This means that one Driver object should be attached to a single device and handle commands from a single client. The main appium driver handles multiple sessions and instantiates a new instance of the desired driver for each new session.\n\n## Writing your own appium driver\n\nWriting your own appium driver starts with inheriting and extending this Base driver module.\n\nAppium Base driver has some properties that all drivers share:\n\n - `driver.opts` - these are the options passed into the driver constructor. Your driver's constructor should take an object of options and pass it on the the Base driver by calling `super(opts)` in your constructor.\n\n- `driver.desiredCapConstraints` - Base driver sets this property with a customer `setter` function so that when you create a driver, you can add an object which defines the validation contraints of which desired capabilities your new driver can handle. Of course each driver will have it's own specific desired capabilities. Look for examples on our other drivers.\n\n- `driver.createSession(caps)` - this is the function which gets desired capabilities and creates a session. Make sure to call `super.createSession(caps)` so that things like `this.sessionId` and `this.caps` are populated, and the caps are validated against your `desiredCapConstraints`.\n\n- `driver.caps` - these are the desired capabilities for the current session.\n \n- `driver.sessionId` - this is the ID of the current session. It gets populated automaticall by `baseDriver.createSession`.\n\n- `driver.proxyReqRes()` - used by mjsonwp module for proxying http commands to another process (like chromedriver or selendroid)\n \n- `driver.jwpProxyAvoid` - used by mjsonwp module. You can specify what REST api routes which you want to SKIP the automatic proxy to another server (which is optional) and instead be handled by your driver.\n\n\nBase driver exposes a promise called `onUnexpectedShutdown` which is a promise which your driver must reject in cases where an unexpected error occurs and you want to signal to the appium server at large that your driver is now shutting down.\n\nYour driver should also implement a startUnexpectedShutdown method?\n\n\n## Watch\n\n```\nnpm run watch\n```\n\n## Test\n\n```\nnpm test\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/appium/appium-base-driver.git"
  },
  "scripts": {
    "prepublish": "gulp prepublish",
    "test": "gulp once",
    "watch": "gulp"
  },
  "version": "1.3.0"
}
