'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _appiumExpress = require('appium-express');

var _appiumExpress2 = _interopRequireDefault(_appiumExpress);

var _mobileJsonWireProtocol = require('mobile-json-wire-protocol');

var _requestPromise = require('request-promise');

var _requestPromise2 = _interopRequireDefault(_requestPromise);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var _chaiAsPromised = require('chai-as-promised');

var _chaiAsPromised2 = _interopRequireDefault(_chaiAsPromised);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _libDeviceSettings = require('../lib/device-settings');

var _libDeviceSettings2 = _interopRequireDefault(_libDeviceSettings);

var should = _chai2['default'].should();
_chai2['default'].use(_chaiAsPromised2['default']);

function baseDriverE2ETests(DriverClass) {
  var _this = this;

  var defaultCaps = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  describe('BaseDriver (e2e)', function () {
    var baseServer = undefined,
        d = new DriverClass();
    before(function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
            context$3$0.next = 2;
            return _regeneratorRuntime.awrap((0, _appiumExpress2['default'])((0, _mobileJsonWireProtocol.routeConfiguringFunction)(d), 8181));

          case 2:
            baseServer = context$3$0.sent;

          case 3:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });
    after(function () {
      baseServer.close();
    });

    describe('session handling', function () {
      it('should create session and retrieve a session id, then delete it', function callee$3$0() {
        var res;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                url: 'http://localhost:8181/wd/hub/session',
                method: 'POST',
                json: { desiredCapabilities: defaultCaps, requiredCapabilities: {} },
                simple: false,
                resolveWithFullResponse: true
              }));

            case 2:
              res = context$4$0.sent;

              res.statusCode.should.equal(200);
              res.body.status.should.equal(0);
              should.exist(res.body.sessionId);
              res.body.value.should.eql(defaultCaps);

              context$4$0.next = 9;
              return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                url: 'http://localhost:8181/wd/hub/session/' + d.sessionId,
                method: 'DELETE',
                json: true,
                simple: false,
                resolveWithFullResponse: true
              }));

            case 9:
              res = context$4$0.sent;

              res.statusCode.should.equal(200);
              res.body.status.should.equal(0);
              should.equal(d.sessionId, null);

            case 13:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    });

    it.skip('should throw NYI for commands not implemented', function callee$2$0() {
      return _regeneratorRuntime.async(function callee$2$0$(context$3$0) {
        while (1) switch (context$3$0.prev = context$3$0.next) {
          case 0:
          case 'end':
            return context$3$0.stop();
        }
      }, null, _this);
    });

    describe('command timeouts', function () {
      function startSession(timeout) {
        var caps = _lodash2['default'].clone(defaultCaps);
        caps.newCommandTimeout = timeout;
        return (0, _requestPromise2['default'])({
          url: 'http://localhost:8181/wd/hub/session',
          method: 'POST',
          json: { desiredCapabilities: caps, requiredCapabilities: {} }
        });
      }

      function endSession(id) {
        return (0, _requestPromise2['default'])({
          url: 'http://localhost:8181/wd/hub/session/' + id,
          method: 'DELETE',
          json: true,
          simple: false
        });
      }

      d.findElement = (function () {
        return 'foo';
      }).bind(d);

      d.findElements = (function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(_bluebird2['default'].delay(200));

            case 2:
              return context$4$0.abrupt('return', ['foo']);

            case 3:
            case 'end':
              return context$4$0.stop();
          }
        }, null, this);
      }).bind(d);

      it('should set a default commandTimeout', function callee$3$0() {
        var newSession;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(startSession());

            case 2:
              newSession = context$4$0.sent;

              d.newCommandTimeoutMs.should.be.above(0);
              context$4$0.next = 6;
              return _regeneratorRuntime.awrap(endSession(newSession.sessionId));

            case 6:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });

      it('should timeout on commands using commandTimeout cap', function callee$3$0() {
        var newSession, res;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(startSession(0.25));

            case 2:
              newSession = context$4$0.sent;
              context$4$0.next = 5;
              return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                url: 'http://localhost:8181/wd/hub/session/' + d.sessionId + '/element',
                method: 'POST',
                json: { using: 'name', value: 'foo' }
              }));

            case 5:
              context$4$0.next = 7;
              return _regeneratorRuntime.awrap(_bluebird2['default'].delay(400));

            case 7:
              context$4$0.next = 9;
              return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                url: 'http://localhost:8181/wd/hub/session/' + d.sessionId,
                method: 'GET',
                json: true,
                simple: false
              }));

            case 9:
              res = context$4$0.sent;

              res.status.should.equal(6);
              should.equal(d.sessionId, null);
              context$4$0.next = 14;
              return _regeneratorRuntime.awrap(endSession(newSession.sessionId));

            case 14:
              res = context$4$0.sent;

              res.status.should.equal(6);

            case 16:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });

      it('should not timeout with commandTimeout of false', function callee$3$0() {
        var newSession, start, res;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(startSession(0.1));

            case 2:
              newSession = context$4$0.sent;
              start = Date.now();
              context$4$0.next = 6;
              return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                url: 'http://localhost:8181/wd/hub/session/' + d.sessionId + '/elements',
                method: 'POST',
                json: { using: 'name', value: 'foo' }
              }));

            case 6:
              res = context$4$0.sent;

              (Date.now() - start).should.be.above(150);
              res.value.should.eql(['foo']);
              context$4$0.next = 11;
              return _regeneratorRuntime.awrap(endSession(newSession.sessionId));

            case 11:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });

      it('should not timeout with commandTimeout of 0', function callee$3$0() {
        var newSession, res;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              d.newCommandTimeoutMs = 2;
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(startSession(0));

            case 3:
              newSession = context$4$0.sent;
              context$4$0.next = 6;
              return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                url: 'http://localhost:8181/wd/hub/session/' + d.sessionId + '/element',
                method: 'POST',
                json: { using: 'name', value: 'foo' }
              }));

            case 6:
              context$4$0.next = 8;
              return _regeneratorRuntime.awrap(_bluebird2['default'].delay(400));

            case 8:
              context$4$0.next = 10;
              return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                url: 'http://localhost:8181/wd/hub/session/' + d.sessionId,
                method: 'GET',
                json: true,
                simple: false
              }));

            case 10:
              res = context$4$0.sent;

              res.status.should.equal(0);
              context$4$0.next = 14;
              return _regeneratorRuntime.awrap(endSession(newSession.sessionId));

            case 14:
              res = context$4$0.sent;

              res.status.should.equal(0);

              d.newCommandTimeoutMs = 60 * 1000;

            case 17:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });

      it('should not timeout if its just the command taking awhile', function callee$3$0() {
        var newSession, res;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(startSession(0.25));

            case 2:
              newSession = context$4$0.sent;
              context$4$0.next = 5;
              return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                url: 'http://localhost:8181/wd/hub/session/' + d.sessionId + '/element',
                method: 'POST',
                json: { using: 'name', value: 'foo' }
              }));

            case 5:
              context$4$0.next = 7;
              return _regeneratorRuntime.awrap(_bluebird2['default'].delay(400));

            case 7:
              context$4$0.next = 9;
              return _regeneratorRuntime.awrap((0, _requestPromise2['default'])({
                url: 'http://localhost:8181/wd/hub/session/' + d.sessionId,
                method: 'GET',
                json: true,
                simple: false
              }));

            case 9:
              res = context$4$0.sent;

              res.status.should.equal(6);
              should.equal(d.sessionId, null);
              context$4$0.next = 14;
              return _regeneratorRuntime.awrap(endSession(newSession.sessionId));

            case 14:
              res = context$4$0.sent;

              res.status.should.equal(6);

            case 16:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });

      it('should not have a timer running before or after a session', function callee$3$0() {
        var newSession;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              should.not.exist(d.noCommandTimer);
              context$4$0.next = 3;
              return _regeneratorRuntime.awrap(startSession(0.25));

            case 3:
              newSession = context$4$0.sent;

              newSession.sessionId.should.equal(d.sessionId);
              should.exist(d.noCommandTimer);
              context$4$0.next = 8;
              return _regeneratorRuntime.awrap(endSession(newSession.sessionId));

            case 8:
              should.not.exist(d.noCommandTimer);

            case 9:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    });

    describe('settings api', function () {
      before(function () {
        d.settings = new _libDeviceSettings2['default']({ ignoreUnimportantViews: false });
      });
      it('should be able to get settings object', function () {
        d.settings.getSettings().ignoreUnimportantViews.should.be['false'];
      });
      it('should throw error when updateSettings method is not defined', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(d.settings.update({ ignoreUnimportantViews: true }).should.eventually.be.rejectedWith('onSettingsUpdate'));

            case 2:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
      it('should throw error for invalid update object', function callee$3$0() {
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              context$4$0.next = 2;
              return _regeneratorRuntime.awrap(d.settings.update('invalid json').should.eventually.be.rejectedWith('JSON'));

            case 2:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    });

    describe('unexpected exits', function () {
      it('should reject a current command when the driver crashes', function callee$3$0() {
        var p, res;
        return _regeneratorRuntime.async(function callee$3$0$(context$4$0) {
          while (1) switch (context$4$0.prev = context$4$0.next) {
            case 0:
              d._oldGetStatus = d.getStatus;
              d.getStatus = (function callee$4$0() {
                return _regeneratorRuntime.async(function callee$4$0$(context$5$0) {
                  while (1) switch (context$5$0.prev = context$5$0.next) {
                    case 0:
                      context$5$0.next = 2;
                      return _regeneratorRuntime.awrap(_bluebird2['default'].delay(5000));

                    case 2:
                    case 'end':
                      return context$5$0.stop();
                  }
                }, null, this);
              }).bind(d);
              p = (0, _requestPromise2['default'])({
                url: 'http://localhost:8181/wd/hub/status',
                method: 'GET',
                json: true,
                simple: false
              });
              context$4$0.next = 5;
              return _regeneratorRuntime.awrap(_bluebird2['default'].delay(20));

            case 5:
              d.startUnexpectedShutdown(new Error('Crashytimes'));
              context$4$0.next = 8;
              return _regeneratorRuntime.awrap(p);

            case 8:
              res = context$4$0.sent;

              res.status.should.equal(13);
              res.value.message.should.contain('Crashytimes');
              context$4$0.next = 13;
              return _regeneratorRuntime.awrap(d.onUnexpectedShutdown.should.be.rejectedWith('Crashytimes'));

            case 13:
            case 'end':
              return context$4$0.stop();
          }
        }, null, _this);
      });
    });
  });
}

exports['default'] = baseDriverE2ETests;
module.exports = exports['default'];

// make sure that the request gets to the server before our shutdown
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvZHJpdmVyLWUyZS10ZXN0cy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O3NCQUFjLFFBQVE7Ozs7NkJBQ0gsZ0JBQWdCOzs7O3NDQUNNLDJCQUEyQjs7OEJBQ2hELGlCQUFpQjs7OztvQkFDcEIsTUFBTTs7Ozs4QkFDSSxrQkFBa0I7Ozs7d0JBQy9CLFVBQVU7Ozs7aUNBQ0csd0JBQXdCOzs7O0FBRW5ELElBQU0sTUFBTSxHQUFHLGtCQUFLLE1BQU0sRUFBRSxDQUFDO0FBQzdCLGtCQUFLLEdBQUcsNkJBQWdCLENBQUM7O0FBRXpCLFNBQVMsa0JBQWtCLENBQUUsV0FBVyxFQUFvQjs7O01BQWxCLFdBQVcseURBQUcsRUFBRTs7QUFDeEQsVUFBUSxDQUFDLGtCQUFrQixFQUFFLFlBQU07QUFDakMsUUFBSSxVQUFVLFlBQUE7UUFBRSxDQUFDLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQztBQUN0QyxVQUFNLENBQUM7Ozs7OzZDQUNjLGdDQUFPLHNEQUF5QixDQUFDLENBQUMsRUFBRSxJQUFJLENBQUM7OztBQUE1RCxzQkFBVTs7Ozs7OztLQUNYLENBQUMsQ0FBQztBQUNILFNBQUssQ0FBQyxZQUFNO0FBQ1YsZ0JBQVUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztLQUNwQixDQUFDLENBQUM7O0FBRUgsWUFBUSxDQUFDLGtCQUFrQixFQUFFLFlBQU07QUFDakMsUUFBRSxDQUFDLGlFQUFpRSxFQUFFO1lBQ2hFLEdBQUc7Ozs7OytDQUFTLGlDQUFRO0FBQ3RCLG1CQUFHLEVBQUUsc0NBQXNDO0FBQzNDLHNCQUFNLEVBQUUsTUFBTTtBQUNkLG9CQUFJLEVBQUUsRUFBQyxtQkFBbUIsRUFBRSxXQUFXLEVBQUUsb0JBQW9CLEVBQUUsRUFBRSxFQUFDO0FBQ2xFLHNCQUFNLEVBQUUsS0FBSztBQUNiLHVDQUF1QixFQUFFLElBQUk7ZUFDOUIsQ0FBQzs7O0FBTkUsaUJBQUc7O0FBUVAsaUJBQUcsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLEtB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LENBQUMsQ0FBQyxDQUFDO0FBQ04sZUFBQyxHQUFHLGlDQUFRO0FBQ2QsbUJBQUcsRUFBRSxxQ0FBcUM7QUFDMUMsc0JBQU0sRUFBRSxLQUFLO0FBQ2Isb0JBQUksRUFBRSxJQUFJO0FBQ1Ysc0JBQU0sRUFBRSxLQUFLO2VBQ2QsQ0FBQzs7K0NBRUksc0JBQUUsS0FBSyxDQUFDLEVBQUUsQ0FBQzs7O0FBQ2pCLGVBQUMsQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDOzsrQ0FDcEMsQ0FBQzs7O0FBQWIsaUJBQUc7O0FBQ1AsaUJBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUM1QixpQkFBRyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQzs7K0NBQzFDLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUM7Ozs7Ozs7T0FDbkUsQ0FBQyxDQUFDO0tBQ0osQ0FBQyxDQUFDO0dBRUosQ0FBQyxDQUFDO0NBQ0o7O3FCQUVjLGtCQUFrQiIsImZpbGUiOiJ0ZXN0L2RyaXZlci1lMmUtdGVzdHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHNlcnZlciBmcm9tICdhcHBpdW0tZXhwcmVzcyc7XG5pbXBvcnQgeyByb3V0ZUNvbmZpZ3VyaW5nRnVuY3Rpb24gfSBmcm9tICdtb2JpbGUtanNvbi13aXJlLXByb3RvY29sJztcbmltcG9ydCByZXF1ZXN0IGZyb20gJ3JlcXVlc3QtcHJvbWlzZSc7XG5pbXBvcnQgY2hhaSBmcm9tICdjaGFpJztcbmltcG9ydCBjaGFpQXNQcm9taXNlZCBmcm9tICdjaGFpLWFzLXByb21pc2VkJztcbmltcG9ydCBCIGZyb20gJ2JsdWViaXJkJztcbmltcG9ydCBEZXZpY2VTZXR0aW5ncyBmcm9tICcuLi9saWIvZGV2aWNlLXNldHRpbmdzJztcblxuY29uc3Qgc2hvdWxkID0gY2hhaS5zaG91bGQoKTtcbmNoYWkudXNlKGNoYWlBc1Byb21pc2VkKTtcblxuZnVuY3Rpb24gYmFzZURyaXZlckUyRVRlc3RzIChEcml2ZXJDbGFzcywgZGVmYXVsdENhcHMgPSB7fSkge1xuICBkZXNjcmliZSgnQmFzZURyaXZlciAoZTJlKScsICgpID0+IHtcbiAgICBsZXQgYmFzZVNlcnZlciwgZCA9IG5ldyBEcml2ZXJDbGFzcygpO1xuICAgIGJlZm9yZShhc3luYyAoKSA9PiB7XG4gICAgICBiYXNlU2VydmVyID0gYXdhaXQgc2VydmVyKHJvdXRlQ29uZmlndXJpbmdGdW5jdGlvbihkKSwgODE4MSk7XG4gICAgfSk7XG4gICAgYWZ0ZXIoKCkgPT4ge1xuICAgICAgYmFzZVNlcnZlci5jbG9zZSgpO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ3Nlc3Npb24gaGFuZGxpbmcnLCAoKSA9PiB7XG4gICAgICBpdCgnc2hvdWxkIGNyZWF0ZSBzZXNzaW9uIGFuZCByZXRyaWV2ZSBhIHNlc3Npb24gaWQsIHRoZW4gZGVsZXRlIGl0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBsZXQgcmVzID0gYXdhaXQgcmVxdWVzdCh7XG4gICAgICAgICAgdXJsOiAnaHR0cDovL2xvY2FsaG9zdDo4MTgxL3dkL2h1Yi9zZXNzaW9uJyxcbiAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICBqc29uOiB7ZGVzaXJlZENhcGFiaWxpdGllczogZGVmYXVsdENhcHMsIHJlcXVpcmVkQ2FwYWJpbGl0aWVzOiB7fX0sXG4gICAgICAgICAgc2ltcGxlOiBmYWxzZSxcbiAgICAgICAgICByZXNvbHZlV2l0aEZ1bGxSZXNwb25zZTogdHJ1ZVxuICAgICAgICB9KTtcblxuICAgICAgICByZXMuc3RhdHVzQ29kZS5zaG91bGQuZXF1YWwoMjAwKTtcbiAgICAgICAgcmVzLmJvZHkuc3RhdHVzLnNob3VsZC5lcXVhbCgwKTtcbiAgICAgICAgc2hvdWxkLmV4aXN0KHJlcy5ib2R5LnNlc3Npb25JZCk7XG4gICAgICAgIHJlcy5ib2R5LnZhbHVlLnNob3VsZC5lcWwoZGVmYXVsdENhcHMpO1xuXG4gICAgICAgIHJlcyA9IGF3YWl0IHJlcXVlc3Qoe1xuICAgICAgICAgIHVybDogYGh0dHA6Ly9sb2NhbGhvc3Q6ODE4MS93ZC9odWIvc2Vzc2lvbi8ke2Quc2Vzc2lvbklkfWAsXG4gICAgICAgICAgbWV0aG9kOiAnREVMRVRFJyxcbiAgICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICAgIHNpbXBsZTogZmFsc2UsXG4gICAgICAgICAgcmVzb2x2ZVdpdGhGdWxsUmVzcG9uc2U6IHRydWVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmVzLnN0YXR1c0NvZGUuc2hvdWxkLmVxdWFsKDIwMCk7XG4gICAgICAgIHJlcy5ib2R5LnN0YXR1cy5zaG91bGQuZXF1YWwoMCk7XG4gICAgICAgIHNob3VsZC5lcXVhbChkLnNlc3Npb25JZCwgbnVsbCk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0LnNraXAoJ3Nob3VsZCB0aHJvdyBOWUkgZm9yIGNvbW1hbmRzIG5vdCBpbXBsZW1lbnRlZCcsIGFzeW5jICgpID0+IHtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCdjb21tYW5kIHRpbWVvdXRzJywgKCkgPT4ge1xuICAgICAgZnVuY3Rpb24gc3RhcnRTZXNzaW9uICh0aW1lb3V0KSB7XG4gICAgICAgIGxldCBjYXBzID0gXy5jbG9uZShkZWZhdWx0Q2Fwcyk7XG4gICAgICAgIGNhcHMubmV3Q29tbWFuZFRpbWVvdXQgPSB0aW1lb3V0O1xuICAgICAgICByZXR1cm4gcmVxdWVzdCh7XG4gICAgICAgICAgdXJsOiAnaHR0cDovL2xvY2FsaG9zdDo4MTgxL3dkL2h1Yi9zZXNzaW9uJyxcbiAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICBqc29uOiB7ZGVzaXJlZENhcGFiaWxpdGllczogY2FwcywgcmVxdWlyZWRDYXBhYmlsaXRpZXM6IHt9fSxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGVuZFNlc3Npb24gKGlkKSB7XG4gICAgICAgIHJldHVybiByZXF1ZXN0KHtcbiAgICAgICAgICB1cmw6IGBodHRwOi8vbG9jYWxob3N0OjgxODEvd2QvaHViL3Nlc3Npb24vJHtpZH1gLFxuICAgICAgICAgIG1ldGhvZDogJ0RFTEVURScsXG4gICAgICAgICAganNvbjogdHJ1ZSxcbiAgICAgICAgICBzaW1wbGU6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBkLmZpbmRFbGVtZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gJ2Zvbyc7XG4gICAgICB9LmJpbmQoZCk7XG5cbiAgICAgIGQuZmluZEVsZW1lbnRzID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICBhd2FpdCBCLmRlbGF5KDIwMCk7XG4gICAgICAgIHJldHVybiBbJ2ZvbyddO1xuICAgICAgfS5iaW5kKGQpO1xuXG4gICAgICBpdCgnc2hvdWxkIHNldCBhIGRlZmF1bHQgY29tbWFuZFRpbWVvdXQnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGxldCBuZXdTZXNzaW9uID0gYXdhaXQgc3RhcnRTZXNzaW9uKCk7XG4gICAgICAgIGQubmV3Q29tbWFuZFRpbWVvdXRNcy5zaG91bGQuYmUuYWJvdmUoMCk7XG4gICAgICAgIGF3YWl0IGVuZFNlc3Npb24obmV3U2Vzc2lvbi5zZXNzaW9uSWQpO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgdGltZW91dCBvbiBjb21tYW5kcyB1c2luZyBjb21tYW5kVGltZW91dCBjYXAnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGxldCBuZXdTZXNzaW9uID0gYXdhaXQgc3RhcnRTZXNzaW9uKDAuMjUpO1xuXG4gICAgICAgIGF3YWl0IHJlcXVlc3Qoe1xuICAgICAgICAgIHVybDogYGh0dHA6Ly9sb2NhbGhvc3Q6ODE4MS93ZC9odWIvc2Vzc2lvbi8ke2Quc2Vzc2lvbklkfS9lbGVtZW50YCxcbiAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICBqc29uOiB7dXNpbmc6ICduYW1lJywgdmFsdWU6ICdmb28nfSxcbiAgICAgICAgfSk7XG4gICAgICAgIGF3YWl0IEIuZGVsYXkoNDAwKTtcbiAgICAgICAgbGV0IHJlcyA9IGF3YWl0IHJlcXVlc3Qoe1xuICAgICAgICAgIHVybDogYGh0dHA6Ly9sb2NhbGhvc3Q6ODE4MS93ZC9odWIvc2Vzc2lvbi8ke2Quc2Vzc2lvbklkfWAsXG4gICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICAgIHNpbXBsZTogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICAgIHJlcy5zdGF0dXMuc2hvdWxkLmVxdWFsKDYpO1xuICAgICAgICBzaG91bGQuZXF1YWwoZC5zZXNzaW9uSWQsIG51bGwpO1xuICAgICAgICByZXMgPSBhd2FpdCBlbmRTZXNzaW9uKG5ld1Nlc3Npb24uc2Vzc2lvbklkKTtcbiAgICAgICAgcmVzLnN0YXR1cy5zaG91bGQuZXF1YWwoNik7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBub3QgdGltZW91dCB3aXRoIGNvbW1hbmRUaW1lb3V0IG9mIGZhbHNlJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBsZXQgbmV3U2Vzc2lvbiA9IGF3YWl0IHN0YXJ0U2Vzc2lvbigwLjEpO1xuICAgICAgICBsZXQgc3RhcnQgPSBEYXRlLm5vdygpO1xuICAgICAgICBsZXQgcmVzID0gYXdhaXQgcmVxdWVzdCh7XG4gICAgICAgICAgdXJsOiBgaHR0cDovL2xvY2FsaG9zdDo4MTgxL3dkL2h1Yi9zZXNzaW9uLyR7ZC5zZXNzaW9uSWR9L2VsZW1lbnRzYCxcbiAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICBqc29uOiB7dXNpbmc6ICduYW1lJywgdmFsdWU6ICdmb28nfSxcbiAgICAgICAgfSk7XG4gICAgICAgIChEYXRlLm5vdygpIC0gc3RhcnQpLnNob3VsZC5iZS5hYm92ZSgxNTApO1xuICAgICAgICByZXMudmFsdWUuc2hvdWxkLmVxbChbJ2ZvbyddKTtcbiAgICAgICAgYXdhaXQgZW5kU2Vzc2lvbihuZXdTZXNzaW9uLnNlc3Npb25JZCk7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBub3QgdGltZW91dCB3aXRoIGNvbW1hbmRUaW1lb3V0IG9mIDAnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGQubmV3Q29tbWFuZFRpbWVvdXRNcyA9IDI7XG4gICAgICAgIGxldCBuZXdTZXNzaW9uID0gYXdhaXQgc3RhcnRTZXNzaW9uKDApO1xuXG4gICAgICAgIGF3YWl0IHJlcXVlc3Qoe1xuICAgICAgICAgIHVybDogYGh0dHA6Ly9sb2NhbGhvc3Q6ODE4MS93ZC9odWIvc2Vzc2lvbi8ke2Quc2Vzc2lvbklkfS9lbGVtZW50YCxcbiAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICBqc29uOiB7dXNpbmc6ICduYW1lJywgdmFsdWU6ICdmb28nfSxcbiAgICAgICAgfSk7XG4gICAgICAgIGF3YWl0IEIuZGVsYXkoNDAwKTtcbiAgICAgICAgbGV0IHJlcyA9IGF3YWl0IHJlcXVlc3Qoe1xuICAgICAgICAgIHVybDogYGh0dHA6Ly9sb2NhbGhvc3Q6ODE4MS93ZC9odWIvc2Vzc2lvbi8ke2Quc2Vzc2lvbklkfWAsXG4gICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICAgIHNpbXBsZTogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICAgIHJlcy5zdGF0dXMuc2hvdWxkLmVxdWFsKDApO1xuICAgICAgICByZXMgPSBhd2FpdCBlbmRTZXNzaW9uKG5ld1Nlc3Npb24uc2Vzc2lvbklkKTtcbiAgICAgICAgcmVzLnN0YXR1cy5zaG91bGQuZXF1YWwoMCk7XG5cbiAgICAgICAgZC5uZXdDb21tYW5kVGltZW91dE1zID0gNjAgKiAxMDAwO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgbm90IHRpbWVvdXQgaWYgaXRzIGp1c3QgdGhlIGNvbW1hbmQgdGFraW5nIGF3aGlsZScsIGFzeW5jICgpID0+IHtcbiAgICAgICAgbGV0IG5ld1Nlc3Npb24gPSBhd2FpdCBzdGFydFNlc3Npb24oMC4yNSk7XG4gICAgICAgIGF3YWl0IHJlcXVlc3Qoe1xuICAgICAgICAgIHVybDogYGh0dHA6Ly9sb2NhbGhvc3Q6ODE4MS93ZC9odWIvc2Vzc2lvbi8ke2Quc2Vzc2lvbklkfS9lbGVtZW50YCxcbiAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICBqc29uOiB7dXNpbmc6ICduYW1lJywgdmFsdWU6ICdmb28nfSxcbiAgICAgICAgfSk7XG4gICAgICAgIGF3YWl0IEIuZGVsYXkoNDAwKTtcbiAgICAgICAgbGV0IHJlcyA9IGF3YWl0IHJlcXVlc3Qoe1xuICAgICAgICAgIHVybDogYGh0dHA6Ly9sb2NhbGhvc3Q6ODE4MS93ZC9odWIvc2Vzc2lvbi8ke2Quc2Vzc2lvbklkfWAsXG4gICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICBqc29uOiB0cnVlLFxuICAgICAgICAgIHNpbXBsZTogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICAgIHJlcy5zdGF0dXMuc2hvdWxkLmVxdWFsKDYpO1xuICAgICAgICBzaG91bGQuZXF1YWwoZC5zZXNzaW9uSWQsIG51bGwpO1xuICAgICAgICByZXMgPSBhd2FpdCBlbmRTZXNzaW9uKG5ld1Nlc3Npb24uc2Vzc2lvbklkKTtcbiAgICAgICAgcmVzLnN0YXR1cy5zaG91bGQuZXF1YWwoNik7XG4gICAgICB9KTtcblxuICAgICAgaXQoJ3Nob3VsZCBub3QgaGF2ZSBhIHRpbWVyIHJ1bm5pbmcgYmVmb3JlIG9yIGFmdGVyIGEgc2Vzc2lvbicsIGFzeW5jICgpID0+IHtcbiAgICAgICAgc2hvdWxkLm5vdC5leGlzdChkLm5vQ29tbWFuZFRpbWVyKTtcbiAgICAgICAgbGV0IG5ld1Nlc3Npb24gPSBhd2FpdCBzdGFydFNlc3Npb24oMC4yNSk7XG4gICAgICAgIG5ld1Nlc3Npb24uc2Vzc2lvbklkLnNob3VsZC5lcXVhbChkLnNlc3Npb25JZCk7XG4gICAgICAgIHNob3VsZC5leGlzdChkLm5vQ29tbWFuZFRpbWVyKTtcbiAgICAgICAgYXdhaXQgZW5kU2Vzc2lvbihuZXdTZXNzaW9uLnNlc3Npb25JZCk7XG4gICAgICAgIHNob3VsZC5ub3QuZXhpc3QoZC5ub0NvbW1hbmRUaW1lcik7XG4gICAgICB9KTtcblxuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoJ3NldHRpbmdzIGFwaScsICgpID0+IHtcbiAgICAgIGJlZm9yZSgoKSA9PiB7XG4gICAgICAgIGQuc2V0dGluZ3MgPSBuZXcgRGV2aWNlU2V0dGluZ3Moe2lnbm9yZVVuaW1wb3J0YW50Vmlld3M6IGZhbHNlfSk7XG4gICAgICB9KTtcbiAgICAgIGl0KCdzaG91bGQgYmUgYWJsZSB0byBnZXQgc2V0dGluZ3Mgb2JqZWN0JywoKSA9PiB7XG4gICAgICAgIGQuc2V0dGluZ3MuZ2V0U2V0dGluZ3MoKS5pZ25vcmVVbmltcG9ydGFudFZpZXdzLnNob3VsZC5iZS5mYWxzZTtcbiAgICAgIH0pO1xuICAgICAgaXQoJ3Nob3VsZCB0aHJvdyBlcnJvciB3aGVuIHVwZGF0ZVNldHRpbmdzIG1ldGhvZCBpcyBub3QgZGVmaW5lZCcsIGFzeW5jICgpID0+IHtcbiAgICAgICAgYXdhaXQgZC5zZXR0aW5ncy51cGRhdGUoe2lnbm9yZVVuaW1wb3J0YW50Vmlld3M6IHRydWV9KS5zaG91bGQuZXZlbnR1YWxseVxuICAgICAgICAgICAgICAgIC5iZS5yZWplY3RlZFdpdGgoJ29uU2V0dGluZ3NVcGRhdGUnKTtcbiAgICAgIH0pO1xuICAgICAgaXQoJ3Nob3VsZCB0aHJvdyBlcnJvciBmb3IgaW52YWxpZCB1cGRhdGUgb2JqZWN0JywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBhd2FpdCBkLnNldHRpbmdzLnVwZGF0ZSgnaW52YWxpZCBqc29uJykuc2hvdWxkLmV2ZW50dWFsbHlcbiAgICAgICAgICAgICAgICAuYmUucmVqZWN0ZWRXaXRoKCdKU09OJyk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKCd1bmV4cGVjdGVkIGV4aXRzJywgKCkgPT4ge1xuICAgICAgaXQoJ3Nob3VsZCByZWplY3QgYSBjdXJyZW50IGNvbW1hbmQgd2hlbiB0aGUgZHJpdmVyIGNyYXNoZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGQuX29sZEdldFN0YXR1cyA9IGQuZ2V0U3RhdHVzO1xuICAgICAgICBkLmdldFN0YXR1cyA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBhd2FpdCBCLmRlbGF5KDUwMDApO1xuICAgICAgICB9LmJpbmQoZCk7XG4gICAgICAgIGxldCBwID0gcmVxdWVzdCh7XG4gICAgICAgICAgdXJsOiAnaHR0cDovL2xvY2FsaG9zdDo4MTgxL3dkL2h1Yi9zdGF0dXMnLFxuICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAganNvbjogdHJ1ZSxcbiAgICAgICAgICBzaW1wbGU6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgICAvLyBtYWtlIHN1cmUgdGhhdCB0aGUgcmVxdWVzdCBnZXRzIHRvIHRoZSBzZXJ2ZXIgYmVmb3JlIG91ciBzaHV0ZG93blxuICAgICAgICBhd2FpdCBCLmRlbGF5KDIwKTtcbiAgICAgICAgZC5zdGFydFVuZXhwZWN0ZWRTaHV0ZG93bihuZXcgRXJyb3IoJ0NyYXNoeXRpbWVzJykpO1xuICAgICAgICBsZXQgcmVzID0gYXdhaXQgcDtcbiAgICAgICAgcmVzLnN0YXR1cy5zaG91bGQuZXF1YWwoMTMpO1xuICAgICAgICByZXMudmFsdWUubWVzc2FnZS5zaG91bGQuY29udGFpbignQ3Jhc2h5dGltZXMnKTtcbiAgICAgICAgYXdhaXQgZC5vblVuZXhwZWN0ZWRTaHV0ZG93bi5zaG91bGQuYmUucmVqZWN0ZWRXaXRoKCdDcmFzaHl0aW1lcycpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VEcml2ZXJFMkVUZXN0cztcbiJdfQ==