'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var _mobileJsonWireProtocol = require('mobile-json-wire-protocol');

var _uuidJs = require('uuid-js');

var _uuidJs2 = _interopRequireDefault(_uuidJs);

var commands = {};

commands.createSession = function callee$0$0(caps) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (!(this.sessionId !== null)) {
          context$1$0.next = 2;
          break;
        }

        throw new _mobileJsonWireProtocol.errors.SessionNotCreatedError('Cannot create a new session ' + 'while one is in progress');

      case 2:
        this.validateDesiredCaps(caps);
        this.sessionId = _uuidJs2['default'].create().hex;
        this.caps = caps;
        this.opts = _lodash2['default'].cloneDeep(this.initialOpts);

        // merge caps onto opts so we don't need to worry about what's where
        _Object$assign(this.opts, this.caps);

        // Prevents empty string caps so we don't need to test it everywhere
        if (typeof this.opts.app === 'string' && this.opts.app.trim() === '') {
          this.opts.app = null;
        }

        if (!_lodash2['default'].isUndefined(this.caps.newCommandTimeout)) {
          this.newCommandTimeoutMs = this.caps.newCommandTimeout * 1000;
        }

        // We need to ininitialize one onUnexpectedShutdow promise per session
        // to avoid the promise fulfilment being propagated between sessions.
        this.resetOnUnexpectedShutdown();

        _logger2['default'].info('Session created with session id: ' + this.sessionId);

        return context$1$0.abrupt('return', [this.sessionId, caps]);

      case 12:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.getSessions = function callee$0$0() {
  var ret;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        ret = [];

        if (this.sessionId) {
          ret.push({
            id: this.sessionId,
            capabilities: this.caps
          });
        }

        return context$1$0.abrupt('return', ret);

      case 3:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.getSession = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        return context$1$0.abrupt('return', this.caps);

      case 1:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

commands.deleteSession = function callee$0$0() {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        this.clearNewCommandTimeout();
        this.sessionId = null;

      case 2:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

exports['default'] = commands;
module.exports = exports['default'];
/* sessionId */
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy9zZXNzaW9uLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztzQkFBYyxRQUFROzs7O3NCQUNOLFdBQVc7Ozs7c0NBQ0osMkJBQTJCOztzQkFDakMsU0FBUzs7OztBQUUxQixJQUFJLFFBQVEsR0FBRyxFQUFFLENBQUM7O0FBRWxCLFFBQVEsQ0FBQyxhQUFhLEdBQUcsb0JBQWdCLElBQUk7Ozs7Y0FDdkMsSUFBSSxDQUFDLFNBQVMsS0FBSyxJQUFJLENBQUE7Ozs7O2NBQ25CLElBQUksK0JBQU8sc0JBQXNCLENBQUMsOEJBQThCLEdBQzlCLDBCQUEwQixDQUFDOzs7QUFFckUsWUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxDQUFDO0FBQy9CLFlBQUksQ0FBQyxTQUFTLEdBQUcsb0JBQUssTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDO0FBQ25DLFlBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0FBQ2pCLFlBQUksQ0FBQyxJQUFJLEdBQUcsb0JBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQzs7O0FBRzFDLHVCQUFjLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDOzs7QUFJcEMsWUFBSSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLFFBQVEsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUU7QUFDcEUsY0FBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDO1NBQ3RCOztBQUVELFlBQUksQ0FBQyxvQkFBRSxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFO0FBQy9DLGNBQUksQ0FBQyxtQkFBbUIsR0FBSSxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQUFBQyxDQUFDO1NBQ2pFOzs7O0FBSUQsWUFBSSxDQUFDLHlCQUF5QixFQUFFLENBQUM7O0FBRWpDLDRCQUFJLElBQUksdUNBQXFDLElBQUksQ0FBQyxTQUFTLENBQUcsQ0FBQzs7NENBRXhELENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUM7Ozs7Ozs7Q0FDOUIsQ0FBQzs7QUFFRixRQUFRLENBQUMsV0FBVyxHQUFHO01BQ2pCLEdBQUc7Ozs7QUFBSCxXQUFHLEdBQUcsRUFBRTs7QUFFWixZQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7QUFDbEIsYUFBRyxDQUFDLElBQUksQ0FBQztBQUNQLGNBQUUsRUFBRSxJQUFJLENBQUMsU0FBUztBQUNsQix3QkFBWSxFQUFFLElBQUksQ0FBQyxJQUFJO1dBQ3hCLENBQUMsQ0FBQztTQUNKOzs0Q0FFTSxHQUFHOzs7Ozs7O0NBQ1gsQ0FBQzs7QUFFRixRQUFRLENBQUMsVUFBVSxHQUFHOzs7OzRDQUNiLElBQUksQ0FBQyxJQUFJOzs7Ozs7O0NBQ2pCLENBQUM7O0FBRUYsUUFBUSxDQUFDLGFBQWEsR0FBRzs7OztBQUN2QixZQUFJLENBQUMsc0JBQXNCLEVBQUUsQ0FBQztBQUM5QixZQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQzs7Ozs7OztDQUN2QixDQUFDOztxQkFFYSxRQUFRIiwiZmlsZSI6ImxpYi9jb21tYW5kcy9zZXNzaW9uLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCBsb2cgZnJvbSAnLi4vbG9nZ2VyJztcbmltcG9ydCB7IGVycm9ycyB9IGZyb20gJ21vYmlsZS1qc29uLXdpcmUtcHJvdG9jb2wnO1xuaW1wb3J0IFVVSUQgZnJvbSAndXVpZC1qcyc7XG5cbmxldCBjb21tYW5kcyA9IHt9O1xuXG5jb21tYW5kcy5jcmVhdGVTZXNzaW9uID0gYXN5bmMgZnVuY3Rpb24gKGNhcHMpIHtcbiAgaWYgKHRoaXMuc2Vzc2lvbklkICE9PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5TZXNzaW9uTm90Q3JlYXRlZEVycm9yKCdDYW5ub3QgY3JlYXRlIGEgbmV3IHNlc3Npb24gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd3aGlsZSBvbmUgaXMgaW4gcHJvZ3Jlc3MnKTtcbiAgfVxuICB0aGlzLnZhbGlkYXRlRGVzaXJlZENhcHMoY2Fwcyk7XG4gIHRoaXMuc2Vzc2lvbklkID0gVVVJRC5jcmVhdGUoKS5oZXg7XG4gIHRoaXMuY2FwcyA9IGNhcHM7XG4gIHRoaXMub3B0cyA9IF8uY2xvbmVEZWVwKHRoaXMuaW5pdGlhbE9wdHMpO1xuXG4gIC8vIG1lcmdlIGNhcHMgb250byBvcHRzIHNvIHdlIGRvbid0IG5lZWQgdG8gd29ycnkgYWJvdXQgd2hhdCdzIHdoZXJlXG4gIE9iamVjdC5hc3NpZ24odGhpcy5vcHRzLCB0aGlzLmNhcHMpO1xuXG5cbiAgLy8gUHJldmVudHMgZW1wdHkgc3RyaW5nIGNhcHMgc28gd2UgZG9uJ3QgbmVlZCB0byB0ZXN0IGl0IGV2ZXJ5d2hlcmVcbiAgaWYgKHR5cGVvZiB0aGlzLm9wdHMuYXBwID09PSAnc3RyaW5nJyAmJiB0aGlzLm9wdHMuYXBwLnRyaW0oKSA9PT0gJycpIHtcbiAgICB0aGlzLm9wdHMuYXBwID0gbnVsbDtcbiAgfVxuXG4gIGlmICghXy5pc1VuZGVmaW5lZCh0aGlzLmNhcHMubmV3Q29tbWFuZFRpbWVvdXQpKSB7XG4gICAgdGhpcy5uZXdDb21tYW5kVGltZW91dE1zID0gKHRoaXMuY2Fwcy5uZXdDb21tYW5kVGltZW91dCAqIDEwMDApO1xuICB9XG5cbiAgLy8gV2UgbmVlZCB0byBpbmluaXRpYWxpemUgb25lIG9uVW5leHBlY3RlZFNodXRkb3cgcHJvbWlzZSBwZXIgc2Vzc2lvblxuICAvLyB0byBhdm9pZCB0aGUgcHJvbWlzZSBmdWxmaWxtZW50IGJlaW5nIHByb3BhZ2F0ZWQgYmV0d2VlbiBzZXNzaW9ucy5cbiAgdGhpcy5yZXNldE9uVW5leHBlY3RlZFNodXRkb3duKCk7XG5cbiAgbG9nLmluZm8oYFNlc3Npb24gY3JlYXRlZCB3aXRoIHNlc3Npb24gaWQ6ICR7dGhpcy5zZXNzaW9uSWR9YCk7XG5cbiAgcmV0dXJuIFt0aGlzLnNlc3Npb25JZCwgY2Fwc107XG59O1xuXG5jb21tYW5kcy5nZXRTZXNzaW9ucyA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgbGV0IHJldCA9IFtdO1xuXG4gIGlmICh0aGlzLnNlc3Npb25JZCkge1xuICAgIHJldC5wdXNoKHtcbiAgICAgIGlkOiB0aGlzLnNlc3Npb25JZCxcbiAgICAgIGNhcGFiaWxpdGllczogdGhpcy5jYXBzXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gcmV0O1xufTtcblxuY29tbWFuZHMuZ2V0U2Vzc2lvbiA9IGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuY2Fwcztcbn07XG5cbmNvbW1hbmRzLmRlbGV0ZVNlc3Npb24gPSBhc3luYyBmdW5jdGlvbiAoLyogc2Vzc2lvbklkICovKSB7XG4gIHRoaXMuY2xlYXJOZXdDb21tYW5kVGltZW91dCgpO1xuICB0aGlzLnNlc3Npb25JZCA9IG51bGw7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb21tYW5kcztcbiJdfQ==