'use strict';

var _regeneratorRuntime = require('babel-runtime/regenerator')['default'];

var _Object$assign = require('babel-runtime/core-js/object/assign')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _logger = require('../logger');

var _logger2 = _interopRequireDefault(_logger);

var _asyncbox = require('asyncbox');

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _appiumSupport = require('appium-support');

var commands = {},
    helpers = {},
    extensions = {};

commands.implicitWait = function (ms) {
  this.implicitWaitMs = parseInt(ms, 10);
  _logger2['default'].debug('Set implicit wait to ' + ms + 'ms');
};

commands.timeouts = function callee$0$0(name, duration) {
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        if (name === 'command') {
          this.newCommandTimeoutMs = duration;
        }

      case 1:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

helpers.clearNewCommandTimeout = function () {
  if (this.noCommandTimer) {
    this.noCommandTimer.cancel();
    this.noCommandTimer = null;
  }
};

helpers.startNewCommandTimeout = function () {
  var _this = this;

  // make sure there are no rogue timeouts
  this.clearNewCommandTimeout();

  // if command timeout is 0, it is disabled
  if (!this.newCommandTimeoutMs) return;

  this.noCommandTimer = _appiumSupport.util.cancellableDelay(this.newCommandTimeoutMs);
  this.noCommandTimer.then(function callee$1$0() {
    var errorMessage;
    return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
      while (1) switch (context$2$0.prev = context$2$0.next) {
        case 0:
          _logger2['default'].warn('Shutting down because we waited ' + (this.newCommandTimeoutMs / 1000 + ' seconds for a command'));
          errorMessage = 'New Command Timeout of ' + (this.newCommandTimeoutMs / 1000 + ' seconds ') + 'expired. Try customizing the timeout using the ' + '\'newCommandTimeout\' desired capability';
          context$2$0.next = 4;
          return _regeneratorRuntime.awrap(this.startUnexpectedShutdown(new Error(errorMessage)));

        case 4:
        case 'end':
          return context$2$0.stop();
      }
    }, null, _this);
  })['catch'](_bluebird2['default'].CancellationError, function () /*err*/{
    // ignore
  });
};

helpers.implicitWaitForCondition = function callee$0$0(condFn) {
  var wrappedCondFn;
  return _regeneratorRuntime.async(function callee$0$0$(context$1$0) {
    while (1) switch (context$1$0.prev = context$1$0.next) {
      case 0:
        _logger2['default'].debug('Waiting up to ' + this.implicitWaitMs + ' ms for condition');

        wrappedCondFn = (function callee$1$0() {
          var args$2$0 = arguments;
          return _regeneratorRuntime.async(function callee$1$0$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
              case 0:
                // reset command timeout
                this.clearNewCommandTimeout();

                context$2$0.next = 3;
                return _regeneratorRuntime.awrap(condFn.apply(undefined, args$2$0));

              case 3:
                return context$2$0.abrupt('return', context$2$0.sent);

              case 4:
              case 'end':
                return context$2$0.stop();
            }
          }, null, this);
        }).bind(this);

        context$1$0.next = 4;
        return _regeneratorRuntime.awrap((0, _asyncbox.waitForCondition)(wrappedCondFn, {
          waitMs: this.implicitWaitMs, intervalMs: 500, logger: _logger2['default']
        }));

      case 4:
        return context$1$0.abrupt('return', context$1$0.sent);

      case 5:
      case 'end':
        return context$1$0.stop();
    }
  }, null, this);
};

_Object$assign(extensions, commands, helpers);
exports.commands = commands;
exports.helpers = helpers;
exports['default'] = extensions;
// TODO: fix jshint and use an arrow function
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9jb21tYW5kcy90aW1lb3V0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztzQkFBZ0IsV0FBVzs7Ozt3QkFDTSxVQUFVOzt3QkFDN0IsVUFBVTs7Ozs2QkFDSCxnQkFBZ0I7O0FBR3JDLElBQUksUUFBUSxHQUFHLEVBQUU7SUFBRSxPQUFPLEdBQUcsRUFBRTtJQUFFLFVBQVUsR0FBRyxFQUFFLENBQUM7O0FBRWpELFFBQVEsQ0FBQyxZQUFZLEdBQUcsVUFBVSxFQUFFLEVBQUU7QUFDcEMsTUFBSSxDQUFDLGNBQWMsR0FBRyxRQUFRLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBQ3ZDLHNCQUFJLEtBQUssMkJBQXlCLEVBQUUsUUFBSyxDQUFDO0NBQzNDLENBQUM7O0FBRUYsUUFBUSxDQUFDLFFBQVEsR0FBRyxvQkFBZ0IsSUFBSSxFQUFFLFFBQVE7Ozs7QUFDaEQsWUFBSSxJQUFJLEtBQUssU0FBUyxFQUFFO0FBQ3RCLGNBQUksQ0FBQyxtQkFBbUIsR0FBRyxRQUFRLENBQUM7U0FDckM7Ozs7Ozs7Q0FDRixDQUFDOztBQUVGLE9BQU8sQ0FBQyxzQkFBc0IsR0FBRyxZQUFZO0FBQzNDLE1BQUksSUFBSSxDQUFDLGNBQWMsRUFBRTtBQUN2QixRQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBQzdCLFFBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDO0dBQzVCO0NBQ0YsQ0FBQzs7QUFFRixPQUFPLENBQUMsc0JBQXNCLEdBQUcsWUFBWTs7OztBQUUzQyxNQUFJLENBQUMsc0JBQXNCLEVBQUUsQ0FBQzs7O0FBRzlCLE1BQUcsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsT0FBTzs7QUFFckMsTUFBSSxDQUFDLGNBQWMsR0FBRyxvQkFBSyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQztBQUN0RSxNQUFJLENBQUMsY0FBYyxDQUNoQixJQUFJLENBQUM7UUFHQSxZQUFZOzs7O0FBRmhCLDhCQUFJLElBQUksQ0FBQyxzQ0FDRyxJQUFJLENBQUMsbUJBQW1CLEdBQUcsSUFBSSw0QkFBd0IsQ0FBQyxDQUFDO0FBQ2pFLHNCQUFZLEdBQUcsNkJBQ1AsSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksZUFBVyxvREFDSSw2Q0FDVDs7MkNBQzNDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQzs7Ozs7OztHQUM1RCxDQUFDLFNBQ0ksQ0FBQyxzQkFBRSxpQkFBaUIsRUFBRSxtQkFBYTs7R0FFeEMsQ0FBQyxDQUFDO0NBQ04sQ0FBQzs7QUFFRixPQUFPLENBQUMsd0JBQXdCLEdBQUcsb0JBQWdCLE1BQU07TUFFbkQsYUFBYTs7OztBQURqQiw0QkFBSSxLQUFLLG9CQUFrQixJQUFJLENBQUMsY0FBYyx1QkFBb0IsQ0FBQzs7QUFDL0QscUJBQWEsR0FBRyxDQUFBOzs7Ozs7QUFFbEIsb0JBQUksQ0FBQyxzQkFBc0IsRUFBRSxDQUFDOzs7aURBRWpCLE1BQU0sMkJBQVM7Ozs7Ozs7Ozs7VUFDN0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDOzs7eUNBQ0MsZ0NBQWlCLGFBQWEsRUFBRTtBQUMzQyxnQkFBTSxFQUFFLElBQUksQ0FBQyxjQUFjLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxNQUFNLHFCQUFLO1NBQzFELENBQUM7Ozs7Ozs7Ozs7Q0FDSCxDQUFDOztBQUVGLGVBQWMsVUFBVSxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUNwQyxRQUFRLEdBQVIsUUFBUTtRQUFFLE9BQU8sR0FBUCxPQUFPO3FCQUNYLFVBQVUiLCJmaWxlIjoibGliL2NvbW1hbmRzL3RpbWVvdXQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbG9nIGZyb20gJy4uL2xvZ2dlcic7XG5pbXBvcnQgeyB3YWl0Rm9yQ29uZGl0aW9uIH0gZnJvbSAnYXN5bmNib3gnO1xuaW1wb3J0IEIgZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IHsgdXRpbCB9IGZyb20gJ2FwcGl1bS1zdXBwb3J0JztcblxuXG5sZXQgY29tbWFuZHMgPSB7fSwgaGVscGVycyA9IHt9LCBleHRlbnNpb25zID0ge307XG5cbmNvbW1hbmRzLmltcGxpY2l0V2FpdCA9IGZ1bmN0aW9uIChtcykge1xuICB0aGlzLmltcGxpY2l0V2FpdE1zID0gcGFyc2VJbnQobXMsIDEwKTtcbiAgbG9nLmRlYnVnKGBTZXQgaW1wbGljaXQgd2FpdCB0byAke21zfW1zYCk7XG59O1xuXG5jb21tYW5kcy50aW1lb3V0cyA9IGFzeW5jIGZ1bmN0aW9uIChuYW1lLCBkdXJhdGlvbikge1xuICBpZiAobmFtZSA9PT0gJ2NvbW1hbmQnKSB7XG4gICAgdGhpcy5uZXdDb21tYW5kVGltZW91dE1zID0gZHVyYXRpb247XG4gIH1cbn07XG5cbmhlbHBlcnMuY2xlYXJOZXdDb21tYW5kVGltZW91dCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMubm9Db21tYW5kVGltZXIpIHtcbiAgICB0aGlzLm5vQ29tbWFuZFRpbWVyLmNhbmNlbCgpO1xuICAgIHRoaXMubm9Db21tYW5kVGltZXIgPSBudWxsO1xuICB9XG59O1xuXG5oZWxwZXJzLnN0YXJ0TmV3Q29tbWFuZFRpbWVvdXQgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIG1ha2Ugc3VyZSB0aGVyZSBhcmUgbm8gcm9ndWUgdGltZW91dHNcbiAgdGhpcy5jbGVhck5ld0NvbW1hbmRUaW1lb3V0KCk7XG5cbiAgLy8gaWYgY29tbWFuZCB0aW1lb3V0IGlzIDAsIGl0IGlzIGRpc2FibGVkXG4gIGlmKCF0aGlzLm5ld0NvbW1hbmRUaW1lb3V0TXMpIHJldHVybjtcblxuICB0aGlzLm5vQ29tbWFuZFRpbWVyID0gdXRpbC5jYW5jZWxsYWJsZURlbGF5KHRoaXMubmV3Q29tbWFuZFRpbWVvdXRNcyk7XG4gIHRoaXMubm9Db21tYW5kVGltZXJcbiAgICAudGhlbihhc3luYyAoKSA9PiB7XG4gICAgICBsb2cud2FybihgU2h1dHRpbmcgZG93biBiZWNhdXNlIHdlIHdhaXRlZCBgICtcbiAgICAgICAgICAgICAgIGAke3RoaXMubmV3Q29tbWFuZFRpbWVvdXRNcyAvIDEwMDB9IHNlY29uZHMgZm9yIGEgY29tbWFuZGApO1xuICAgICAgbGV0IGVycm9yTWVzc2FnZSA9IGBOZXcgQ29tbWFuZCBUaW1lb3V0IG9mIGAgK1xuICAgICAgICAgICAgICAgYCR7dGhpcy5uZXdDb21tYW5kVGltZW91dE1zIC8gMTAwMH0gc2Vjb25kcyBgICtcbiAgICAgICAgICAgICAgIGBleHBpcmVkLiBUcnkgY3VzdG9taXppbmcgdGhlIHRpbWVvdXQgdXNpbmcgdGhlIGAgK1xuICAgICAgICAgICAgICAgYCduZXdDb21tYW5kVGltZW91dCcgZGVzaXJlZCBjYXBhYmlsaXR5YDtcbiAgICAgIGF3YWl0IHRoaXMuc3RhcnRVbmV4cGVjdGVkU2h1dGRvd24obmV3IEVycm9yKGVycm9yTWVzc2FnZSkpO1xuICAgIH0pXG4gICAgLmNhdGNoKEIuQ2FuY2VsbGF0aW9uRXJyb3IsICgvKmVyciovKSA9PiB7XG4gICAgICAvLyBpZ25vcmVcbiAgICB9KTtcbn07XG5cbmhlbHBlcnMuaW1wbGljaXRXYWl0Rm9yQ29uZGl0aW9uID0gYXN5bmMgZnVuY3Rpb24gKGNvbmRGbikge1xuICBsb2cuZGVidWcoYFdhaXRpbmcgdXAgdG8gJHt0aGlzLmltcGxpY2l0V2FpdE1zfSBtcyBmb3IgY29uZGl0aW9uYCk7XG4gIGxldCB3cmFwcGVkQ29uZEZuID0gYXN5bmMgZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAvLyByZXNldCBjb21tYW5kIHRpbWVvdXRcbiAgICB0aGlzLmNsZWFyTmV3Q29tbWFuZFRpbWVvdXQoKTtcblxuICAgIHJldHVybiBhd2FpdCBjb25kRm4oLi4uYXJncyk7XG4gIH0uYmluZCh0aGlzKTsgLy8gVE9ETzogZml4IGpzaGludCBhbmQgdXNlIGFuIGFycm93IGZ1bmN0aW9uXG4gIHJldHVybiBhd2FpdCB3YWl0Rm9yQ29uZGl0aW9uKHdyYXBwZWRDb25kRm4sIHtcbiAgICB3YWl0TXM6IHRoaXMuaW1wbGljaXRXYWl0TXMsIGludGVydmFsTXM6IDUwMCwgbG9nZ2VyOiBsb2dcbiAgfSk7XG59O1xuXG5PYmplY3QuYXNzaWduKGV4dGVuc2lvbnMsIGNvbW1hbmRzLCBoZWxwZXJzKTtcbmV4cG9ydCB7IGNvbW1hbmRzLCBoZWxwZXJzIH07XG5leHBvcnQgZGVmYXVsdCBleHRlbnNpb25zO1xuIl19