'use strict';

var _slicedToArray = require('babel-runtime/helpers/sliced-to-array')['default'];

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _logger = require('./logger');

var _logger2 = _interopRequireDefault(_logger);

function fixCaps(originalCaps) {
  var caps = _lodash2['default'].clone(originalCaps);
  // boolean capabilities can be passed in as strings 'false' and 'true'
  // which we want to translate into boolean values
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = _getIterator(_lodash2['default'].pairs(caps)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var _step$value = _slicedToArray(_step.value, 2);

      var cap = _step$value[0];
      var value = _step$value[1];

      if (_lodash2['default'].isString(value)) {
        value = value.toLowerCase();
        if (value === 'true' || value === 'false') {
          _logger2['default'].debug('Capability \'' + cap + '\' changed from string to boolean. This may cause unexpected behavior');
          caps[cap] = value === 'true';
        }
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator['return']) {
        _iterator['return']();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return caps;
}

exports.fixCaps = fixCaps;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9oZWxwZXJzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztzQkFBYyxRQUFROzs7O3NCQUNOLFVBQVU7Ozs7QUFHMUIsU0FBUyxPQUFPLENBQUUsWUFBWSxFQUFFO0FBQzlCLE1BQUksSUFBSSxHQUFHLG9CQUFFLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQzs7Ozs7Ozs7QUFHakMsc0NBQXlCLG9CQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsNEdBQUU7OztVQUE5QixHQUFHO1VBQUUsS0FBSzs7QUFDbEIsVUFBSSxvQkFBRSxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUU7QUFDckIsYUFBSyxHQUFHLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQztBQUM1QixZQUFJLEtBQUssS0FBSyxNQUFNLElBQUksS0FBSyxLQUFLLE9BQU8sRUFBRTtBQUN6Qyw4QkFBSSxLQUFLLG1CQUFnQixHQUFHLDJFQUF1RSxDQUFDO0FBQ3BHLGNBQUksQ0FBQyxHQUFHLENBQUMsR0FBSSxLQUFLLEtBQUssTUFBTSxBQUFDLENBQUM7U0FDaEM7T0FDRjtLQUNGOzs7Ozs7Ozs7Ozs7Ozs7O0FBQ0QsU0FBTyxJQUFJLENBQUM7Q0FDYjs7UUFHUSxPQUFPLEdBQVAsT0FBTyIsImZpbGUiOiJsaWIvaGVscGVycy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgbG9nIGZyb20gJy4vbG9nZ2VyJztcblxuXG5mdW5jdGlvbiBmaXhDYXBzIChvcmlnaW5hbENhcHMpIHtcbiAgbGV0IGNhcHMgPSBfLmNsb25lKG9yaWdpbmFsQ2Fwcyk7XG4gIC8vIGJvb2xlYW4gY2FwYWJpbGl0aWVzIGNhbiBiZSBwYXNzZWQgaW4gYXMgc3RyaW5ncyAnZmFsc2UnIGFuZCAndHJ1ZSdcbiAgLy8gd2hpY2ggd2Ugd2FudCB0byB0cmFuc2xhdGUgaW50byBib29sZWFuIHZhbHVlc1xuICBmb3IgKGxldCBbY2FwLCB2YWx1ZV0gb2YgXy5wYWlycyhjYXBzKSkge1xuICAgIGlmIChfLmlzU3RyaW5nKHZhbHVlKSkge1xuICAgICAgdmFsdWUgPSB2YWx1ZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgaWYgKHZhbHVlID09PSAndHJ1ZScgfHwgdmFsdWUgPT09ICdmYWxzZScpIHtcbiAgICAgICAgbG9nLmRlYnVnKGBDYXBhYmlsaXR5ICcke2NhcH0nIGNoYW5nZWQgZnJvbSBzdHJpbmcgdG8gYm9vbGVhbi4gVGhpcyBtYXkgY2F1c2UgdW5leHBlY3RlZCBiZWhhdmlvcmApO1xuICAgICAgICBjYXBzW2NhcF0gPSAodmFsdWUgPT09ICd0cnVlJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBjYXBzO1xufVxuXG5cbmV4cG9ydCB7IGZpeENhcHMgfTtcbiJdfQ==