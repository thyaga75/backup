require('source-map-support').install();

'use strict';

var _getIterator = require('babel-runtime/core-js/get-iterator')['default'];

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default')['default'];

var _libParser = require('../lib/parser');

var _libParser2 = _interopRequireDefault(_libParser);

var _chai = require('chai');

var _chai2 = _interopRequireDefault(_chai);

var should = _chai2['default'].should();

describe('Parser', function () {
  var p = (0, _libParser2['default'])();
  it('should return an arg parser', function () {
    should.exist(p.parseArgs);
    p.parseArgs([]).should.have.property('port');
  });
  it('should keep the raw server flags array', function () {
    should.exist(p.rawArgs);
  });
  it('should have help for every arg', function () {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = _getIterator(p.rawArgs), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var arg = _step.value;

        arg[1].should.have.property('help');
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  });
  it('should throw an error with unknown argument', function () {
    (function () {
      p.parseArgs(['--apple']);
    }).should['throw'];
  });
  it('should parse default capabilities correctly', function () {
    var defaultCapabilities = { a: 'b' };
    var args = p.parseArgs(['--default-capabilities', JSON.stringify(defaultCapabilities)]);
    args.defaultCapabilities.should.eql(defaultCapabilities);
  });
  it('should parse args that are caps into default capabilities', function () {
    var defaultCapabilities = { localizableStringsDir: '/my/dir' };
    var args = p.parseArgs(['--localizable-strings-dir', '/my/dir']);
    args.defaultCapabilities.should.eql(defaultCapabilities);
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvcGFyc2VyLXNwZWNzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O3lCQUVzQixlQUFlOzs7O29CQUNwQixNQUFNOzs7O0FBRXZCLElBQU0sTUFBTSxHQUFHLGtCQUFLLE1BQU0sRUFBRSxDQUFDOztBQUU3QixRQUFRLENBQUMsUUFBUSxFQUFFLFlBQU07QUFDdkIsTUFBSSxDQUFDLEdBQUcsNkJBQVcsQ0FBQztBQUNwQixJQUFFLENBQUMsNkJBQTZCLEVBQUUsWUFBTTtBQUN0QyxVQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUMxQixLQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0dBQzlDLENBQUMsQ0FBQztBQUNILElBQUUsQ0FBQyx3Q0FBd0MsRUFBRSxZQUFNO0FBQ2pELFVBQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0dBQ3pCLENBQUMsQ0FBQztBQUNILElBQUUsQ0FBQyxnQ0FBZ0MsRUFBRSxZQUFNOzs7Ozs7QUFDekMsd0NBQWdCLENBQUMsQ0FBQyxPQUFPLDRHQUFFO1lBQWxCLEdBQUc7O0FBQ1YsV0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO09BQ3JDOzs7Ozs7Ozs7Ozs7Ozs7R0FDRixDQUFDLENBQUM7QUFDSCxJQUFFLENBQUMsNkNBQTZDLEVBQUUsWUFBTTtBQUN0RCxLQUFDLFlBQU07QUFBQyxPQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztLQUFDLENBQUEsQ0FBRSxNQUFNLFNBQU0sQ0FBQztHQUNsRCxDQUFDLENBQUM7QUFDSCxJQUFFLENBQUMsNkNBQTZDLEVBQUUsWUFBTTtBQUN0RCxRQUFJLG1CQUFtQixHQUFHLEVBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBQyxDQUFDO0FBQ25DLFFBQUksSUFBSSxHQUFHLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyx3QkFBd0IsRUFDeEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM5RCxRQUFJLENBQUMsbUJBQW1CLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0dBQzFELENBQUMsQ0FBQztBQUNILElBQUUsQ0FBQywyREFBMkQsRUFBRSxZQUFNO0FBQ3BFLFFBQUksbUJBQW1CLEdBQUcsRUFBQyxxQkFBcUIsRUFBRSxTQUFTLEVBQUMsQ0FBQztBQUM3RCxRQUFJLElBQUksR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsMkJBQTJCLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQztBQUNqRSxRQUFJLENBQUMsbUJBQW1CLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0dBQzFELENBQUMsQ0FBQztDQUNKLENBQUMsQ0FBQyIsImZpbGUiOiJ0ZXN0L3BhcnNlci1zcGVjcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRyYW5zcGlsZTptb2NoYVxuXG5pbXBvcnQgZ2V0UGFyc2VyIGZyb20gJy4uL2xpYi9wYXJzZXInO1xuaW1wb3J0IGNoYWkgZnJvbSAnY2hhaSc7XG5cbmNvbnN0IHNob3VsZCA9IGNoYWkuc2hvdWxkKCk7XG5cbmRlc2NyaWJlKCdQYXJzZXInLCAoKSA9PiB7XG4gIGxldCBwID0gZ2V0UGFyc2VyKCk7XG4gIGl0KCdzaG91bGQgcmV0dXJuIGFuIGFyZyBwYXJzZXInLCAoKSA9PiB7XG4gICAgc2hvdWxkLmV4aXN0KHAucGFyc2VBcmdzKTtcbiAgICBwLnBhcnNlQXJncyhbXSkuc2hvdWxkLmhhdmUucHJvcGVydHkoJ3BvcnQnKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQga2VlcCB0aGUgcmF3IHNlcnZlciBmbGFncyBhcnJheScsICgpID0+IHtcbiAgICBzaG91bGQuZXhpc3QocC5yYXdBcmdzKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgaGF2ZSBoZWxwIGZvciBldmVyeSBhcmcnLCAoKSA9PiB7XG4gICAgZm9yIChsZXQgYXJnIG9mIHAucmF3QXJncykge1xuICAgICAgYXJnWzFdLnNob3VsZC5oYXZlLnByb3BlcnR5KCdoZWxwJyk7XG4gICAgfVxuICB9KTtcbiAgaXQoJ3Nob3VsZCB0aHJvdyBhbiBlcnJvciB3aXRoIHVua25vd24gYXJndW1lbnQnLCAoKSA9PiB7XG4gICAgKCgpID0+IHtwLnBhcnNlQXJncyhbJy0tYXBwbGUnXSk7fSkuc2hvdWxkLnRocm93O1xuICB9KTtcbiAgaXQoJ3Nob3VsZCBwYXJzZSBkZWZhdWx0IGNhcGFiaWxpdGllcyBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgbGV0IGRlZmF1bHRDYXBhYmlsaXRpZXMgPSB7YTogJ2InfTtcbiAgICBsZXQgYXJncyA9IHAucGFyc2VBcmdzKFsnLS1kZWZhdWx0LWNhcGFiaWxpdGllcycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkoZGVmYXVsdENhcGFiaWxpdGllcyldKTtcbiAgICBhcmdzLmRlZmF1bHRDYXBhYmlsaXRpZXMuc2hvdWxkLmVxbChkZWZhdWx0Q2FwYWJpbGl0aWVzKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgcGFyc2UgYXJncyB0aGF0IGFyZSBjYXBzIGludG8gZGVmYXVsdCBjYXBhYmlsaXRpZXMnLCAoKSA9PiB7XG4gICAgbGV0IGRlZmF1bHRDYXBhYmlsaXRpZXMgPSB7bG9jYWxpemFibGVTdHJpbmdzRGlyOiAnL215L2Rpcid9O1xuICAgIGxldCBhcmdzID0gcC5wYXJzZUFyZ3MoWyctLWxvY2FsaXphYmxlLXN0cmluZ3MtZGlyJywgJy9teS9kaXInXSk7XG4gICAgYXJncy5kZWZhdWx0Q2FwYWJpbGl0aWVzLnNob3VsZC5lcWwoZGVmYXVsdENhcGFiaWxpdGllcyk7XG4gIH0pO1xufSk7XG4iXX0=